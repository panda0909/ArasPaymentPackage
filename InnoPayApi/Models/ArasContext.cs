using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace InnoPayApi.Models;

public partial class ArasContext : DbContext
{
    public ArasContext()
    {
    }

    public ArasContext(DbContextOptions<ArasContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Access> Accesses { get; set; }

    public virtual DbSet<Action> Actions { get; set; }

    public virtual DbSet<Activeuser> Activeusers { get; set; }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<Activity2> Activity2s { get; set; }

    public virtual DbSet<Activity2Assignment> Activity2Assignments { get; set; }

    public virtual DbSet<Activity2Comment> Activity2Comments { get; set; }

    public virtual DbSet<Activity2Deliverable> Activity2Deliverables { get; set; }

    public virtual DbSet<Activity2Task> Activity2Tasks { get; set; }

    public virtual DbSet<ActivityAssignment> ActivityAssignments { get; set; }

    public virtual DbSet<ActivityEmail> ActivityEmails { get; set; }

    public virtual DbSet<ActivityMethod> ActivityMethods { get; set; }

    public virtual DbSet<ActivityTask> ActivityTasks { get; set; }

    public virtual DbSet<ActivityTaskValue> ActivityTaskValues { get; set; }

    public virtual DbSet<ActivityTemplate> ActivityTemplates { get; set; }

    public virtual DbSet<ActivityTemplateAssignment> ActivityTemplateAssignments { get; set; }

    public virtual DbSet<ActivityTemplateEmail> ActivityTemplateEmails { get; set; }

    public virtual DbSet<ActivityTemplateMethod> ActivityTemplateMethods { get; set; }

    public virtual DbSet<ActivityTemplateTask> ActivityTemplateTasks { get; set; }

    public virtual DbSet<ActivityTemplateTransition> ActivityTemplateTransitions { get; set; }

    public virtual DbSet<ActivityTemplateVariable> ActivityTemplateVariables { get; set; }

    public virtual DbSet<ActivityTransition> ActivityTransitions { get; set; }

    public virtual DbSet<ActivityVariable> ActivityVariables { get; set; }

    public virtual DbSet<ActivityVariableValue> ActivityVariableValues { get; set; }

    public virtual DbSet<AffectedItem> AffectedItems { get; set; }

    public virtual DbSet<AffectedItemProperty> AffectedItemProperties { get; set; }

    public virtual DbSet<AffectedItemRelationship> AffectedItemRelationships { get; set; }

    public virtual DbSet<AffectedRelationship> AffectedRelationships { get; set; }

    public virtual DbSet<AffectedRelationshipProperty> AffectedRelationshipProperties { get; set; }

    public virtual DbSet<Alias> Aliases { get; set; }

    public virtual DbSet<AllowedPermission> AllowedPermissions { get; set; }

    public virtual DbSet<AllowedWorkflow> AllowedWorkflows { get; set; }

    public virtual DbSet<AppliedUpdate> AppliedUpdates { get; set; }

    public virtual DbSet<BaseNotificationMessage> BaseNotificationMessages { get; set; }

    public virtual DbSet<Board> Boards { get; set; }

    public virtual DbSet<Body> Bodies { get; set; }

    public virtual DbSet<BomInstance> BomInstances { get; set; }

    public virtual DbSet<BomSubstitute> BomSubstitutes { get; set; }

    public virtual DbSet<BusinessCalendar> BusinessCalendars { get; set; }

    public virtual DbSet<BusinessCalendarException> BusinessCalendarExceptions { get; set; }

    public virtual DbSet<BusinessCalendarYear> BusinessCalendarYears { get; set; }

    public virtual DbSet<Cad> Cads { get; set; }

    public virtual DbSet<CadChange> CadChanges { get; set; }

    public virtual DbSet<CadInstance> CadInstances { get; set; }

    public virtual DbSet<CadParent> CadParents { get; set; }

    public virtual DbSet<CadPart> CadParts { get; set; }

    public virtual DbSet<CadStructure> CadStructures { get; set; }

    public virtual DbSet<Cadfile> Cadfiles { get; set; }

    public virtual DbSet<CanAdd> CanAdds { get; set; }

    public virtual DbSet<ChangeControlledItem> ChangeControlledItems { get; set; }

    public virtual DbSet<ChangeControlledRelationship> ChangeControlledRelationships { get; set; }

    public virtual DbSet<Chart> Charts { get; set; }

    public virtual DbSet<ChartSeries> ChartSeries { get; set; }

    public virtual DbSet<ClientEvent> ClientEvents { get; set; }

    public virtual DbSet<CmfAdditionalpropertytype> CmfAdditionalpropertytypes { get; set; }

    public virtual DbSet<CmfBaseview> CmfBaseviews { get; set; }

    public virtual DbSet<CmfComputedproperty> CmfComputedproperties { get; set; }

    public virtual DbSet<CmfComputedpropertydependency> CmfComputedpropertydependencies { get; set; }

    public virtual DbSet<CmfContentelementitem> CmfContentelementitems { get; set; }

    public virtual DbSet<CmfContentitem> CmfContentitems { get; set; }

    public virtual DbSet<CmfContentpropertyitem> CmfContentpropertyitems { get; set; }

    public virtual DbSet<CmfContenttype> CmfContenttypes { get; set; }

    public virtual DbSet<CmfContenttypeexportrel> CmfContenttypeexportrels { get; set; }

    public virtual DbSet<CmfContenttypeexportsetting> CmfContenttypeexportsettings { get; set; }

    public virtual DbSet<CmfContenttypeexporttoexcel> CmfContenttypeexporttoexcels { get; set; }

    public virtual DbSet<CmfContenttypegridlayout> CmfContenttypegridlayouts { get; set; }

    public virtual DbSet<CmfContenttypeview> CmfContenttypeviews { get; set; }

    public virtual DbSet<CmfDocumentlifecyclestate> CmfDocumentlifecyclestates { get; set; }

    public virtual DbSet<CmfElementallowedpermission> CmfElementallowedpermissions { get; set; }

    public virtual DbSet<CmfElementbinding> CmfElementbindings { get; set; }

    public virtual DbSet<CmfElementtype> CmfElementtypes { get; set; }

    public virtual DbSet<CmfExporttoexcelviewconfig> CmfExporttoexcelviewconfigs { get; set; }

    public virtual DbSet<CmfPropertyallowedpermission> CmfPropertyallowedpermissions { get; set; }

    public virtual DbSet<CmfPropertybinding> CmfPropertybindings { get; set; }

    public virtual DbSet<CmfPropertytype> CmfPropertytypes { get; set; }

    public virtual DbSet<CmfStyle> CmfStyles { get; set; }

    public virtual DbSet<CmfTabularview> CmfTabularviews { get; set; }

    public virtual DbSet<CmfTabularviewcolumn> CmfTabularviewcolumns { get; set; }

    public virtual DbSet<CmfTabularviewcolumngroup> CmfTabularviewcolumngroups { get; set; }

    public virtual DbSet<CmfTabularviewheaderrow> CmfTabularviewheaderrows { get; set; }

    public virtual DbSet<CmfTabularviewheaderrow1> CmfTabularviewheaderrows1 { get; set; }

    public virtual DbSet<CmfTabularviewtree> CmfTabularviewtrees { get; set; }

    public virtual DbSet<ColumnEvent> ColumnEvents { get; set; }

    public virtual DbSet<Commandbarbutton> Commandbarbuttons { get; set; }

    public virtual DbSet<Commandbarcheckbox> Commandbarcheckboxes { get; set; }

    public virtual DbSet<Commandbardropdown> Commandbardropdowns { get; set; }

    public virtual DbSet<Commandbaredit> Commandbaredits { get; set; }

    public virtual DbSet<Commandbaritem> Commandbaritems { get; set; }

    public virtual DbSet<Commandbarmenu> Commandbarmenus { get; set; }

    public virtual DbSet<Commandbarmenubutton> Commandbarmenubuttons { get; set; }

    public virtual DbSet<Commandbarmenucheckbox> Commandbarmenucheckboxes { get; set; }

    public virtual DbSet<Commandbarmenuseparator> Commandbarmenuseparators { get; set; }

    public virtual DbSet<Commandbarsection> Commandbarsections { get; set; }

    public virtual DbSet<Commandbarsectiondependency> Commandbarsectiondependencies { get; set; }

    public virtual DbSet<Commandbarsectionitem> Commandbarsectionitems { get; set; }

    public virtual DbSet<Commandbarseparator> Commandbarseparators { get; set; }

    public virtual DbSet<Commandbarshortcut> Commandbarshortcuts { get; set; }

    public virtual DbSet<ConfigurableGridEvent> ConfigurableGridEvents { get; set; }

    public virtual DbSet<Conversionrule> Conversionrules { get; set; }

    public virtual DbSet<Conversionruleeventhandler> Conversionruleeventhandlers { get; set; }

    public virtual DbSet<Conversionruleeventtemplate> Conversionruleeventtemplates { get; set; }

    public virtual DbSet<Conversionrulefiletype> Conversionrulefiletypes { get; set; }

    public virtual DbSet<Conversionserver> Conversionservers { get; set; }

    public virtual DbSet<Conversionserverconvertertype> Conversionserverconvertertypes { get; set; }

    public virtual DbSet<Conversionserverpriority> Conversionserverpriorities { get; set; }

    public virtual DbSet<Conversiontask> Conversiontasks { get; set; }

    public virtual DbSet<Conversiontaskdependency> Conversiontaskdependencies { get; set; }

    public virtual DbSet<Conversiontaskeventhandler> Conversiontaskeventhandlers { get; set; }

    public virtual DbSet<Conversiontaskhandlererror> Conversiontaskhandlererrors { get; set; }

    public virtual DbSet<Conversiontaskresult> Conversiontaskresults { get; set; }

    public virtual DbSet<Convertertype> Convertertypes { get; set; }

    public virtual DbSet<CoreGloballayout> CoreGloballayouts { get; set; }

    public virtual DbSet<CoreItemgridlayout> CoreItemgridlayouts { get; set; }

    public virtual DbSet<CoreRelgridlayout> CoreRelgridlayouts { get; set; }

    public virtual DbSet<Cuidependency> Cuidependencies { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Dashboard> Dashboards { get; set; }

    public virtual DbSet<DashboardChart> DashboardCharts { get; set; }

    public virtual DbSet<Databaseupgrade> Databaseupgrades { get; set; }

    public virtual DbSet<Databaseupgradelogfile> Databaseupgradelogfiles { get; set; }

    public virtual DbSet<Databaseupgradepatch> Databaseupgradepatches { get; set; }

    public virtual DbSet<Deliverable> Deliverables { get; set; }

    public virtual DbSet<DesignToGoal> DesignToGoals { get; set; }

    public virtual DbSet<Desktop> Desktops { get; set; }

    public virtual DbSet<Discussion> Discussions { get; set; }

    public virtual DbSet<Discussiondefinition> Discussiondefinitions { get; set; }

    public virtual DbSet<Discussiondefinitionview> Discussiondefinitionviews { get; set; }

    public virtual DbSet<Discussiontemplate> Discussiontemplates { get; set; }

    public virtual DbSet<Discussiontemplateview> Discussiontemplateviews { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentChange> DocumentChanges { get; set; }

    public virtual DbSet<DocumentFile> DocumentFiles { get; set; }

    public virtual DbSet<Ecn> Ecns { get; set; }

    public virtual DbSet<EcnAffectedItem> EcnAffectedItems { get; set; }

    public virtual DbSet<EcnEcr> EcnEcrs { get; set; }

    public virtual DbSet<EcnFile> EcnFiles { get; set; }

    public virtual DbSet<Ecr> Ecrs { get; set; }

    public virtual DbSet<EcrAffectedItem> EcrAffectedItems { get; set; }

    public virtual DbSet<EcrFile> EcrFiles { get; set; }

    public virtual DbSet<EcrPr> EcrPrs { get; set; }

    public virtual DbSet<EmailMessage> EmailMessages { get; set; }

    public virtual DbSet<EngineeringEfficiency> EngineeringEfficiencies { get; set; }

    public virtual DbSet<EngineeringOptimization> EngineeringOptimizations { get; set; }

    public virtual DbSet<EsAdmin> EsAdmins { get; set; }

    public virtual DbSet<EsAgent> EsAgents { get; set; }

    public virtual DbSet<EsAgentstate> EsAgentstates { get; set; }

    public virtual DbSet<EsCrawler> EsCrawlers { get; set; }

    public virtual DbSet<EsCrawlerstate> EsCrawlerstates { get; set; }

    public virtual DbSet<EsIndexedconfiguration> EsIndexedconfigurations { get; set; }

    public virtual DbSet<EsIndexedconfigurationtype> EsIndexedconfigurationtypes { get; set; }

    public virtual DbSet<EsIndexedfile> EsIndexedfiles { get; set; }

    public virtual DbSet<EsIndexedproperty> EsIndexedproperties { get; set; }

    public virtual DbSet<EsIndexedtype> EsIndexedtypes { get; set; }

    public virtual DbSet<EsIndexedtypepoly> EsIndexedtypepolies { get; set; }

    public virtual DbSet<EsIndexqueue> EsIndexqueues { get; set; }

    public virtual DbSet<EsSearch> EsSearches { get; set; }

    public virtual DbSet<EsTrackingrelationshippoly> EsTrackingrelationshippolies { get; set; }

    public virtual DbSet<EsVersionedpropertypoly> EsVersionedpropertypolies { get; set; }

    public virtual DbSet<Exclusion> Exclusions { get; set; }

    public virtual DbSet<ExpressDco> ExpressDcos { get; set; }

    public virtual DbSet<ExpressDcoAffectedItem> ExpressDcoAffectedItems { get; set; }

    public virtual DbSet<ExpressDcoFile> ExpressDcoFiles { get; set; }

    public virtual DbSet<ExpressDcoSignoff> ExpressDcoSignoffs { get; set; }

    public virtual DbSet<ExpressEco> ExpressEcos { get; set; }

    public virtual DbSet<ExpressEcoAffectedItem> ExpressEcoAffectedItems { get; set; }

    public virtual DbSet<ExpressEcoFile> ExpressEcoFiles { get; set; }

    public virtual DbSet<ExpressEcoImpactMatrix> ExpressEcoImpactMatrices { get; set; }

    public virtual DbSet<ExpressEcoSignoff> ExpressEcoSignoffs { get; set; }

    public virtual DbSet<FeatureLicense> FeatureLicenses { get; set; }

    public virtual DbSet<Feed> Feeds { get; set; }

    public virtual DbSet<Feedtemplate> Feedtemplates { get; set; }

    public virtual DbSet<Field> Fields { get; set; }

    public virtual DbSet<FieldEvent> FieldEvents { get; set; }

    public virtual DbSet<File> Files { get; set; }

    public virtual DbSet<Filecontaineritem> Filecontaineritems { get; set; }

    public virtual DbSet<Filecontainerlocator> Filecontainerlocators { get; set; }

    public virtual DbSet<Fileexchangepackage> Fileexchangepackages { get; set; }

    public virtual DbSet<Fileexchangepackagefile> Fileexchangepackagefiles { get; set; }

    public virtual DbSet<Fileexchangetxn> Fileexchangetxns { get; set; }

    public virtual DbSet<Fileexchangetxnstate> Fileexchangetxnstates { get; set; }

    public virtual DbSet<Filegroup> Filegroups { get; set; }

    public virtual DbSet<FilegroupFile> FilegroupFiles { get; set; }

    public virtual DbSet<Fileselector> Fileselectors { get; set; }

    public virtual DbSet<Fileselectortemplate> Fileselectortemplates { get; set; }

    public virtual DbSet<Filetype> Filetypes { get; set; }

    public virtual DbSet<FilterValue> FilterValues { get; set; }

    public virtual DbSet<Form> Forms { get; set; }

    public virtual DbSet<FormEvent> FormEvents { get; set; }

    public virtual DbSet<Forum> Forums { get; set; }

    public virtual DbSet<Forumitem> Forumitems { get; set; }

    public virtual DbSet<Forummessagegroup> Forummessagegroups { get; set; }

    public virtual DbSet<Forummustviewby> Forummustviewbies { get; set; }

    public virtual DbSet<Forumsearch> Forumsearches { get; set; }

    public virtual DbSet<Forumsharedwith> Forumsharedwiths { get; set; }

    public virtual DbSet<Forumwantviewby> Forumwantviewbies { get; set; }

    public virtual DbSet<Frame> Frames { get; set; }

    public virtual DbSet<Frameset> Framesets { get; set; }

    public virtual DbSet<Globalpresentationconfig> Globalpresentationconfigs { get; set; }

    public virtual DbSet<Grid> Grids { get; set; }

    public virtual DbSet<GridColumn> GridColumns { get; set; }

    public virtual DbSet<GridEvent> GridEvents { get; set; }

    public virtual DbSet<Help> Helps { get; set; }

    public virtual DbSet<HelpSeeAlso> HelpSeeAlsos { get; set; }

    public virtual DbSet<HideIn> HideIns { get; set; }

    public virtual DbSet<HideRelatedIn> HideRelatedIns { get; set; }

    public virtual DbSet<History> Histories { get; set; }

    public virtual DbSet<HistoryAction> HistoryActions { get; set; }

    public virtual DbSet<HistoryContainer> HistoryContainers { get; set; }

    public virtual DbSet<HistoryTemplate> HistoryTemplates { get; set; }

    public virtual DbSet<HistoryTemplateAction> HistoryTemplateActions { get; set; }

    public virtual DbSet<HistoryTemplateWhereUsed> HistoryTemplateWhereUseds { get; set; }

    public virtual DbSet<Historysecuremessage> Historysecuremessages { get; set; }

    public virtual DbSet<Identity> Identities { get; set; }

    public virtual DbSet<Implement> Implements { get; set; }

    public virtual DbSet<InMeetingNews> InMeetingNews { get; set; }

    public virtual DbSet<InMeetingPay> InMeetingPays { get; set; }

    public virtual DbSet<InMeetingPayDay> InMeetingPayDays { get; set; }

    public virtual DbSet<InUserPayment> InUserPayments { get; set; }

    public virtual DbSet<InUserPaymentInvoice> InUserPaymentInvoices { get; set; }

    public virtual DbSet<InUserPaymentItem> InUserPaymentItems { get; set; }

    public virtual DbSet<InUserPaymentSourcetype> InUserPaymentSourcetypes { get; set; }

    public virtual DbSet<InbasketTask> InbasketTasks { get; set; }

    public virtual DbSet<InheritedServerEvent> InheritedServerEvents { get; set; }

    public virtual DbSet<ItemAction> ItemActions { get; set; }

    public virtual DbSet<ItemReport> ItemReports { get; set; }

    public virtual DbSet<Itemtype> Itemtypes { get; set; }

    public virtual DbSet<ItemtypeLifeCycle> ItemtypeLifeCycles { get; set; }

    public virtual DbSet<Itpresentationconfiguration> Itpresentationconfigurations { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<LifeCycleMap> LifeCycleMaps { get; set; }

    public virtual DbSet<LifeCycleState> LifeCycleStates { get; set; }

    public virtual DbSet<LifeCycleTransition> LifeCycleTransitions { get; set; }

    public virtual DbSet<List> Lists { get; set; }

    public virtual DbSet<Locale> Locales { get; set; }

    public virtual DbSet<Located> Locateds { get; set; }

    public virtual DbSet<Lockeditem> Lockeditems { get; set; }

    public virtual DbSet<Lockeduser> Lockedusers { get; set; }

    public virtual DbSet<Manufacturer> Manufacturers { get; set; }

    public virtual DbSet<ManufacturerManfPart> ManufacturerManfParts { get; set; }

    public virtual DbSet<ManufacturerPart> ManufacturerParts { get; set; }

    public virtual DbSet<ManufacturerPartFile> ManufacturerPartFiles { get; set; }

    public virtual DbSet<ManufacturerPartPart> ManufacturerPartParts { get; set; }

    public virtual DbSet<MeasurementUnit> MeasurementUnits { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MessageAcknowledgement> MessageAcknowledgements { get; set; }

    public virtual DbSet<Method> Methods { get; set; }

    public virtual DbSet<Metric> Metrics { get; set; }

    public virtual DbSet<MetricValue> MetricValues { get; set; }

    public virtual DbSet<Model> Models { get; set; }

    public virtual DbSet<Morphae> Morphaes { get; set; }

    public virtual DbSet<Myreport> Myreports { get; set; }

    public virtual DbSet<OldPassword> OldPasswords { get; set; }

    public virtual DbSet<Packagedefinition> Packagedefinitions { get; set; }

    public virtual DbSet<Packagedependson> Packagedependsons { get; set; }

    public virtual DbSet<Packageelement> Packageelements { get; set; }

    public virtual DbSet<Packagegroup> Packagegroups { get; set; }

    public virtual DbSet<Packagereferencedelement> Packagereferencedelements { get; set; }

    public virtual DbSet<Part> Parts { get; set; }

    public virtual DbSet<PartAlternate> PartAlternates { get; set; }

    public virtual DbSet<PartAml> PartAmls { get; set; }

    public virtual DbSet<PartBom> PartBoms { get; set; }

    public virtual DbSet<PartCad> PartCads { get; set; }

    public virtual DbSet<PartChange> PartChanges { get; set; }

    public virtual DbSet<PartDocument> PartDocuments { get; set; }

    public virtual DbSet<PartGoal> PartGoals { get; set; }

    public virtual DbSet<PartMultilevelBom> PartMultilevelBoms { get; set; }

    public virtual DbSet<PartPsw> PartPsws { get; set; }

    public virtual DbSet<PartSubmissionWarrant> PartSubmissionWarrants { get; set; }

    public virtual DbSet<PeMainpreference> PeMainpreferences { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<PmProjectcolormap> PmProjectcolormaps { get; set; }

    public virtual DbSet<PmProjectcolorperiod> PmProjectcolorperiods { get; set; }

    public virtual DbSet<PmProjectcolumndescription> PmProjectcolumndescriptions { get; set; }

    public virtual DbSet<PmProjectgridlayout> PmProjectgridlayouts { get; set; }

    public virtual DbSet<PpapPackage> PpapPackages { get; set; }

    public virtual DbSet<Pr> Prs { get; set; }

    public virtual DbSet<PrFile> PrFiles { get; set; }

    public virtual DbSet<Predecessor> Predecessors { get; set; }

    public virtual DbSet<Preference> Preferences { get; set; }

    public virtual DbSet<Preferencetabtype> Preferencetabtypes { get; set; }

    public virtual DbSet<Preferencetype> Preferencetypes { get; set; }

    public virtual DbSet<Presentationcommandbarsection> Presentationcommandbarsections { get; set; }

    public virtual DbSet<Presentationconfiguration> Presentationconfigurations { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductInnovation> ProductInnovations { get; set; }

    public virtual DbSet<Program> Programs { get; set; }

    public virtual DbSet<ProgramProject> ProgramProjects { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<ProjectDoc> ProjectDocs { get; set; }

    public virtual DbSet<ProjectPart> ProjectParts { get; set; }

    public virtual DbSet<ProjectTask> ProjectTasks { get; set; }

    public virtual DbSet<ProjectTeam> ProjectTeams { get; set; }

    public virtual DbSet<ProjectTemplate> ProjectTemplates { get; set; }

    public virtual DbSet<ProjectTemplateDoc> ProjectTemplateDocs { get; set; }

    public virtual DbSet<ProjectTemplateTree> ProjectTemplateTrees { get; set; }

    public virtual DbSet<ProjectTree> ProjectTrees { get; set; }

    public virtual DbSet<Property> Properties { get; set; }

    public virtual DbSet<Readpriority> Readpriorities { get; set; }

    public virtual DbSet<RelationshipGridEvent> RelationshipGridEvents { get; set; }

    public virtual DbSet<RelationshipView> RelationshipViews { get; set; }

    public virtual DbSet<Relationshiptype> Relationshiptypes { get; set; }

    public virtual DbSet<Replicationrule> Replicationrules { get; set; }

    public virtual DbSet<Replicationrulefiletype> Replicationrulefiletypes { get; set; }

    public virtual DbSet<Replicationruletargetvault> Replicationruletargetvaults { get; set; }

    public virtual DbSet<Replicationtxn> Replicationtxns { get; set; }

    public virtual DbSet<Replicationtxnlog> Replicationtxnlogs { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<Revision> Revisions { get; set; }

    public virtual DbSet<Runreportbyuser> Runreportbyusers { get; set; }

    public virtual DbSet<Savedsearch> Savedsearches { get; set; }

    public virtual DbSet<ScheduledTask> ScheduledTasks { get; set; }

    public virtual DbSet<Search> Searches { get; set; }

    public virtual DbSet<SearchCriterion> SearchCriteria { get; set; }

    public virtual DbSet<Searchmode> Searchmodes { get; set; }

    public virtual DbSet<Securemessage> Securemessages { get; set; }

    public virtual DbSet<Securemessageaudio> Securemessageaudios { get; set; }

    public virtual DbSet<Securemessageflaggedby> Securemessageflaggedbies { get; set; }

    public virtual DbSet<Securemessagemarkup> Securemessagemarkups { get; set; }

    public virtual DbSet<Securemessagevideo> Securemessagevideos { get; set; }

    public virtual DbSet<Securemessageviewtemplate> Securemessageviewtemplates { get; set; }

    public virtual DbSet<Securemessagevisibilityfilter> Securemessagevisibilityfilters { get; set; }

    public virtual DbSet<Selfservicereport> Selfservicereports { get; set; }

    public virtual DbSet<Selfservicereportfeatured> Selfservicereportfeatureds { get; set; }

    public virtual DbSet<Selfservicereporthelp> Selfservicereporthelps { get; set; }

    public virtual DbSet<Selfservicereportsetting> Selfservicereportsettings { get; set; }

    public virtual DbSet<Selfservicereportsharedwith> Selfservicereportsharedwiths { get; set; }

    public virtual DbSet<Sequence> Sequences { get; set; }

    public virtual DbSet<ServerEvent> ServerEvents { get; set; }

    public virtual DbSet<Serviceprovider> Serviceproviders { get; set; }

    public virtual DbSet<SimpleEco> SimpleEcos { get; set; }

    public virtual DbSet<SimpleEcoAffectedItem> SimpleEcoAffectedItems { get; set; }

    public virtual DbSet<SimpleEcoFile> SimpleEcoFiles { get; set; }

    public virtual DbSet<SimpleEcoSignoff> SimpleEcoSignoffs { get; set; }

    public virtual DbSet<SimpleMco> SimpleMcos { get; set; }

    public virtual DbSet<SimpleMcoFile> SimpleMcoFiles { get; set; }

    public virtual DbSet<SimpleMcoPart> SimpleMcoParts { get; set; }

    public virtual DbSet<SimpleMcoSignoff> SimpleMcoSignoffs { get; set; }

    public virtual DbSet<Spdocumentlibrarydefinition> Spdocumentlibrarydefinitions { get; set; }

    public virtual DbSet<Spfield> Spfields { get; set; }

    public virtual DbSet<Sql> Sqls { get; set; }

    public virtual DbSet<SqlDependency> SqlDependencies { get; set; }

    public virtual DbSet<SsvcNotificationMessage> SsvcNotificationMessages { get; set; }

    public virtual DbSet<SsvcPreference> SsvcPreferences { get; set; }

    public virtual DbSet<Ssvcemaildigestentry> Ssvcemaildigestentries { get; set; }

    public virtual DbSet<Ssvcitem> Ssvcitems { get; set; }

    public virtual DbSet<Ssvcpresentationconfiguration> Ssvcpresentationconfigurations { get; set; }

    public virtual DbSet<StateDistribution> StateDistributions { get; set; }

    public virtual DbSet<StateEmail> StateEmails { get; set; }

    public virtual DbSet<StateNotification> StateNotifications { get; set; }

    public virtual DbSet<Storedsecuremessage> Storedsecuremessages { get; set; }

    public virtual DbSet<SubWb> SubWbs { get; set; }

    public virtual DbSet<Systemevent> Systemevents { get; set; }

    public virtual DbSet<Systemeventhandler> Systemeventhandlers { get; set; }

    public virtual DbSet<Systemeventlog> Systemeventlogs { get; set; }

    public virtual DbSet<Systemeventlogdescriptor> Systemeventlogdescriptors { get; set; }

    public virtual DbSet<Systemfilecontainer> Systemfilecontainers { get; set; }

    public virtual DbSet<Team> Teams { get; set; }

    public virtual DbSet<TeamIdentity> TeamIdentities { get; set; }

    public virtual DbSet<TimeRecord> TimeRecords { get; set; }

    public virtual DbSet<TimeToManufacturing> TimeToManufacturings { get; set; }

    public virtual DbSet<TimeZone> TimeZones { get; set; }

    public virtual DbSet<TimeZoneHistory> TimeZoneHistories { get; set; }

    public virtual DbSet<TocAccess> TocAccesses { get; set; }

    public virtual DbSet<TocView> TocViews { get; set; }

    public virtual DbSet<TpImage> TpImages { get; set; }

    public virtual DbSet<TpItem> TpItems { get; set; }

    public virtual DbSet<TpStylesheet> TpStylesheets { get; set; }

    public virtual DbSet<TpXmlschema> TpXmlschemas { get; set; }

    public virtual DbSet<TpXmlschemaelement> TpXmlschemaelements { get; set; }

    public virtual DbSet<TpXmlschemaoutputsetting> TpXmlschemaoutputsettings { get; set; }

    public virtual DbSet<TransitionDistribution> TransitionDistributions { get; set; }

    public virtual DbSet<TransitionEmail> TransitionEmails { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Usermessage> Usermessages { get; set; }

    public virtual DbSet<Value> Values { get; set; }

    public virtual DbSet<Variable> Variables { get; set; }

    public virtual DbSet<Variable1> Variables1 { get; set; }

    public virtual DbSet<Vault> Vaults { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<VendorPart> VendorParts { get; set; }

    public virtual DbSet<View> Views { get; set; }

    public virtual DbSet<ViewWith> ViewWiths { get; set; }

    public virtual DbSet<Viewer> Viewers { get; set; }

    public virtual DbSet<WbsActivity2> WbsActivity2s { get; set; }

    public virtual DbSet<WbsDeliverable> WbsDeliverables { get; set; }

    public virtual DbSet<WbsElement> WbsElements { get; set; }

    public virtual DbSet<Workflow> Workflows { get; set; }

    public virtual DbSet<WorkflowMap> WorkflowMaps { get; set; }

    public virtual DbSet<WorkflowMapActivity> WorkflowMapActivities { get; set; }

    public virtual DbSet<WorkflowMapPath> WorkflowMapPaths { get; set; }

    public virtual DbSet<WorkflowMapPathPost> WorkflowMapPathPosts { get; set; }

    public virtual DbSet<WorkflowMapPathPre> WorkflowMapPathPres { get; set; }

    public virtual DbSet<WorkflowMapVariable> WorkflowMapVariables { get; set; }

    public virtual DbSet<WorkflowProcess> WorkflowProcesses { get; set; }

    public virtual DbSet<WorkflowProcessActivity> WorkflowProcessActivities { get; set; }

    public virtual DbSet<WorkflowProcessPath> WorkflowProcessPaths { get; set; }

    public virtual DbSet<WorkflowProcessPathPost> WorkflowProcessPathPosts { get; set; }

    public virtual DbSet<WorkflowProcessPathPre> WorkflowProcessPathPres { get; set; }

    public virtual DbSet<WorkflowProcessVariable> WorkflowProcessVariables { get; set; }

    public virtual DbSet<WorkflowTask> WorkflowTasks { get; set; }

    public virtual DbSet<Wsconfiguration> Wsconfigurations { get; set; }

    public virtual DbSet<Wstype> Wstypes { get; set; }

    public virtual DbSet<Wstypeaction> Wstypeactions { get; set; }

    public virtual DbSet<Wstypeassociate> Wstypeassociates { get; set; }

    public virtual DbSet<Wstypeproperty> Wstypeproperties { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=localhost;Database=InnovatorSolutions;TrustServerCertificate=True; User ID=innovator;Password=innovator");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasDefaultSchema("innovator");

        modelBuilder.Entity<Access>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACCESS__3214EC27AC347AFB");

            entity.ToTable("ACCESS");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => new { e.SourceId, e.RelatedId, e.Zone }, "IX_Access_source_id_related_id_zone");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CanChangeAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("CAN_CHANGE_ACCESS");
            entity.Property(e => e.CanDelete)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_DELETE");
            entity.Property(e => e.CanDiscover)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("CAN_DISCOVER");
            entity.Property(e => e.CanGet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_GET");
            entity.Property(e => e.CanUpdate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_UPDATE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("END_DATE");
            entity.Property(e => e.FromDate)
                .HasColumnType("datetime")
                .HasColumnName("FROM_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ShowPermissionsWarning)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHOW_PERMISSIONS_WARNING");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Zone)
                .HasMaxLength(32)
                .HasColumnName("ZONE");

            entity.HasOne(d => d.Related).WithMany(p => p.Accesses)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACCESS__RELATED___21F5FC7F");

            entity.HasOne(d => d.Source).WithMany(p => p.Accesses)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ACCESS__SOURCE_I__2101D846");
        });

        modelBuilder.Entity<Action>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTION__3214EC278103A913");

            entity.ToTable("ACTION");

            entity.HasIndex(e => e.Name, "C2").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Body).HasColumnName("BODY");
            entity.Property(e => e.CanExecute)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_EXECUTE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemQuery)
                .HasDefaultValueSql("(N'___is_new___')")
                .HasColumnName("ITEM_QUERY");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.Location)
                .HasMaxLength(64)
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnComplete)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_COMPLETE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(64)
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Activeuser>(entity =>
        {
            entity.HasKey(e => e.ArasSessionId);

            entity.ToTable("ACTIVEUSER", "application");

            entity.Property(e => e.ArasSessionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS_SESSION_ID");
            entity.Property(e => e.LastActivityTime)
                .HasColumnType("datetime")
                .HasColumnName("LAST_ACTIVITY_TIME");
            entity.Property(e => e.LoginName)
                .HasMaxLength(32)
                .HasColumnName("LOGIN_NAME");
            entity.Property(e => e.LoginTime)
                .HasColumnType("datetime")
                .HasColumnName("LOGIN_TIME");
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC270BC59506");

            entity.ToTable("ACTIVITY");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActiveDate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVE_DATE");
            entity.Property(e => e.CanDelegate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_DELEGATE");
            entity.Property(e => e.CanRefuse)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CAN_REFUSE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClonedAs)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLONED_AS");
            entity.Property(e => e.ClosedDate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSED_DATE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ConsolidateOndelegate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONSOLIDATE_ONDELEGATE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EscalateTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESCALATE_TO");
            entity.Property(e => e.ExpectedDuration).HasColumnName("EXPECTED_DURATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("ICON");
            entity.Property(e => e.IsAuto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_AUTO");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsEnd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_END");
            entity.Property(e => e.IsEscalated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_ESCALATED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStart)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_START");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Message)
                .HasMaxLength(1024)
                .HasColumnName("MESSAGE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.ReminderCount).HasColumnName("REMINDER_COUNT");
            entity.Property(e => e.ReminderInterval).HasColumnName("REMINDER_INTERVAL");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Subflow)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBFLOW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TimeoutDuration).HasColumnName("TIMEOUT_DURATION");
            entity.Property(e => e.WaitForAllInputs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WAIT_FOR_ALL_INPUTS");
            entity.Property(e => e.WaitForAllVotes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WAIT_FOR_ALL_VOTES");
        });

        modelBuilder.Entity<Activity2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2772FDE6DC");

            entity.ToTable("ACTIVITY2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActualWork)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ACTUAL_WORK");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Cpi)
                .HasColumnType("decimal(6, 4)")
                .HasColumnName("CPI");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DateActivated)
                .HasColumnType("datetime")
                .HasColumnName("DATE_ACTIVATED");
            entity.Property(e => e.DateDueAct)
                .HasColumnType("datetime")
                .HasColumnName("DATE_DUE_ACT");
            entity.Property(e => e.DateDueOriginal)
                .HasColumnType("datetime")
                .HasColumnName("DATE_DUE_ORIGINAL");
            entity.Property(e => e.DateDueSched)
                .HasColumnType("datetime")
                .HasColumnName("DATE_DUE_SCHED");
            entity.Property(e => e.DateDueTarget)
                .HasColumnType("datetime")
                .HasColumnName("DATE_DUE_TARGET");
            entity.Property(e => e.DateEf)
                .HasColumnType("datetime")
                .HasColumnName("DATE_EF");
            entity.Property(e => e.DateEs)
                .HasColumnType("datetime")
                .HasColumnName("DATE_ES");
            entity.Property(e => e.DateLf)
                .HasColumnType("datetime")
                .HasColumnName("DATE_LF");
            entity.Property(e => e.DateLs)
                .HasColumnType("datetime")
                .HasColumnName("DATE_LS");
            entity.Property(e => e.DateResume)
                .HasColumnType("datetime")
                .HasColumnName("DATE_RESUME");
            entity.Property(e => e.DateStartAct)
                .HasColumnType("datetime")
                .HasColumnName("DATE_START_ACT");
            entity.Property(e => e.DateStartSched)
                .HasColumnType("datetime")
                .HasColumnName("DATE_START_SCHED");
            entity.Property(e => e.DateStartTarget)
                .HasColumnType("datetime")
                .HasColumnName("DATE_START_TARGET");
            entity.Property(e => e.DateUserEstimate)
                .HasColumnType("datetime")
                .HasColumnName("DATE_USER_ESTIMATE");
            entity.Property(e => e.DaysRemaining).HasColumnName("DAYS_REMAINING");
            entity.Property(e => e.DelivRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("DELIV_REQUIRED");
            entity.Property(e => e.DelivType)
                .HasMaxLength(64)
                .HasColumnName("DELIV_TYPE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EarnedValue).HasColumnName("EARNED_VALUE");
            entity.Property(e => e.ExpectedDuration).HasColumnName("EXPECTED_DURATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCritical)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_CRITICAL");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsMilestone)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_MILESTONE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LeadRole)
                .HasMaxLength(64)
                .HasColumnName("LEAD_ROLE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Message)
                .HasMaxLength(64)
                .HasColumnName("MESSAGE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OrigDuration).HasColumnName("ORIG_DURATION");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PercentCompl)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PERCENT_COMPL");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PlannedValue).HasColumnName("PLANNED_VALUE");
            entity.Property(e => e.PrevItem)
                .HasMaxLength(32)
                .HasColumnName("PREV_ITEM");
            entity.Property(e => e.ProjIndex)
                .HasMaxLength(30)
                .HasColumnName("PROJ_INDEX");
            entity.Property(e => e.ProjNum).HasColumnName("PROJ_NUM");
            entity.Property(e => e.RollupActualWork)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ROLLUP_ACTUAL_WORK");
            entity.Property(e => e.RollupDateStartAct)
                .HasColumnType("datetime")
                .HasColumnName("ROLLUP_DATE_START_ACT");
            entity.Property(e => e.RollupPercentCompl).HasColumnName("ROLLUP_PERCENT_COMPL");
            entity.Property(e => e.RollupWorkEst).HasColumnName("ROLLUP_WORK_EST");
            entity.Property(e => e.RollupWorkEstCurr).HasColumnName("ROLLUP_WORK_EST_CURR");
            entity.Property(e => e.SignoffRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SIGNOFF_REQUIRED");
            entity.Property(e => e.Spi)
                .HasColumnType("decimal(6, 4)")
                .HasColumnName("SPI");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WorkEst).HasColumnName("WORK_EST");
            entity.Property(e => e.WorkEstCurr).HasColumnName("WORK_EST_CURR");
        });

        modelBuilder.Entity<Activity2Assignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27C1A2E609");

            entity.ToTable("ACTIVITY2_ASSIGNMENT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClosedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLOSED_BY");
            entity.Property(e => e.ClosedOn)
                .HasColumnType("datetime")
                .HasColumnName("CLOSED_ON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DateStartAct)
                .HasColumnType("datetime")
                .HasColumnName("DATE_START_ACT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsComplete)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_COMPLETE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PercentCompl).HasColumnName("PERCENT_COMPL");
            entity.Property(e => e.PercentLoad).HasColumnName("PERCENT_LOAD");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(64)
                .HasColumnName("ROLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WorkEst).HasColumnName("WORK_EST");
            entity.Property(e => e.WorkEstCurrent).HasColumnName("WORK_EST_CURRENT");
            entity.Property(e => e.WorkEtc).HasColumnName("WORK_ETC");

            entity.HasOne(d => d.Related).WithMany(p => p.Activity2Assignments)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY2__RELAT__386F4D83");

            entity.HasOne(d => d.Source).WithMany(p => p.Activity2Assignments)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY2__SOURC__377B294A");
        });

        modelBuilder.Entity<Activity2Comment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC274858D220");

            entity.ToTable("ACTIVITY2_COMMENTS");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileAttached)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_ATTACHED");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Activity2Comments)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY2__SOURC__396371BC");
        });

        modelBuilder.Entity<Activity2Deliverable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2717B210B5");

            entity.ToTable("ACTIVITY2_DELIVERABLE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Activity2Deliverables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY2__SOURC__3A5795F5");
        });

        modelBuilder.Entity<Activity2Task>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27B0C786BE");

            entity.ToTable("ACTIVITY2_TASK");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("DUE_DATE");
            entity.Property(e => e.FakeVerified)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FAKE_VERIFIED");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PercentCompl).HasColumnName("PERCENT_COMPL");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Activity2Tasks)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY2__SOURC__3B4BBA2E");
        });

        modelBuilder.Entity<ActivityAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC278D4812D6");

            entity.ToTable("ACTIVITY_ASSIGNMENT");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ClaimedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLAIMED_BY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClosedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CLOSED_BY");
            entity.Property(e => e.ClosedOn)
                .HasColumnType("datetime")
                .HasColumnName("CLOSED_ON");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EscalateTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESCALATE_TO");
            entity.Property(e => e.ForAllMembers)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FOR_ALL_MEMBERS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDisabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_DISABLED");
            entity.Property(e => e.IsOverdue)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_OVERDUE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Path)
                .HasMaxLength(32)
                .HasColumnName("PATH");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.RemindersSent)
                .HasDefaultValueSql("((0))")
                .HasColumnName("REMINDERS_SENT");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VotingWeight)
                .HasDefaultValueSql("((100))")
                .HasColumnName("VOTING_WEIGHT");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityAssignments)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__4356F04A");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityAssignments)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__4262CC11");
        });

        modelBuilder.Entity<ActivityEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2789EB2BE7");

            entity.ToTable("ACTIVITY_EMAIL");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AlternateIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALTERNATE_IDENTITY");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(64)
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityEmails)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__3508D0F3");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityEmails)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__3414ACBA");
        });

        modelBuilder.Entity<ActivityMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27A968E250");

            entity.ToTable("ACTIVITY_METHOD");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityMethods)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__453F38BC");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityMethods)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__444B1483");
        });

        modelBuilder.Entity<ActivityTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2719398B43");

            entity.ToTable("ACTIVITY_TASK");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTasks)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__46335CF5");
        });

        modelBuilder.Entity<ActivityTaskValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27C864BB3F");

            entity.ToTable("ACTIVITY_TASK_VALUE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.CompletedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMPLETED_BY");
            entity.Property(e => e.CompletedOn)
                .HasColumnType("datetime")
                .HasColumnName("COMPLETED_ON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Task)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TASK");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTaskValues)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__33208881");
        });

        modelBuilder.Entity<ActivityTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27F20B0F0D");

            entity.ToTable("ACTIVITY_TEMPLATE");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.CanDelegate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("CAN_DELEGATE");
            entity.Property(e => e.CanRefuse)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("CAN_REFUSE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ConsolidateOndelegate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONSOLIDATE_ONDELEGATE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EscalateTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESCALATE_TO");
            entity.Property(e => e.ExpectedDuration).HasColumnName("EXPECTED_DURATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("ICON");
            entity.Property(e => e.IsAuto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_AUTO");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsEnd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_END");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStart)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_START");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Message)
                .HasMaxLength(1024)
                .HasDefaultValueSql("(N'Please Review...')")
                .HasColumnName("MESSAGE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasDefaultValueSql("(N'Activity')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.ReminderCount).HasColumnName("REMINDER_COUNT");
            entity.Property(e => e.ReminderInterval).HasColumnName("REMINDER_INTERVAL");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Subflow)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUBFLOW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TimeoutDuration).HasColumnName("TIMEOUT_DURATION");
            entity.Property(e => e.WaitForAllInputs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WAIT_FOR_ALL_INPUTS");
            entity.Property(e => e.WaitForAllVotes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WAIT_FOR_ALL_VOTES");
            entity.Property(e => e.X).HasDefaultValueSql("((10))");
            entity.Property(e => e.Y).HasDefaultValueSql("((10))");
        });

        modelBuilder.Entity<ActivityTemplateAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2706D5FA5A");

            entity.ToTable("ACTIVITY_TEMPLATE_ASSIGNMENT");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EscalateTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESCALATE_TO");
            entity.Property(e => e.ForAllMembers)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FOR_ALL_MEMBERS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VotingWeight)
                .HasDefaultValueSql("((100))")
                .HasColumnName("VOTING_WEIGHT");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTemplateAssignments)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__29971E47");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateAssignments)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__28A2FA0E");
        });

        modelBuilder.Entity<ActivityTemplateEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC279F9860A4");

            entity.ToTable("ACTIVITY_TEMPLATE_EMAIL");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AlternateIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALTERNATE_IDENTITY");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(64)
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTemplateEmails)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__2B7F66B9");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateEmails)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__2A8B4280");
        });

        modelBuilder.Entity<ActivityTemplateMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC277927D6C6");

            entity.ToTable("ACTIVITY_TEMPLATE_METHOD");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTemplateMethods)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__481BA567");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateMethods)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__4727812E");
        });

        modelBuilder.Entity<ActivityTemplateTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC27BCA626F5");

            entity.ToTable("ACTIVITY_TEMPLATE_TASK");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateTasks)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__490FC9A0");
        });

        modelBuilder.Entity<ActivityTemplateTransition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC273C52B1BD");

            entity.ToTable("ACTIVITY_TEMPLATE_TRANSITION");

            entity.HasIndex(e => new { e.ControlledItemtype, e.RelatedId, e.SourceId }, "C27").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ControlledItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLLED_ITEMTYPE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'on_activate')")
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTemplateTransitions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__4AF81212");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTemplateTransitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__4A03EDD9");
        });

        modelBuilder.Entity<ActivityTemplateVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC278AA3B7B3");

            entity.ToTable("ACTIVITY_TEMPLATE_VARIABLE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasColumnName("DATATYPE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(80)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsHidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_HIDDEN");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.Source)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.ActivityTemplateVariables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__4BEC364B");
        });

        modelBuilder.Entity<ActivityTransition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC273214A1D0");

            entity.ToTable("ACTIVITY_TRANSITION");

            entity.HasIndex(e => new { e.ControlledItemtype, e.RelatedId, e.SourceId }, "C28").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ControlledItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTROLLED_ITEMTYPE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Event)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'on_activate')")
                .HasColumnName("EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ActivityTransitions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ACTIVITY___RELAT__4DD47EBD");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityTransitions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__4CE05A84");
        });

        modelBuilder.Entity<ActivityVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC2784067C38");

            entity.ToTable("ACTIVITY_VARIABLE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasColumnName("DATATYPE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(80)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsHidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_HIDDEN");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.Source)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.ActivityVariables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__4EC8A2F6");
        });

        modelBuilder.Entity<ActivityVariableValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ACTIVITY__3214EC278E6ED11E");

            entity.ToTable("ACTIVITY_VARIABLE_VALUE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value)
                .HasMaxLength(80)
                .HasColumnName("VALUE");
            entity.Property(e => e.Variable)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VARIABLE");

            entity.HasOne(d => d.Source).WithMany(p => p.ActivityVariableValues)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ACTIVITY___SOURC__322C6448");
        });

        modelBuilder.Entity<AffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC275992B10E");

            entity.ToTable("AFFECTED_ITEM");

            entity.HasIndex(e => e.AffectedId, "I0");

            entity.HasIndex(e => e.NewItemId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action)
                .HasMaxLength(64)
                .HasColumnName("ACTION");
            entity.Property(e => e.AffectedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AFFECTED_ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InBuildDisposition)
                .HasMaxLength(64)
                .HasColumnName("IN_BUILD_DISPOSITION");
            entity.Property(e => e.InServiceDisposition)
                .HasMaxLength(64)
                .HasColumnName("IN_SERVICE_DISPOSITION");
            entity.Property(e => e.Interchangeable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INTERCHANGEABLE");
            entity.Property(e => e.IsCondition).HasColumnName("IS_CONDITION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemAction)
                .HasMaxLength(64)
                .HasColumnName("ITEM_ACTION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_ITEM_ID");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Relationshiptype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIONSHIPTYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WasCondition).HasColumnName("WAS_CONDITION");
        });

        modelBuilder.Entity<AffectedItemProperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC275E859842");

            entity.ToTable("AFFECTED_ITEM_PROPERTY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewValue).HasColumnName("NEW_VALUE");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(512)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.AffectedItemProperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__AFFECTED___SOURC__71DCD509");
        });

        modelBuilder.Entity<AffectedItemRelationship>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC2750BDBEEF");

            entity.ToTable("AFFECTED_ITEM_RELATIONSHIP");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.AffectedItemRelationships)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__AFFECTED___RELAT__73C51D7B");

            entity.HasOne(d => d.Source).WithMany(p => p.AffectedItemRelationships)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__AFFECTED___SOURC__72D0F942");
        });

        modelBuilder.Entity<AffectedRelationship>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC270D6C21CD");

            entity.ToTable("AFFECTED_RELATIONSHIP");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AffectedRelId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AFFECTED_REL_ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewRelId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_REL_ID");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelAction)
                .HasMaxLength(64)
                .HasColumnName("REL_ACTION");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<AffectedRelationshipProperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AFFECTED__3214EC274F9129C7");

            entity.ToTable("AFFECTED_RELATIONSHIP_PROPERTY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewValue).HasColumnName("NEW_VALUE");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(512)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.AffectedRelationshipProperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__AFFECTED___SOURC__74B941B4");
        });

        modelBuilder.Entity<Alias>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ALIAS__3214EC2798B25093");

            entity.ToTable("ALIAS");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => new { e.SourceId, e.RelatedId, e.FromDate, e.EndDate }, "IX_alias_source_id_related_id_from_date_end_date");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("END_DATE");
            entity.Property(e => e.FromDate)
                .HasColumnType("datetime")
                .HasColumnName("FROM_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Aliases)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ALIAS__RELATED_I__50B0EB68");

            entity.HasOne(d => d.Source).WithMany(p => p.Aliases)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ALIAS__SOURCE_ID__4FBCC72F");
        });

        modelBuilder.Entity<AllowedPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ALLOWED___3214EC2704EC980D");

            entity.ToTable("ALLOWED_PERMISSION");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.AllowedPermissions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ALLOWED_P__RELAT__39CD8610");

            entity.HasOne(d => d.Source).WithMany(p => p.AllowedPermissions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ALLOWED_P__SOURC__38D961D7");
        });

        modelBuilder.Entity<AllowedWorkflow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ALLOWED___3214EC2739E3F44E");

            entity.ToTable("ALLOWED_WORKFLOW");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.AllowedWorkflows)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ALLOWED_W__RELAT__3D9E16F4");

            entity.HasOne(d => d.Source).WithMany(p => p.AllowedWorkflows)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ALLOWED_W__SOURC__3CA9F2BB");
        });

        modelBuilder.Entity<AppliedUpdate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__APPLIED___3214EC27A9816109");

            entity.ToTable("APPLIED_UPDATES");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DateApplied)
                .HasColumnType("datetime")
                .HasColumnName("DATE_APPLIED");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UpNumber)
                .HasMaxLength(32)
                .HasColumnName("UP_NUMBER");
            entity.Property(e => e.UpdateGeneration).HasColumnName("UPDATE_GENERATION");
        });

        modelBuilder.Entity<BaseNotificationMessage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BASE_NOTIFICATION_MESSAGE");

            entity.Property(e => e.Acknowledge)
                .HasMaxLength(64)
                .HasColumnName("ACKNOWLEDGE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Board>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BOARD__3214EC275EF46FE6");

            entity.ToTable("BOARD");

            entity.HasIndex(e => e.ItemConfigId, "C52").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(256)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Body>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BODY__3214EC27F3E6C5B0");

            entity.ToTable("BODY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.BgAttach)
                .HasMaxLength(64)
                .HasColumnName("BG_ATTACH");
            entity.Property(e => e.BgColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BG_COLOR");
            entity.Property(e => e.BgImage)
                .HasMaxLength(128)
                .HasColumnName("BG_IMAGE");
            entity.Property(e => e.BgRepeat)
                .HasMaxLength(64)
                .HasColumnName("BG_REPEAT");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Bodies)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BODY__SOURCE_ID__17786E0C");
        });

        modelBuilder.Entity<BomInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BOM_INST__3214EC279A74872E");

            entity.ToTable("BOM_INSTANCE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Angle).HasColumnName("ANGLE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReferenceDesignator)
                .HasMaxLength(16)
                .HasColumnName("REFERENCE_DESIGNATOR");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Side)
                .HasMaxLength(64)
                .HasColumnName("SIDE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.BomInstances)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__BOM_INSTA__SOURC__33AA9866");
        });

        modelBuilder.Entity<BomSubstitute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BOM_SUBS__3214EC27D5788A91");

            entity.ToTable("BOM_SUBSTITUTE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.BomSubstitutes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__BOM_SUBST__RELAT__3592E0D8");

            entity.HasOne(d => d.Source).WithMany(p => p.BomSubstitutes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__BOM_SUBST__SOURC__349EBC9F");
        });

        modelBuilder.Entity<BusinessCalendar>(entity =>
        {
            entity.HasKey(e => e.DayDate).HasName("PK__BUSINESS__B9F10D518393FE31");

            entity.ToTable("BUSINESS_CALENDAR");

            entity.HasIndex(e => e.DayNumber, "I0");

            entity.HasIndex(e => e.Id, "I1").IsUnique();

            entity.Property(e => e.DayDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("DAY_DATE");
            entity.Property(e => e.DayNumber).HasColumnName("DAY_NUMBER");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
        });

        modelBuilder.Entity<BusinessCalendarException>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BUSINESS__3214EC27E3D66BC4");

            entity.ToTable("BUSINESS_CALENDAR_EXCEPTION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DayDate)
                .HasColumnType("datetime")
                .HasColumnName("DAY_DATE");
            entity.Property(e => e.DayOff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("DAY_OFF");
            entity.Property(e => e.Description)
                .HasMaxLength(128)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.BusinessCalendarExceptions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__BUSINESS___SOURC__3C3FDE67");
        });

        modelBuilder.Entity<BusinessCalendarYear>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BUSINESS__3214EC270A2B43B0");

            entity.ToTable("BUSINESS_CALENDAR_YEAR");

            entity.HasIndex(e => e.Year, "C88").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WeekendDaysOff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("WEEKEND_DAYS_OFF");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<Cad>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD__3214EC27005C28B2");

            entity.ToTable("CAD");

            entity.HasIndex(e => new { e.ItemNumber, e.Classification, e.ArasUniquenessHelper }, "C86").IsUnique();

            entity.HasIndex(e => e.ExternalId, "I0");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_CAD_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.AuthoringTool)
                .HasMaxLength(64)
                .HasColumnName("AUTHORING_TOOL");
            entity.Property(e => e.AuthoringToolVersion)
                .HasMaxLength(32)
                .HasColumnName("AUTHORING_TOOL_VERSION");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.FromTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_TEMPLATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasChangePending)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_CHANGE_PENDING");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStandard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_STANDARD");
            entity.Property(e => e.IsTemplate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_TEMPLATE");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MonolithicModelFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MONOLITHIC_MODEL_FILE");
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasColumnName("NAME");
            entity.Property(e => e.NativeFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NATIVE_FILE");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.ShatteredModelFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHATTERED_MODEL_FILE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(128)
                .HasColumnName("THUMBNAIL");
            entity.Property(e => e.ViewFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VIEW_FILE");
            entity.Property(e => e.ViewableFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VIEWABLE_FILE");
            entity.Property(e => e.XMax).HasColumnName("X_MAX");
            entity.Property(e => e.XMin).HasColumnName("X_MIN");
            entity.Property(e => e.YMax).HasColumnName("Y_MAX");
            entity.Property(e => e.YMin).HasColumnName("Y_MIN");
            entity.Property(e => e.ZMax).HasColumnName("Z_MAX");
            entity.Property(e => e.ZMin).HasColumnName("Z_MIN");
        });

        modelBuilder.Entity<CadChange>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_CHAN__3214EC279BD9EF8E");

            entity.ToTable("CAD_CHANGES");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CadChanges)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_CHANG__SOURC__75AD65ED");
        });

        modelBuilder.Entity<CadInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_INST__3214EC27BDED3FB6");

            entity.ToTable("CAD_INSTANCE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransformationMatrix)
                .HasMaxLength(512)
                .HasColumnName("TRANSFORMATION_MATRIX");

            entity.HasOne(d => d.Source).WithMany(p => p.CadInstances)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_INSTA__SOURC__36870511");
        });

        modelBuilder.Entity<CadParent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_PARE__3214EC271B8A8EE2");

            entity.ToTable("CAD_PARENT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CadParents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_PAREN__SOURC__76A18A26");
        });

        modelBuilder.Entity<CadPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_PART__3214EC27AFCA48A3");

            entity.ToTable("CAD_PART");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CadParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_PART__SOURCE__7795AE5F");
        });

        modelBuilder.Entity<CadStructure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAD_STRU__3214EC27EFA6F17F");

            entity.ToTable("CAD_STRUCTURE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CadStructureRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CAD_STRUC__RELAT__797DF6D1");

            entity.HasOne(d => d.Source).WithMany(p => p.CadStructureSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAD_STRUC__SOURC__7889D298");
        });

        modelBuilder.Entity<Cadfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CADFILES__3214EC27DBC0BE74");

            entity.ToTable("CADFILES");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AttachedFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATTACHED_FILE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Cadfiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CADFILES__SOURCE__7A721B0A");
        });

        modelBuilder.Entity<CanAdd>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CAN_ADD__3214EC27D093BDEF");

            entity.ToTable("CAN_ADD");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CanAdd1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("CAN_ADD");
            entity.Property(e => e.ClassPath)
                .HasMaxLength(512)
                .HasColumnName("CLASS_PATH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CanAdds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CAN_ADD__RELATED__529933DA");

            entity.HasOne(d => d.Source).WithMany(p => p.CanAdds)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CAN_ADD__SOURCE___51A50FA1");
        });

        modelBuilder.Entity<ChangeControlledItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CHANGE_CONTROLLED_ITEM");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ChangeControlledRelationship>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CHANGE_CONTROLLED_RELATIONSHIP");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Chart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CHART__3214EC279878C420");

            entity.ToTable("CHART");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BackgroundStyle).HasColumnName("BACKGROUND_STYLE");
            entity.Property(e => e.BarSpacing).HasColumnName("BAR_SPACING");
            entity.Property(e => e.BorderBottom).HasColumnName("BORDER_BOTTOM");
            entity.Property(e => e.BorderLeft).HasColumnName("BORDER_LEFT");
            entity.Property(e => e.BorderRight).HasColumnName("BORDER_RIGHT");
            entity.Property(e => e.BorderTop).HasColumnName("BORDER_TOP");
            entity.Property(e => e.ChartType)
                .HasMaxLength(64)
                .HasColumnName("CHART_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Legend)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LEGEND");
            entity.Property(e => e.LegendBoxStyle).HasColumnName("LEGEND_BOX_STYLE");
            entity.Property(e => e.LegendHeight).HasColumnName("LEGEND_HEIGHT");
            entity.Property(e => e.LegendTextStyle).HasColumnName("LEGEND_TEXT_STYLE");
            entity.Property(e => e.LegendWidth).HasColumnName("LEGEND_WIDTH");
            entity.Property(e => e.LegendX).HasColumnName("LEGEND_X");
            entity.Property(e => e.LegendY).HasColumnName("LEGEND_Y");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MarkerSize).HasColumnName("MARKER_SIZE");
            entity.Property(e => e.MarkerStyle).HasColumnName("MARKER_STYLE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Radius).HasColumnName("RADIUS");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(128)
                .HasColumnName("TITLE");
            entity.Property(e => e.TitleStyle).HasColumnName("TITLE_STYLE");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.XAxis)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("X_AXIS");
            entity.Property(e => e.XAxisLabel)
                .HasMaxLength(128)
                .HasColumnName("X_AXIS_LABEL");
            entity.Property(e => e.XAxisLabelStyle).HasColumnName("X_AXIS_LABEL_STYLE");
            entity.Property(e => e.XAxisStyle).HasColumnName("X_AXIS_STYLE");
            entity.Property(e => e.XAxisValueLabelStyle).HasColumnName("X_AXIS_VALUE_LABEL_STYLE");
            entity.Property(e => e.XAxisValueLabels)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("X_AXIS_VALUE_LABELS");
            entity.Property(e => e.XGrid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("X_GRID");
            entity.Property(e => e.XGridInterval).HasColumnName("X_GRID_INTERVAL");
            entity.Property(e => e.XGridStyle).HasColumnName("X_GRID_STYLE");
            entity.Property(e => e.XMax).HasColumnName("X_MAX");
            entity.Property(e => e.XMin).HasColumnName("X_MIN");
            entity.Property(e => e.YAxis)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Y_AXIS");
            entity.Property(e => e.YAxisLabel)
                .HasMaxLength(128)
                .HasColumnName("Y_AXIS_LABEL");
            entity.Property(e => e.YAxisLabelStyle).HasColumnName("Y_AXIS_LABEL_STYLE");
            entity.Property(e => e.YAxisStyle).HasColumnName("Y_AXIS_STYLE");
            entity.Property(e => e.YAxisValueLabelStyle).HasColumnName("Y_AXIS_VALUE_LABEL_STYLE");
            entity.Property(e => e.YAxisValueLabels)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Y_AXIS_VALUE_LABELS");
            entity.Property(e => e.YGrid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Y_GRID");
            entity.Property(e => e.YGridInterval).HasColumnName("Y_GRID_INTERVAL");
            entity.Property(e => e.YGridStyle).HasColumnName("Y_GRID_STYLE");
            entity.Property(e => e.YMax).HasColumnName("Y_MAX");
            entity.Property(e => e.YMin).HasColumnName("Y_MIN");
        });

        modelBuilder.Entity<ChartSeries>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CHART_SE__3214EC27B9BA8722");

            entity.ToTable("CHART_SERIES");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Markers)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARKERS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ChartSeries)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CHART_SER__RELAT__10966653");

            entity.HasOne(d => d.Source).WithMany(p => p.ChartSeries)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CHART_SER__SOURC__0FA2421A");
        });

        modelBuilder.Entity<ClientEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CLIENT_E__3214EC27BD6020FB");

            entity.ToTable("CLIENT_EVENT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClientEvent1)
                .HasMaxLength(64)
                .HasColumnName("CLIENT_EVENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ClientEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CLIENT_EV__RELAT__54817C4C");

            entity.HasOne(d => d.Source).WithMany(p => p.ClientEvents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CLIENT_EV__SOURC__538D5813");
        });

        modelBuilder.Entity<CmfAdditionalpropertytype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_ADDI__3214EC27E3CD3326");

            entity.ToTable("CMF_ADDITIONALPROPERTYTYPE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalProperty)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ADDITIONAL_PROPERTY");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfAdditionalpropertytypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_ADDIT__SOURC__5ECA0095");
        });

        modelBuilder.Entity<CmfBaseview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_BASEVIEW");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfComputedproperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_COMP__3214EC271959547B");

            entity.ToTable("CMF_COMPUTEDPROPERTY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClientComputeMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLIENT_COMPUTE_METHOD");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfComputedproperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_COMPU__SOURC__638EB5B2");
        });

        modelBuilder.Entity<CmfComputedpropertydependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_COMP__3214EC27C809A45A");

            entity.ToTable("CMF_COMPUTEDPROPERTYDEPENDENCY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CmfComputedpropertydependencies)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CMF_COMPU__RELAT__68536ACF");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfComputedpropertydependencies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_COMPU__SOURC__675F4696");
        });

        modelBuilder.Entity<CmfContentelementitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_CONTENTELEMENTITEMS");

            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALLOW_PRIVATE_PERMISSION");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.CacheQuery).HasColumnName("CACHE_QUERY");
            entity.Property(e => e.ClassStructure).HasColumnName("CLASS_STRUCTURE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("CLOSE_ICON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENFORCE_DISCOVERY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_WHERE_USED");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ImplementationDdl).HasColumnName("IMPLEMENTATION_DDL");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasColumnName("IMPLEMENTATION_TYPE");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("INSTANCE_DATA");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEPENDENT");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELATIONSHIP");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VERSIONABLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("LABEL_PLURAL");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("LARGE_ICON");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("MANUAL_VERSIONING");
            entity.Property(e => e.Maxrecords).HasColumnName("MAXRECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("OPEN_ICON");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVISIONS");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasColumnName("SHOW_PARAMETERS_TAB");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasColumnName("STRUCTURE_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNLOCK_ON_LOGOUT");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_SRC_ACCESS");
        });

        modelBuilder.Entity<CmfContentitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_CONTENTITEMS");

            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALLOW_PRIVATE_PERMISSION");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.CacheQuery).HasColumnName("CACHE_QUERY");
            entity.Property(e => e.ClassStructure).HasColumnName("CLASS_STRUCTURE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("CLOSE_ICON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENFORCE_DISCOVERY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_WHERE_USED");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ImplementationDdl).HasColumnName("IMPLEMENTATION_DDL");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasColumnName("IMPLEMENTATION_TYPE");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("INSTANCE_DATA");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEPENDENT");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELATIONSHIP");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VERSIONABLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("LABEL_PLURAL");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("LARGE_ICON");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("MANUAL_VERSIONING");
            entity.Property(e => e.Maxrecords).HasColumnName("MAXRECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("OPEN_ICON");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVISIONS");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasColumnName("SHOW_PARAMETERS_TAB");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasColumnName("STRUCTURE_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNLOCK_ON_LOGOUT");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_SRC_ACCESS");
        });

        modelBuilder.Entity<CmfContentpropertyitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_CONTENTPROPERTYITEMS");

            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALLOW_PRIVATE_PERMISSION");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.CacheQuery).HasColumnName("CACHE_QUERY");
            entity.Property(e => e.ClassStructure).HasColumnName("CLASS_STRUCTURE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("CLOSE_ICON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENFORCE_DISCOVERY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_WHERE_USED");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ImplementationDdl).HasColumnName("IMPLEMENTATION_DDL");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasColumnName("IMPLEMENTATION_TYPE");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("INSTANCE_DATA");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEPENDENT");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELATIONSHIP");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VERSIONABLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("LABEL_PLURAL");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("LARGE_ICON");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("MANUAL_VERSIONING");
            entity.Property(e => e.Maxrecords).HasColumnName("MAXRECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("OPEN_ICON");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVISIONS");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasColumnName("SHOW_PARAMETERS_TAB");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasColumnName("STRUCTURE_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNLOCK_ON_LOGOUT");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_SRC_ACCESS");
        });

        modelBuilder.Entity<CmfContenttype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC2722ADA3B5");

            entity.ToTable("CMF_CONTENTTYPE");

            entity.HasIndex(e => e.LinkedItemType, "C67").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LinkedItemType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LINKED_ITEM_TYPE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfContenttypeexportrel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC274A2D7F8A");

            entity.ToTable("CMF_CONTENTTYPEEXPORTREL");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfContenttypeexportrels)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_CONTE__SOURC__544C7222");
        });

        modelBuilder.Entity<CmfContenttypeexportsetting>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CMF_CONTENTTYPEEXPORTSETTING");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfContenttypeexporttoexcel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC2746C8082B");

            entity.ToTable("CMF_CONTENTTYPEEXPORTTOEXCEL");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TemplateFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEMPLATE_FILE");
        });

        modelBuilder.Entity<CmfContenttypegridlayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC27C73F84A8");

            entity.ToTable("CMF_CONTENTTYPEGRIDLAYOUT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CollapsedColumnGroups).HasColumnName("COLLAPSED_COLUMN_GROUPS");
            entity.Property(e => e.ColumnNames).HasColumnName("COLUMN_NAMES");
            entity.Property(e => e.ColumnWidth).HasColumnName("COLUMN_WIDTH");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TabularViewId)
                .HasMaxLength(32)
                .HasColumnName("TABULAR_VIEW_ID");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfContenttypegridlayouts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_CONTE__SOURC__5540965B");
        });

        modelBuilder.Entity<CmfContenttypeview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_CONT__3214EC2752769FDD");

            entity.ToTable("CMF_CONTENTTYPEVIEW");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfContenttypeviews)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_CONTE__SOURC__5634BA94");
        });

        modelBuilder.Entity<CmfDocumentlifecyclestate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_DOCU__3214EC274104C18D");

            entity.ToTable("CMF_DOCUMENTLIFECYCLESTATE");

            entity.HasIndex(e => new { e.LifeCycleStateId, e.SourceId }, "C71").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LifeCycleStateId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIFE_CYCLE_STATE_ID");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ResolutionMode)
                .HasMaxLength(64)
                .HasColumnName("RESOLUTION_MODE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TrackingMode)
                .HasMaxLength(64)
                .HasColumnName("TRACKING_MODE");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfDocumentlifecyclestates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_DOCUM__SOURC__5728DECD");
        });

        modelBuilder.Entity<CmfElementallowedpermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_ELEM__3214EC271BFFCCDD");

            entity.ToTable("CMF_ELEMENTALLOWEDPERMISSION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CmfElementallowedpermissions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CMF_ELEME__RELAT__60B24907");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfElementallowedpermissions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_ELEME__SOURC__5FBE24CE");
        });

        modelBuilder.Entity<CmfElementbinding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_ELEM__3214EC2776D15209");

            entity.ToTable("CMF_ELEMENTBINDING");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemDeleteBehavior)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'NonCheckConstraint')")
                .HasColumnName("ITEM_DELETE_BEHAVIOR");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewRowMode)
                .HasMaxLength(64)
                .HasColumnName("NEW_ROW_MODE");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnAfterPick)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_AFTER_PICK");
            entity.Property(e => e.OnApplyBinding)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_APPLY_BINDING");
            entity.Property(e => e.OnCreateReference)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CREATE_REFERENCE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReferenceRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("REFERENCE_REQUIRED");
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERENCE_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ResolutionMode)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Current')")
                .HasColumnName("RESOLUTION_MODE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureMappingMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STRUCTURE_MAPPING_METHOD");
            entity.Property(e => e.SynchronizationDirection)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'FromItem')")
                .HasColumnName("SYNCHRONIZATION_DIRECTION");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TrackingMode)
                .HasMaxLength(64)
                .HasColumnName("TRACKING_MODE");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfElementbindings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_ELEME__SOURC__61A66D40");
        });

        modelBuilder.Entity<CmfElementtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_ELEM__3214EC27E937D4AC");

            entity.ToTable("CMF_ELEMENTTYPE");

            entity.HasIndex(e => e.Name, "C73").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPermission)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'FAC64B6CE47348458D6DEB1C68DC4724')")
                .IsFixedLength()
                .HasColumnName("DEFAULT_PERMISSION");
            entity.Property(e => e.GeneratedType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GENERATED_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Parent)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfElementtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_ELEME__SOURC__581D0306");
        });

        modelBuilder.Entity<CmfExporttoexcelviewconfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_EXPO__3214EC27BEF5B74F");

            entity.ToTable("CMF_EXPORTTOEXCELVIEWCONFIG");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeHeader)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INCLUDE_HEADER");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartingRowNumber).HasColumnName("STARTING_ROW_NUMBER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TabularView)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TABULAR_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UseStyleSettings)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_STYLE_SETTINGS");
            entity.Property(e => e.WorksheetName)
                .HasMaxLength(32)
                .HasColumnName("WORKSHEET_NAME");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfExporttoexcelviewconfigs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_EXPOR__SOURC__5911273F");
        });

        modelBuilder.Entity<CmfPropertyallowedpermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_PROP__3214EC27C04E2966");

            entity.ToTable("CMF_PROPERTYALLOWEDPERMISSION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CmfPropertyallowedpermissions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CMF_PROPE__RELAT__6576FE24");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfPropertyallowedpermissions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_PROPE__SOURC__6482D9EB");
        });

        modelBuilder.Entity<CmfPropertybinding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_PROP__3214EC271BF61A58");

            entity.ToTable("CMF_PROPERTYBINDING");

            entity.HasIndex(e => e.Property, "C72").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Property)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTY");
            entity.Property(e => e.ReadOnly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("READ_ONLY");
            entity.Property(e => e.ReferenceTypePropertyId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REFERENCE_TYPE_PROPERTY_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfPropertybindings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_PROPE__SOURC__666B225D");
        });

        modelBuilder.Entity<CmfPropertytype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_PROP__3214EC27DFD396E0");

            entity.ToTable("CMF_PROPERTYTYPE");

            entity.HasIndex(e => e.Name, "C70").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DataLength).HasColumnName("DATA_LENGTH");
            entity.Property(e => e.DataType)
                .HasMaxLength(64)
                .HasColumnName("DATA_TYPE");
            entity.Property(e => e.DefaultPermission)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'')")
                .IsFixedLength()
                .HasColumnName("DEFAULT_PERMISSION");
            entity.Property(e => e.GeneratedType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GENERATED_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UiComputedProperty)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UI_COMPUTED_PROPERTY");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfPropertytypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_PROPE__SOURC__629A9179");
        });

        modelBuilder.Entity<CmfStyle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_STYL__3214EC270138D984");

            entity.ToTable("CMF_STYLE");

            entity.HasIndex(e => e.Name, "C68").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BackgroundColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BACKGROUND_COLOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FontFamily)
                .HasMaxLength(64)
                .HasColumnName("FONT_FAMILY");
            entity.Property(e => e.FontSize).HasColumnName("FONT_SIZE");
            entity.Property(e => e.FontStyle)
                .HasMaxLength(64)
                .HasColumnName("FONT_STYLE");
            entity.Property(e => e.FontWeight)
                .HasMaxLength(64)
                .HasColumnName("FONT_WEIGHT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TextAlign)
                .HasMaxLength(64)
                .HasColumnName("TEXT_ALIGN");
            entity.Property(e => e.TextColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEXT_COLOR");
            entity.Property(e => e.TextDecoration)
                .HasMaxLength(64)
                .HasColumnName("TEXT_DECORATION");
        });

        modelBuilder.Entity<CmfTabularview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC27B145676C");

            entity.ToTable("CMF_TABULARVIEW");

            entity.HasIndex(e => e.Name, "C69").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultHeaderStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFAULT_HEADER_STYLE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridBorderColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRID_BORDER_COLOR");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TreeLabelMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TREE_LABEL_METHOD");
        });

        modelBuilder.Entity<CmfTabularviewcolumn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC27B84171A5");

            entity.ToTable("CMF_TABULARVIEWCOLUMN");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasDefaultValueSql("(N'Property Default')")
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColOrder).HasColumnName("COL_ORDER");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContentStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTENT_STYLE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DatePattern)
                .HasMaxLength(64)
                .HasColumnName("DATE_PATTERN");
            entity.Property(e => e.EditorDataSourceList)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EDITOR_DATA_SOURCE_LIST");
            entity.Property(e => e.EditorDataSourceMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EDITOR_DATA_SOURCE_METHOD");
            entity.Property(e => e.EditorHeader1ForListLabel)
                .HasMaxLength(64)
                .HasColumnName("EDITOR_HEADER_1_FOR_LIST_LABEL");
            entity.Property(e => e.EditorHeader1Width).HasColumnName("EDITOR_HEADER_1_WIDTH");
            entity.Property(e => e.EditorHeader2ForListValue)
                .HasMaxLength(64)
                .HasColumnName("EDITOR_HEADER_2_FOR_LIST_VALUE");
            entity.Property(e => e.EditorHeader2Width).HasColumnName("EDITOR_HEADER_2_WIDTH");
            entity.Property(e => e.EditorUseBoth)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EDITOR_USE_BOTH");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Header)
                .HasMaxLength(64)
                .HasColumnName("HEADER");
            entity.Property(e => e.HeaderStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HEADER_STYLE");
            entity.Property(e => e.InitialWidth).HasColumnName("INITIAL_WIDTH");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Property)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfTabularviewcolumns)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_TABUL__SOURC__5A054B78");
        });

        modelBuilder.Entity<CmfTabularviewcolumngroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC27C7CE0348");

            entity.ToTable("CMF_TABULARVIEWCOLUMNGROUPS");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndColumn).HasColumnName("END_COLUMN");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GroupStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GROUP_STYLE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartColumn).HasColumnName("START_COLUMN");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfTabularviewcolumngroups)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_TABUL__SOURC__5AF96FB1");
        });

        modelBuilder.Entity<CmfTabularviewheaderrow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC274D373A92");

            entity.ToTable("CMF_TABULARVIEWHEADERROW");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GroupLevel)
                .HasDefaultValueSql("((2))")
                .HasColumnName("GROUP_LEVEL");
            entity.Property(e => e.HeaderStyle)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HEADER_STYLE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CmfTabularviewheaderrow1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC27EDA09D05");

            entity.ToTable("CMF_TABULARVIEWHEADERROWS");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.CmfTabularviewheaderrow1s)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CMF_TABUL__RELAT__5CE1B823");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfTabularviewheaderrow1s)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_TABUL__SOURC__5BED93EA");
        });

        modelBuilder.Entity<CmfTabularviewtree>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CMF_TABU__3214EC279FDD431E");

            entity.ToTable("CMF_TABULARVIEWTREE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DocumentElementIcon)
                .HasMaxLength(128)
                .HasColumnName("DOCUMENT_ELEMENT_ICON");
            entity.Property(e => e.ElementType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ELEMENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CmfTabularviewtrees)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CMF_TABUL__SOURC__5DD5DC5C");
        });

        modelBuilder.Entity<ColumnEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COLUMN_E__3214EC27980D3D94");

            entity.ToTable("COLUMN_EVENT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridEvent)
                .HasMaxLength(64)
                .HasColumnName("GRID_EVENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ColumnEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__COLUMN_EV__RELAT__07420643");

            entity.HasOne(d => d.Source).WithMany(p => p.ColumnEvents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__COLUMN_EV__SOURC__064DE20A");
        });

        modelBuilder.Entity<Commandbarbutton>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC279909F2C2");

            entity.ToTable("COMMANDBARBUTTON");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("TOOLTIP_TEMPLATE");
        });

        modelBuilder.Entity<Commandbarcheckbox>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27EE49D318");

            entity.ToTable("COMMANDBARCHECKBOX");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbardropdown>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC277AC71031");

            entity.ToTable("COMMANDBARDROPDOWN");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("TOOLTIP_TEMPLATE");
        });

        modelBuilder.Entity<Commandbaredit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC2761F8D5D6");

            entity.ToTable("COMMANDBAREDIT");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OnKeydownHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_KEYDOWN_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("TOOLTIP_TEMPLATE");
        });

        modelBuilder.Entity<Commandbaritem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("COMMANDBARITEM");

            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarmenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27C0B507C6");

            entity.ToTable("COMMANDBARMENU");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentMenu)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_MENU");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarmenubutton>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC276EAB12C4");

            entity.ToTable("COMMANDBARMENUBUTTON");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentMenu)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_MENU");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarmenucheckbox>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC2713B44DD5");

            entity.ToTable("COMMANDBARMENUCHECKBOX");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GroupId)
                .HasMaxLength(32)
                .HasColumnName("GROUP_ID");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentMenu)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_MENU");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarmenuseparator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC2767565B56");

            entity.ToTable("COMMANDBARMENUSEPARATOR");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentMenu)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_MENU");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarsection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC2786FF7505");

            entity.ToTable("COMMANDBARSECTION");

            entity.HasIndex(e => new { e.LocationName, e.Name }, "C46").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.BuilderMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BUILDER_METHOD");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LocationName)
                .HasMaxLength(64)
                .HasColumnName("LOCATION_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarsectiondependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27E3E3EF91");

            entity.ToTable("COMMANDBARSECTIONDEPENDENCY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Commandbarsectiondependencies)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__COMMANDBA__RELAT__36BC0F3B");

            entity.HasOne(d => d.Source).WithMany(p => p.Commandbarsectiondependencies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__COMMANDBA__SOURC__35C7EB02");
        });

        modelBuilder.Entity<Commandbarsectionitem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC271FE88BBE");

            entity.ToTable("COMMANDBARSECTIONITEM");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action)
                .HasMaxLength(64)
                .HasColumnName("ACTION");
            entity.Property(e => e.Alternate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALTERNATE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemClassification)
                .HasMaxLength(512)
                .HasColumnName("ITEM_CLASSIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Commandbarsectionitems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__COMMANDBA__SOURC__37B03374");
        });

        modelBuilder.Entity<Commandbarseparator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27193BA90E");

            entity.ToTable("COMMANDBARSEPARATOR");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IncludeEvents)
                .HasMaxLength(128)
                .HasColumnName("INCLUDE_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Commandbarshortcut>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__COMMANDB__3214EC27776E535D");

            entity.ToTable("COMMANDBARSHORTCUT");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnClickHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_CLICK_HANDLER");
            entity.Property(e => e.OnInitHandler)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_INIT_HANDLER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Shortcut)
                .HasMaxLength(64)
                .HasColumnName("SHORTCUT");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ConfigurableGridEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONFIGUR__3214EC27881A7EC9");

            entity.ToTable("CONFIGURABLE_GRID_EVENT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridEvent)
                .HasMaxLength(64)
                .HasColumnName("GRID_EVENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ConfigurableGridEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONFIGURA__RELAT__5669C4BE");

            entity.HasOne(d => d.Source).WithMany(p => p.ConfigurableGridEvents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONFIGURA__SOURC__5575A085");
        });

        modelBuilder.Entity<Conversionrule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27CACBE9E3");

            entity.ToTable("CONVERSIONRULE");

            entity.HasIndex(e => e.Name, "C43").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ConverterType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONVERTER_TYPE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Cutoff)
                .HasDefaultValueSql("((24))")
                .HasColumnName("CUTOFF");
            entity.Property(e => e.Delay)
                .HasDefaultValueSql("((5))")
                .HasColumnName("DELAY");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENABLED");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Timeout)
                .HasDefaultValueSql("((60))")
                .HasColumnName("TIMEOUT");
        });

        modelBuilder.Entity<Conversionruleeventhandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC271A538732");

            entity.ToTable("CONVERSIONRULEEVENTHANDLER");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionruleeventhandlers)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__2685A772");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionruleeventhandlers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__25918339");
        });

        modelBuilder.Entity<Conversionruleeventtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27149F4270");

            entity.ToTable("CONVERSIONRULEEVENTTEMPLATE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockDependencies)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCK_DEPENDENCIES");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionruleeventtemplates)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__286DEFE4");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionruleeventtemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__2779CBAB");
        });

        modelBuilder.Entity<Conversionrulefiletype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27719316B7");

            entity.ToTable("CONVERSIONRULEFILETYPE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENABLED");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.Options)
                .HasMaxLength(512)
                .HasColumnName("OPTIONS");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionrulefiletypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__2A563856");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionrulefiletypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__2962141D");
        });

        modelBuilder.Entity<Conversionserver>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27A61245A4");

            entity.ToTable("CONVERSIONSERVER");

            entity.HasIndex(e => e.Name, "C41").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.ImpersonationUserId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IMPERSONATION_USER_ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Url)
                .HasMaxLength(256)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<Conversionserverconvertertype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27B77828E2");

            entity.ToTable("CONVERSIONSERVERCONVERTERTYPE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionserverconvertertypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__2C3E80C8");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionserverconvertertypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__2B4A5C8F");
        });

        modelBuilder.Entity<Conversionserverpriority>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC277F584B20");

            entity.ToTable("CONVERSIONSERVERPRIORITY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversionserverpriorities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__2E26C93A");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversionserverpriorities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__2D32A501");
        });

        modelBuilder.Entity<Conversiontask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC2751144324");

            entity.ToTable("CONVERSIONTASK");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Error).HasColumnName("ERROR");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FileType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_TYPE");
            entity.Property(e => e.FinishedOn)
                .HasColumnType("datetime")
                .HasColumnName("FINISHED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RuleId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RULE_ID");
            entity.Property(e => e.StartedOn)
                .HasColumnType("datetime")
                .HasColumnName("STARTED_ON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UserData).HasColumnName("USER_DATA");
        });

        modelBuilder.Entity<Conversiontaskdependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC271B7FB4A4");

            entity.ToTable("CONVERSIONTASKDEPENDENCY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DependencyId)
                .HasMaxLength(32)
                .HasColumnName("DEPENDENCY_ID");
            entity.Property(e => e.DependencyType)
                .HasMaxLength(64)
                .HasColumnName("DEPENDENCY_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversiontaskdependencies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__2F1AED73");
        });

        modelBuilder.Entity<Conversiontaskeventhandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27A302B156");

            entity.ToTable("CONVERSIONTASKEVENTHANDLER");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.ExecutionAttempt).HasColumnName("EXECUTION_ATTEMPT");
            entity.Property(e => e.FinishedOn)
                .HasColumnType("datetime")
                .HasColumnName("FINISHED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockDependencies)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCK_DEPENDENCIES");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartedOn)
                .HasColumnType("datetime")
                .HasColumnName("STARTED_ON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UserData).HasColumnName("USER_DATA");

            entity.HasOne(d => d.Related).WithMany(p => p.Conversiontaskeventhandlers)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__CONVERSIO__RELAT__310335E5");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversiontaskeventhandlers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__300F11AC");
        });

        modelBuilder.Entity<Conversiontaskhandlererror>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC27635F55A9");

            entity.ToTable("CONVERSIONTASKHANDLERERROR");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AttemptNumber).HasColumnName("ATTEMPT_NUMBER");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ErrorMessage).HasColumnName("ERROR_MESSAGE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversiontaskhandlererrors)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__34D3C6C9");
        });

        modelBuilder.Entity<Conversiontaskresult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERSI__3214EC278C1EE1B8");

            entity.ToTable("CONVERSIONTASKRESULT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Kind)
                .HasMaxLength(64)
                .HasColumnName("KIND");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Conversiontaskresults)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CONVERSIO__SOURC__31F75A1E");
        });

        modelBuilder.Entity<Convertertype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CONVERTE__3214EC2796C2953D");

            entity.ToTable("CONVERTERTYPE");

            entity.HasIndex(e => e.Name, "C42").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<CoreGloballayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CORE_GLO__3214EC27EC413124");

            entity.ToTable("CORE_GLOBALLAYOUT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CoreAppendItems)
                .HasMaxLength(5)
                .HasColumnName("CORE_APPEND_ITEMS");
            entity.Property(e => e.CoreDebug)
                .HasMaxLength(5)
                .HasColumnName("CORE_DEBUG");
            entity.Property(e => e.CoreDefaultDownloadLocation)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CORE_DEFAULT_DOWNLOAD_LOCATION");
            entity.Property(e => e.CoreInBasketHistory)
                .HasMaxLength(24)
                .HasColumnName("CORE_IN_BASKET_HISTORY");
            entity.Property(e => e.CorePopupmessageTimeout)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CORE_POPUPMESSAGE_TIMEOUT");
            entity.Property(e => e.CoreShowItemProperties)
                .HasMaxLength(5)
                .HasColumnName("CORE_SHOW_ITEM_PROPERTIES");
            entity.Property(e => e.CoreShowLabels)
                .HasMaxLength(5)
                .HasColumnName("CORE_SHOW_LABELS");
            entity.Property(e => e.CoreShowScanButtonForFile)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("CORE_SHOW_SCAN_BUTTON_FOR_FILE");
            entity.Property(e => e.CoreStructureLayout)
                .HasMaxLength(5)
                .HasColumnName("CORE_STRUCTURE_LAYOUT");
            entity.Property(e => e.CoreSuccessmessageType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Popup')")
                .HasColumnName("CORE_SUCCESSMESSAGE_TYPE");
            entity.Property(e => e.CoreTabsState)
                .HasMaxLength(64)
                .HasColumnName("CORE_TABS_STATE");
            entity.Property(e => e.CoreTearOff)
                .HasMaxLength(5)
                .HasColumnName("CORE_TEAR_OFF");
            entity.Property(e => e.CoreUseWildcards)
                .HasMaxLength(5)
                .HasColumnName("CORE_USE_WILDCARDS");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CoreGloballayouts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CORE_GLOB__SOURC__1466F737");
        });

        modelBuilder.Entity<CoreItemgridlayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CORE_ITE__3214EC27B14FEF52");

            entity.ToTable("CORE_ITEMGRIDLAYOUT");

            entity.HasIndex(e => new { e.ItemTypeId, e.SourceId }, "C34").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColOrder).HasColumnName("COL_ORDER");
            entity.Property(e => e.ColWidths).HasColumnName("COL_WIDTHS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxRecords).HasColumnName("MAX_RECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PageSize).HasColumnName("PAGE_SIZE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PreviewState)
                .HasMaxLength(64)
                .HasColumnName("PREVIEW_STATE");
            entity.Property(e => e.QueryType)
                .HasMaxLength(32)
                .HasColumnName("QUERY_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CoreItemgridlayouts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CORE_ITEM__SOURC__155B1B70");
        });

        modelBuilder.Entity<CoreRelgridlayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CORE_REL__3214EC27198EEC69");

            entity.ToTable("CORE_RELGRIDLAYOUT");

            entity.HasIndex(e => new { e.RelTypeId, e.SourceId }, "C35").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColOrder).HasColumnName("COL_ORDER");
            entity.Property(e => e.ColWidths).HasColumnName("COL_WIDTHS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PageSize).HasColumnName("PAGE_SIZE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RedlineView)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REDLINE_VIEW");
            entity.Property(e => e.RelTypeId)
                .HasMaxLength(32)
                .HasColumnName("REL_TYPE_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SearchVis).HasColumnName("SEARCH_VIS");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.CoreRelgridlayouts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__CORE_RELG__SOURC__164F3FA9");
        });

        modelBuilder.Entity<Cuidependency>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CUIDEPENDENCY");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CUSTOMER__3214EC27F3A675F2");

            entity.ToTable("CUSTOMER");

            entity.HasIndex(e => e.Name, "C81").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Address)
                .HasMaxLength(256)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.AddressState)
                .HasMaxLength(64)
                .HasColumnName("ADDRESS_STATE");
            entity.Property(e => e.City)
                .HasMaxLength(64)
                .HasColumnName("CITY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(64)
                .HasColumnName("CONTACT_NAME");
            entity.Property(e => e.Country)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MainFax)
                .HasMaxLength(32)
                .HasColumnName("MAIN_FAX");
            entity.Property(e => e.MainPhone)
                .HasMaxLength(32)
                .HasColumnName("MAIN_PHONE");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WebSite)
                .HasMaxLength(128)
                .HasColumnName("WEB_SITE");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(32)
                .HasColumnName("ZIP_CODE");
        });

        modelBuilder.Entity<Dashboard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DASHBOAR__3214EC27818D37A5");

            entity.ToTable("DASHBOARD");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BackgroundStyle).HasColumnName("BACKGROUND_STYLE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<DashboardChart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DASHBOAR__3214EC271742C801");

            entity.ToTable("DASHBOARD_CHART");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.DashboardCharts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DASHBOARD__RELAT__127EAEC5");

            entity.HasOne(d => d.Source).WithMany(p => p.DashboardCharts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DASHBOARD__SOURC__118A8A8C");
        });

        modelBuilder.Entity<Databaseupgrade>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DATABASE__3214EC27EB4D9B11");

            entity.ToTable("DATABASEUPGRADE");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AppliedOn)
                .HasColumnType("datetime")
                .HasColumnName("APPLIED_ON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsLatest)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_LATEST");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OsUser)
                .HasMaxLength(64)
                .HasColumnName("OS_USER");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TargetRelease)
                .HasMaxLength(32)
                .HasColumnName("TARGET_RELEASE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
            entity.Property(e => e.UpgradeStatus)
                .HasMaxLength(64)
                .HasColumnName("UPGRADE_STATUS");
        });

        modelBuilder.Entity<Databaseupgradelogfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DATABASE__3214EC276D2F384C");

            entity.ToTable("DATABASEUPGRADELOGFILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Databaseupgradelogfiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DATABASEU__RELAT__58520D30");

            entity.HasOne(d => d.Source).WithMany(p => p.Databaseupgradelogfiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DATABASEU__SOURC__575DE8F7");
        });

        modelBuilder.Entity<Databaseupgradepatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DATABASE__3214EC27B43C6E40");

            entity.ToTable("DATABASEUPGRADEPATCH");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Databaseupgradepatches)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DATABASEU__RELAT__5A3A55A2");

            entity.HasOne(d => d.Source).WithMany(p => p.Databaseupgradepatches)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DATABASEU__SOURC__59463169");
        });

        modelBuilder.Entity<Deliverable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DELIVERABLE");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<DesignToGoal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DESIGN_T__3214EC275D1E710C");

            entity.ToTable("DESIGN_TO_GOAL");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Desktop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DESKTOP__3214EC27BF6D480C");

            entity.ToTable("DESKTOP");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.XPos).HasColumnName("X_POS");
            entity.Property(e => e.YPos).HasColumnName("Y_POS");

            entity.HasOne(d => d.Related).WithMany(p => p.Desktops)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DESKTOP__RELATED__407A839F");
        });

        modelBuilder.Entity<Discussion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC27C8589BA4");

            entity.ToTable("DISCUSSION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Discussions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DISCUSSIO__RELAT__3A8CA01F");
        });

        modelBuilder.Entity<Discussiondefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC275FED6964");

            entity.ToTable("DISCUSSIONDEFINITION");

            entity.HasIndex(e => e.ItemConfigId, "C53").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultVisibilityIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFAULT_VISIBILITY_IDENTITY");
            entity.Property(e => e.FileSelectionDepth)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("FILE_SELECTION_DEPTH");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemSelectionDepth)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("ITEM_SELECTION_DEPTH");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TemplateId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEMPLATE_ID");
        });

        modelBuilder.Entity<Discussiondefinitionview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC27D0655F17");

            entity.ToTable("DISCUSSIONDEFINITIONVIEW");

            entity.HasIndex(e => new { e.Client, e.RelatedId, e.SourceId }, "C56").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Discussiondefinitionviews)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DISCUSSIO__RELAT__3D690CCA");

            entity.HasOne(d => d.Source).WithMany(p => p.Discussiondefinitionviews)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DISCUSSIO__SOURC__3C74E891");
        });

        modelBuilder.Entity<Discussiontemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC27F07E4B1A");

            entity.ToTable("DISCUSSIONTEMPLATE");

            entity.HasIndex(e => new { e.ClassPath, e.SourceId }, "C57").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ClassPath)
                .HasMaxLength(512)
                .HasColumnName("CLASS_PATH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultVisibilityIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFAULT_VISIBILITY_IDENTITY");
            entity.Property(e => e.FileSelectionDepth)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("FILE_SELECTION_DEPTH");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemSelectionDepth)
                .HasDefaultValueSql("((-1))")
                .HasColumnName("ITEM_SELECTION_DEPTH");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VisibilitySupported)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("VISIBILITY_SUPPORTED");

            entity.HasOne(d => d.Source).WithMany(p => p.Discussiontemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DISCUSSIO__SOURC__3E5D3103");
        });

        modelBuilder.Entity<Discussiontemplateview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DISCUSSI__3214EC277DF54E2E");

            entity.ToTable("DISCUSSIONTEMPLATEVIEW");

            entity.HasIndex(e => new { e.Client, e.RelatedId, e.SourceId }, "C64").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Discussiontemplateviews)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DISCUSSIO__RELAT__4AC307E8");

            entity.HasOne(d => d.Source).WithMany(p => p.Discussiontemplateviews)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DISCUSSIO__SOURC__49CEE3AF");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DOCUMENT__3214EC27D2D21FC1");

            entity.ToTable("DOCUMENT");

            entity.HasIndex(e => new { e.ItemNumber, e.ArasUniquenessHelper }, "C87").IsUnique();

            entity.HasIndex(e => e.ExternalId, "I0");

            entity.HasIndex(e => e.ItemNumber, "I1");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_DOCUMENT_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.AuthoringTool)
                .HasMaxLength(64)
                .HasColumnName("AUTHORING_TOOL");
            entity.Property(e => e.AuthoringToolVersion)
                .HasMaxLength(32)
                .HasColumnName("AUTHORING_TOOL_VERSION");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(128)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.DrawingSize)
                .HasMaxLength(64)
                .HasColumnName("DRAWING_SIZE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.FromTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_TEMPLATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasChangePending)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_CHANGE_PENDING");
            entity.Property(e => e.HasFiles)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_FILES");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsTemplate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_TEMPLATE");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.Scale)
                .HasMaxLength(16)
                .HasColumnName("SCALE");
            entity.Property(e => e.SpecificationType)
                .HasMaxLength(64)
                .HasColumnName("SPECIFICATION_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(128)
                .HasColumnName("THUMBNAIL");
        });

        modelBuilder.Entity<DocumentChange>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DOCUMENT__3214EC273BFA14A2");

            entity.ToTable("DOCUMENT_CHANGES");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.DocumentChanges)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DOCUMENT___SOURC__7B663F43");
        });

        modelBuilder.Entity<DocumentFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DOCUMENT__3214EC27073B6809");

            entity.ToTable("DOCUMENT_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsShared)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("IS_SHARED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.DocumentFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__DOCUMENT___RELAT__7D4E87B5");

            entity.HasOne(d => d.Source).WithMany(p => p.DocumentFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__DOCUMENT___SOURC__7C5A637C");
        });

        modelBuilder.Entity<Ecn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECN__3214EC27E8A9BE5A");

            entity.ToTable("ECN");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Basis)
                .HasMaxLength(64)
                .HasColumnName("BASIS");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.CustomerApproval)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CUSTOMER_APPROVAL");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectivityDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVITY_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.ImplementationPlan).HasColumnName("IMPLEMENTATION_PLAN");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.SpecialInstructions).HasColumnName("SPECIAL_INSTRUCTIONS");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(128)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<EcnAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECN_AFFE__3214EC276F66ACFB");

            entity.ToTable("ECN_AFFECTED_ITEM");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcnAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECN_AFFEC__RELAT__7F36D027");

            entity.HasOne(d => d.Source).WithMany(p => p.EcnAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECN_AFFEC__SOURC__7E42ABEE");
        });

        modelBuilder.Entity<EcnEcr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECN_ECR__3214EC27B5FB8D6E");

            entity.ToTable("ECN_ECR");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcnEcrs)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECN_ECR__RELATED__011F1899");

            entity.HasOne(d => d.Source).WithMany(p => p.EcnEcrs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECN_ECR__SOURCE___002AF460");
        });

        modelBuilder.Entity<EcnFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECN_FILE__3214EC271B046D4B");

            entity.ToTable("ECN_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcnFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECN_FILE__RELATE__0307610B");

            entity.HasOne(d => d.Source).WithMany(p => p.EcnFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECN_FILE__SOURCE__02133CD2");
        });

        modelBuilder.Entity<Ecr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECR__3214EC277D03A506");

            entity.ToTable("ECR");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Basis)
                .HasMaxLength(64)
                .HasColumnName("BASIS");
            entity.Property(e => e.ChangeAdmin)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CHANGE_ADMIN");
            entity.Property(e => e.ChangeType)
                .HasMaxLength(64)
                .HasColumnName("CHANGE_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EcrComments).HasColumnName("ECR_COMMENTS");
            entity.Property(e => e.FastTrack)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FAST_TRACK");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.ImplementationPriority)
                .HasMaxLength(64)
                .HasColumnName("IMPLEMENTATION_PRIORITY");
            entity.Property(e => e.ImplementationTiming).HasColumnName("IMPLEMENTATION_TIMING");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.LowNonrecurringCost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOW_NONRECURRING_COST");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NonrecurringCost).HasColumnName("NONRECURRING_COST");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ProblemStatus)
                .HasMaxLength(64)
                .HasColumnName("PROBLEM_STATUS");
            entity.Property(e => e.ProposedSolution).HasColumnName("PROPOSED_SOLUTION");
            entity.Property(e => e.RecurringCost).HasColumnName("RECURRING_COST");
            entity.Property(e => e.RecurringCostDirection)
                .HasMaxLength(64)
                .HasColumnName("RECURRING_COST_DIRECTION");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.RequestedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REQUESTED_BY");
            entity.Property(e => e.Routing)
                .HasMaxLength(64)
                .HasColumnName("ROUTING");
            entity.Property(e => e.Solution)
                .HasMaxLength(64)
                .HasColumnName("SOLUTION");
            entity.Property(e => e.Source)
                .HasMaxLength(64)
                .HasColumnName("SOURCE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TechnicalReview).HasColumnName("TECHNICAL_REVIEW");
            entity.Property(e => e.Title)
                .HasMaxLength(128)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<EcrAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECR_AFFE__3214EC27FE55EDB9");

            entity.ToTable("ECR_AFFECTED_ITEM");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcrAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECR_AFFEC__RELAT__04EFA97D");

            entity.HasOne(d => d.Source).WithMany(p => p.EcrAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECR_AFFEC__SOURC__03FB8544");
        });

        modelBuilder.Entity<EcrFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECR_FILE__3214EC27A4CC89B7");

            entity.ToTable("ECR_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcrFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECR_FILE__RELATE__06D7F1EF");

            entity.HasOne(d => d.Source).WithMany(p => p.EcrFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECR_FILE__SOURCE__05E3CDB6");
        });

        modelBuilder.Entity<EcrPr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ECR_PR__3214EC277FAD2B82");

            entity.ToTable("ECR_PR");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EcrPrs)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ECR_PR__RELATED___08C03A61");

            entity.HasOne(d => d.Source).WithMany(p => p.EcrPrs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ECR_PR__SOURCE_I__07CC1628");
        });

        modelBuilder.Entity<EmailMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EMAIL_ME__3214EC27414BED84");

            entity.ToTable("EMAIL_MESSAGE");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BodyHtml).HasColumnName("BODY_HTML");
            entity.Property(e => e.BodyPlain).HasColumnName("BODY_PLAIN");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FromUser)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_USER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.QueryString).HasColumnName("QUERY_STRING");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Subject)
                .HasMaxLength(128)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EngineeringEfficiency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ENGINEER__3214EC27D8588295");

            entity.ToTable("ENGINEERING_EFFICIENCY");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EngineeringOptimization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ENGINEER__3214EC278157D64F");

            entity.ToTable("ENGINEERING_OPTIMIZATION");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EsAdmin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_ADMIN__3214EC271CB789C4");

            entity.ToTable("ES_ADMIN");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EsAgent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_AGENT__3214EC2764A3507E");

            entity.ToTable("ES_AGENT");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AgentName)
                .HasMaxLength(256)
                .HasColumnName("AGENT_NAME");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EsAgentstate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_AGENT__3214EC2792A00968");

            entity.ToTable("ES_AGENTSTATE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LastUpdate)
                .HasColumnType("datetime")
                .HasColumnName("LAST_UPDATE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.EsAgentstates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ES_AGENTS__SOURC__6C23FBB3");
        });

        modelBuilder.Entity<EsCrawler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_CRAWL__3214EC270AE0D6E4");

            entity.ToTable("ES_CRAWLER");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CrawlerAgent)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CRAWLER_AGENT");
            entity.Property(e => e.CrawlerPaging)
                .HasMaxLength(128)
                .HasColumnName("CRAWLER_PAGING");
            entity.Property(e => e.CrawlerParameters).HasColumnName("CRAWLER_PARAMETERS");
            entity.Property(e => e.CrawlerPeriod).HasColumnName("CRAWLER_PERIOD");
            entity.Property(e => e.CrawlerState)
                .HasMaxLength(64)
                .HasColumnName("CRAWLER_STATE");
            entity.Property(e => e.CrawlerThreads).HasColumnName("CRAWLER_THREADS");
            entity.Property(e => e.CrawlerType)
                .HasMaxLength(64)
                .HasColumnName("CRAWLER_TYPE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EsCrawlerstate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_CRAWL__3214EC2779D9C86E");

            entity.ToTable("ES_CRAWLERSTATE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CaFinish)
                .HasColumnType("datetime")
                .HasColumnName("CA_FINISH");
            entity.Property(e => e.CaStart)
                .HasColumnType("datetime")
                .HasColumnName("CA_START");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentAction)
                .HasMaxLength(128)
                .HasColumnName("CURRENT_ACTION");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.CurrentlyProcessed).HasColumnName("CURRENTLY_PROCESSED");
            entity.Property(e => e.Errors).HasColumnName("ERRORS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasErrors)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_ERRORS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsIterationFinished)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_ITERATION_FINISHED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LastUpdate)
                .HasColumnType("datetime")
                .HasColumnName("LAST_UPDATE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NextAction)
                .HasMaxLength(128)
                .HasColumnName("NEXT_ACTION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TotalToProcess).HasColumnName("TOTAL_TO_PROCESS");

            entity.HasOne(d => d.Source).WithMany(p => p.EsCrawlerstates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ES_CRAWLE__SOURC__6D181FEC");
        });

        modelBuilder.Entity<EsIndexedconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_INDEX__3214EC27AE4D1B4C");

            entity.ToTable("ES_INDEXEDCONFIGURATION");

            entity.HasIndex(e => e.RootType, "C78").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ResetOn)
                .HasColumnType("datetime")
                .HasColumnName("RESET_ON");
            entity.Property(e => e.RootType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROOT_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EsIndexedconfigurationtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_INDEX__3214EC270F7F61CB");

            entity.ToTable("ES_INDEXEDCONFIGURATIONTYPE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DiscoveryPath).HasColumnName("DISCOVERY_PATH");
            entity.Property(e => e.DiscoveryType)
                .HasMaxLength(64)
                .HasColumnName("DISCOVERY_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OnDeleteMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_DELETE_METHOD");
            entity.Property(e => e.OnDiscoverMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_DISCOVER_METHOD");
            entity.Property(e => e.OnVersionMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ON_VERSION_METHOD");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.EsIndexedconfigurationtypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ES_INDEXE__RELAT__6F00685E");

            entity.HasOne(d => d.Source).WithMany(p => p.EsIndexedconfigurationtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ES_INDEXE__SOURC__6E0C4425");
        });

        modelBuilder.Entity<EsIndexedfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_INDEX__3214EC272FAB80A8");

            entity.ToTable("ES_INDEXEDFILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DiscoveryPath).HasColumnName("DISCOVERY_PATH");
            entity.Property(e => e.DiscoveryType)
                .HasMaxLength(64)
                .HasColumnName("DISCOVERY_TYPE");
            entity.Property(e => e.Extensions)
                .HasMaxLength(512)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("EXTENSIONS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.EsIndexedfiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ES_INDEXE__SOURC__6FF48C97");
        });

        modelBuilder.Entity<EsIndexedproperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_INDEX__3214EC27691B524C");

            entity.ToTable("ES_INDEXEDPROPERTY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsFacet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_FACET");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_SEARCH");
            entity.Property(e => e.IsStoreOnly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_STORE_ONLY");
            entity.Property(e => e.IsUi)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_UI");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.EsIndexedproperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ES_INDEXE__SOURC__70E8B0D0");
        });

        modelBuilder.Entity<EsIndexedtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_INDEX__3214EC27A4229DCE");

            entity.ToTable("ES_INDEXEDTYPE");

            entity.HasIndex(e => e.IndexedType, "C79").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IndexedType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INDEXED_TYPE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EsIndexedtypepoly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ES_INDEXEDTYPEPOLY");

            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALLOW_PRIVATE_PERMISSION");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.CacheQuery).HasColumnName("CACHE_QUERY");
            entity.Property(e => e.ClassStructure).HasColumnName("CLASS_STRUCTURE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("CLOSE_ICON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENFORCE_DISCOVERY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_WHERE_USED");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ImplementationDdl).HasColumnName("IMPLEMENTATION_DDL");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasColumnName("IMPLEMENTATION_TYPE");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("INSTANCE_DATA");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEPENDENT");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELATIONSHIP");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VERSIONABLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("LABEL_PLURAL");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("LARGE_ICON");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("MANUAL_VERSIONING");
            entity.Property(e => e.Maxrecords).HasColumnName("MAXRECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("OPEN_ICON");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVISIONS");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasColumnName("SHOW_PARAMETERS_TAB");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasColumnName("STRUCTURE_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNLOCK_ON_LOGOUT");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_SRC_ACCESS");
        });

        modelBuilder.Entity<EsIndexqueue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_INDEX__3214EC272DF5C473");

            entity.ToTable("ES_INDEXQUEUE");

            entity.HasIndex(e => new { e.IndexedId, e.OperationType, e.RootId, e.Status }, "ES_INDEXEDQUEUE_INDEX_1");

            entity.HasIndex(e => new { e.IndexedType, e.Status, e.OperationType }, "ES_INDEXEDQUEUE_INDEX_2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IndexedId)
                .HasMaxLength(32)
                .HasColumnName("INDEXED_ID");
            entity.Property(e => e.IndexedIndexedOn)
                .HasColumnType("datetime")
                .HasColumnName("INDEXED_INDEXED_ON");
            entity.Property(e => e.IndexedModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("INDEXED_MODIFIED_ON");
            entity.Property(e => e.IndexedType)
                .HasMaxLength(256)
                .HasColumnName("INDEXED_TYPE");
            entity.Property(e => e.IndexingStartedOn)
                .HasColumnType("datetime")
                .HasColumnName("INDEXING_STARTED_ON");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OperationType)
                .HasMaxLength(64)
                .HasColumnName("OPERATION_TYPE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RootId)
                .HasMaxLength(32)
                .HasColumnName("ROOT_ID");
            entity.Property(e => e.RootType)
                .HasMaxLength(256)
                .HasColumnName("ROOT_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EsSearch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ES_SEARC__3214EC27553AE9CF");

            entity.ToTable("ES_SEARCH");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<EsTrackingrelationshippoly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ES_TRACKINGRELATIONSHIPPOLY");

            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALLOW_PRIVATE_PERMISSION");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.CacheQuery).HasColumnName("CACHE_QUERY");
            entity.Property(e => e.ClassStructure).HasColumnName("CLASS_STRUCTURE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("CLOSE_ICON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENFORCE_DISCOVERY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_WHERE_USED");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ImplementationDdl).HasColumnName("IMPLEMENTATION_DDL");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasColumnName("IMPLEMENTATION_TYPE");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("INSTANCE_DATA");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEPENDENT");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELATIONSHIP");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VERSIONABLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("LABEL_PLURAL");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("LARGE_ICON");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("MANUAL_VERSIONING");
            entity.Property(e => e.Maxrecords).HasColumnName("MAXRECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("OPEN_ICON");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVISIONS");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasColumnName("SHOW_PARAMETERS_TAB");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasColumnName("STRUCTURE_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNLOCK_ON_LOGOUT");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_SRC_ACCESS");
        });

        modelBuilder.Entity<EsVersionedpropertypoly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ES_VERSIONEDPROPERTYPOLY");

            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALLOW_PRIVATE_PERMISSION");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.CacheQuery).HasColumnName("CACHE_QUERY");
            entity.Property(e => e.ClassStructure).HasColumnName("CLASS_STRUCTURE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("CLOSE_ICON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENFORCE_DISCOVERY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_WHERE_USED");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ImplementationDdl).HasColumnName("IMPLEMENTATION_DDL");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasColumnName("IMPLEMENTATION_TYPE");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("INSTANCE_DATA");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEPENDENT");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELATIONSHIP");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VERSIONABLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("LABEL_PLURAL");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("LARGE_ICON");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("MANUAL_VERSIONING");
            entity.Property(e => e.Maxrecords).HasColumnName("MAXRECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("OPEN_ICON");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVISIONS");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasColumnName("SHOW_PARAMETERS_TAB");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasColumnName("STRUCTURE_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNLOCK_ON_LOGOUT");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_SRC_ACCESS");
        });

        modelBuilder.Entity<Exclusion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXCLUSIO__3214EC27FA93C567");

            entity.ToTable("EXCLUSION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExclusionRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXCLUSION__RELAT__1960B67E");

            entity.HasOne(d => d.Source).WithMany(p => p.ExclusionSources)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__EXCLUSION__SOURC__186C9245");
        });

        modelBuilder.Entity<ExpressDco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC2741A03006");

            entity.ToTable("EXPRESS_DCO");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeReason)
                .HasMaxLength(256)
                .HasColumnName("CHANGE_REASON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(60)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<ExpressDcoAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27EAB28B98");

            entity.ToTable("EXPRESS_DCO_AFFECTED_ITEM");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressDcoAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_D__RELAT__0AA882D3");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressDcoAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_D__SOURC__09B45E9A");
        });

        modelBuilder.Entity<ExpressDcoFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27C08F6660");

            entity.ToTable("EXPRESS_DCO_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressDcoFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_D__RELAT__0C90CB45");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressDcoFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_D__SOURC__0B9CA70C");
        });

        modelBuilder.Entity<ExpressDcoSignoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27E7362919");

            entity.ToTable("EXPRESS_DCO_SIGNOFF");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressDcoSignoffs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_D__SOURC__0D84EF7E");
        });

        modelBuilder.Entity<ExpressEco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27922C52DE");

            entity.ToTable("EXPRESS_ECO");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeEffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("CHANGE_EFFECTIVE_DATE");
            entity.Property(e => e.ChangeReason)
                .HasMaxLength(256)
                .HasColumnName("CHANGE_REASON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(80)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<ExpressEcoAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27E3BC5104");

            entity.ToTable("EXPRESS_ECO_AFFECTED_ITEM");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressEcoAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_E__RELAT__0F6D37F0");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__0E7913B7");
        });

        modelBuilder.Entity<ExpressEcoFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC277D06CE6A");

            entity.ToTable("EXPRESS_ECO_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ExpressEcoFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__EXPRESS_E__RELAT__11558062");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__10615C29");
        });

        modelBuilder.Entity<ExpressEcoImpactMatrix>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27C84845C6");

            entity.ToTable("EXPRESS_ECO_IMPACT_MATRIX");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoImpactMatrices)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__1249A49B");
        });

        modelBuilder.Entity<ExpressEcoSignoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EXPRESS___3214EC27D32FCF7B");

            entity.ToTable("EXPRESS_ECO_SIGNOFF");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ExpressEcoSignoffs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__EXPRESS_E__SOURC__133DC8D4");
        });

        modelBuilder.Entity<FeatureLicense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FEATURE___3214EC27ABBCDA01");

            entity.ToTable("FEATURE_LICENSE");

            entity.HasIndex(e => e.ActivationKey, "C44").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActivationKey)
                .HasMaxLength(32)
                .HasColumnName("ACTIVATION_KEY");
            entity.Property(e => e.AvailableTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'A73B655731924CD0B027E4F4D5FCC0A9')")
                .IsFixedLength()
                .HasColumnName("AVAILABLE_TO");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConcurrentUserCount).HasColumnName("CONCURRENT_USER_COUNT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DatabaseEngineEdition)
                .HasMaxLength(128)
                .HasColumnName("DATABASE_ENGINE_EDITION");
            entity.Property(e => e.DatabaseServerName)
                .HasMaxLength(128)
                .HasColumnName("DATABASE_SERVER_NAME");
            entity.Property(e => e.Domain)
                .HasMaxLength(128)
                .HasColumnName("DOMAIN");
            entity.Property(e => e.EnforcementMode)
                .HasMaxLength(128)
                .HasColumnName("ENFORCEMENT_MODE");
            entity.Property(e => e.ExpirationDate)
                .HasMaxLength(24)
                .HasColumnName("EXPIRATION_DATE");
            entity.Property(e => e.Feature)
                .HasMaxLength(321)
                .HasColumnName("FEATURE");
            entity.Property(e => e.FrameworkLicenseKey)
                .HasMaxLength(1024)
                .HasColumnName("FRAMEWORK_LICENSE_KEY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InnovatorServerLocale)
                .HasMaxLength(128)
                .HasColumnName("INNOVATOR_SERVER_LOCALE");
            entity.Property(e => e.InnovatorServerName)
                .HasMaxLength(128)
                .HasColumnName("INNOVATOR_SERVER_NAME");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IssuedTo)
                .HasMaxLength(128)
                .HasColumnName("ISSUED_TO");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LicenseData).HasColumnName("LICENSE_DATA");
            entity.Property(e => e.LicenseDescription)
                .HasMaxLength(256)
                .HasColumnName("LICENSE_DESCRIPTION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.Login)
                .HasMaxLength(128)
                .HasColumnName("LOGIN");
            entity.Property(e => e.MacAddress)
                .HasMaxLength(32)
                .HasColumnName("MAC_ADDRESS");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NamedUserList).HasColumnName("NAMED_USER_LIST");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Password)
                .HasMaxLength(128)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.StartDate)
                .HasMaxLength(24)
                .HasColumnName("START_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TotalUsers).HasColumnName("TOTAL_USERS");
        });

        modelBuilder.Entity<Feed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FEED__3214EC277B14CD15");

            entity.ToTable("FEED");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FeedType)
                .HasMaxLength(64)
                .HasColumnName("FEED_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HistoryEvents)
                .HasMaxLength(512)
                .HasColumnName("HISTORY_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PolysourceTypeName)
                .HasMaxLength(128)
                .HasColumnName("POLYSOURCE_TYPE_NAME");
            entity.Property(e => e.Reference).HasColumnName("REFERENCE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Feeds)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FEED__SOURCE_ID__3F51553C");
        });

        modelBuilder.Entity<Feedtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FEEDTEMP__3214EC27CB363DAF");

            entity.ToTable("FEEDTEMPLATE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FeedType)
                .HasMaxLength(64)
                .HasColumnName("FEED_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HistoryEvents)
                .HasMaxLength(512)
                .HasColumnName("HISTORY_EVENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PolysourceTypeName)
                .HasMaxLength(128)
                .HasColumnName("POLYSOURCE_TYPE_NAME");
            entity.Property(e => e.Reference).HasColumnName("REFERENCE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Feedtemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FEEDTEMPL__SOURC__4BB72C21");
        });

        modelBuilder.Entity<Field>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FIELD__3214EC27CB6BE5BE");

            entity.ToTable("FIELD");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.BgColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BG_COLOR");
            entity.Property(e => e.BorderWidth).HasColumnName("BORDER_WIDTH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClipOverflow)
                .HasMaxLength(64)
                .HasColumnName("CLIP_OVERFLOW");
            entity.Property(e => e.ClipRectangle)
                .HasMaxLength(32)
                .HasColumnName("CLIP_RECTANGLE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Container)
                .HasMaxLength(32)
                .HasColumnName("CONTAINER");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(32)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.DisplayLength).HasColumnName("DISPLAY_LENGTH");
            entity.Property(e => e.DisplayLengthUnit)
                .HasMaxLength(64)
                .HasColumnName("DISPLAY_LENGTH_UNIT");
            entity.Property(e => e.FieldType)
                .HasMaxLength(64)
                .HasColumnName("FIELD_TYPE");
            entity.Property(e => e.FontColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FONT_COLOR");
            entity.Property(e => e.FontFamily)
                .HasMaxLength(64)
                .HasColumnName("FONT_FAMILY");
            entity.Property(e => e.FontSize)
                .HasMaxLength(8)
                .HasColumnName("FONT_SIZE");
            entity.Property(e => e.FontWeight)
                .HasMaxLength(64)
                .HasColumnName("FONT_WEIGHT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.HtmlCode).HasColumnName("HTML_CODE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDisabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_DISABLED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVisible)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VISIBLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPosition)
                .HasMaxLength(64)
                .HasColumnName("LABEL_POSITION");
            entity.Property(e => e.Legend)
                .HasMaxLength(32)
                .HasColumnName("LEGEND");
            entity.Property(e => e.ListNoBlank)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LIST_NO_BLANK");
            entity.Property(e => e.ListboxSize).HasColumnName("LISTBOX_SIZE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.Orientation)
                .HasMaxLength(64)
                .HasColumnName("ORIENTATION");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Positioning)
                .HasMaxLength(64)
                .HasColumnName("POSITIONING");
            entity.Property(e => e.PropertytypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTYTYPE_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TabIndex).HasColumnName("TAB_INDEX");
            entity.Property(e => e.TabStop)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("TAB_STOP");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TextAlign)
                .HasMaxLength(64)
                .HasColumnName("TEXT_ALIGN");
            entity.Property(e => e.TextareaCols).HasColumnName("TEXTAREA_COLS");
            entity.Property(e => e.TextareaRows).HasColumnName("TEXTAREA_ROWS");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.ZIndex).HasColumnName("Z_INDEX");

            entity.HasOne(d => d.Source).WithMany(p => p.Fields)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FIELD__SOURCE_ID__7B9B496D");
        });

        modelBuilder.Entity<FieldEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FIELD_EV__3214EC277EF92BE3");

            entity.ToTable("FIELD_EVENT");

            entity.HasIndex(e => new { e.FieldEvent1, e.RelatedId, e.SourceId }, "C25").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FieldEvent1)
                .HasMaxLength(64)
                .HasColumnName("FIELD_EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.FieldEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FIELD_EVE__RELAT__0ADD8CFD");

            entity.HasOne(d => d.Source).WithMany(p => p.FieldEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FIELD_EVE__SOURC__09E968C4");
        });

        modelBuilder.Entity<File>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILE__3214EC27537FACA5");

            entity.ToTable("FILE");

            entity.HasIndex(e => new { e.ConfigId, e.IsCurrent }, "IX_File_config_id_is_current");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.CheckedoutPath)
                .HasMaxLength(256)
                .HasColumnName("CHECKEDOUT_PATH");
            entity.Property(e => e.Checksum)
                .HasMaxLength(64)
                .HasColumnName("CHECKSUM");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileSize)
                .HasColumnType("decimal(14, 0)")
                .HasColumnName("FILE_SIZE");
            entity.Property(e => e.FileType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_TYPE");
            entity.Property(e => e.Filename)
                .HasMaxLength(256)
                .HasColumnName("FILENAME");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IndexedOn)
                .HasColumnType("datetime")
                .HasColumnName("INDEXED_ON");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(256)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Mimetype)
                .HasMaxLength(128)
                .HasColumnName("MIMETYPE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Filecontaineritem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FILECONTAINERITEMS");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("classification");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("config_id");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("created_by_id");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("created_on");
            entity.Property(e => e.Css).HasColumnName("css");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("current_state");
            entity.Property(e => e.Generation).HasColumnName("generation");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("is_current");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("is_released");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("keyed_name");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("locked_by_id");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("major_rev");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("managed_by_id");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("minor_rev");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("modified_by_id");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("modified_on");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("new_version");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("not_lockable");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("owned_by_id");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("permission_id");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("state");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("team_id");
        });

        modelBuilder.Entity<Filecontainerlocator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILECONT__3214EC27E06CE48F");

            entity.ToTable("FILECONTAINERLOCATOR");

            entity.HasIndex(e => e.FileId, "IX_filecontainerlocator_file_id_container_type_id_container_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContainerId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER_ID");
            entity.Property(e => e.ContainerPropertyName)
                .HasMaxLength(128)
                .HasColumnName("CONTAINER_PROPERTY_NAME");
            entity.Property(e => e.ContainerTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER_TYPE_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Fileexchangepackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEEXCH__3214EC27F37748D9");

            entity.ToTable("FILEEXCHANGEPACKAGE");

            entity.HasIndex(e => e.PkgNumber, "C38").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasDefaultValueSql("(N'Upload')")
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PkgNumber)
                .HasMaxLength(256)
                .HasColumnName("PKG_NUMBER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Fileexchangepackagefile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEEXCH__3214EC2745603306");

            entity.ToTable("FILEEXCHANGEPACKAGEFILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentalId)
                .HasMaxLength(32)
                .HasColumnName("PARENTAL_ID");
            entity.Property(e => e.ParentalProperty)
                .HasMaxLength(32)
                .HasColumnName("PARENTAL_PROPERTY");
            entity.Property(e => e.ParentalType)
                .HasMaxLength(32)
                .HasColumnName("PARENTAL_TYPE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Fileexchangepackagefiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FILEEXCHA__RELAT__23A93AC7");

            entity.HasOne(d => d.Source).WithMany(p => p.Fileexchangepackagefiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILEEXCHA__SOURC__22B5168E");
        });

        modelBuilder.Entity<Fileexchangetxn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEEXCH__3214EC2723C97B22");

            entity.ToTable("FILEEXCHANGETXN");

            entity.HasIndex(e => e.TxnNumber, "C39").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Data).HasColumnName("DATA");
            entity.Property(e => e.Error)
                .HasMaxLength(1024)
                .HasColumnName("ERROR");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Package)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PACKAGE");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ServiceProvider)
                .HasMaxLength(64)
                .HasColumnName("SERVICE_PROVIDER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransferAttempts)
                .HasDefaultValueSql("((0))")
                .HasColumnName("TRANSFER_ATTEMPTS");
            entity.Property(e => e.TxnNumber)
                .HasMaxLength(256)
                .HasColumnName("TXN_NUMBER");
            entity.Property(e => e.TxnStatus)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'NotStarted')")
                .HasColumnName("TXN_STATUS");
            entity.Property(e => e.TxnType)
                .HasMaxLength(64)
                .HasColumnName("TXN_TYPE");
        });

        modelBuilder.Entity<Fileexchangetxnstate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEEXCH__3214EC27F6EA4651");

            entity.ToTable("FILEEXCHANGETXNSTATE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Error)
                .HasMaxLength(1024)
                .HasColumnName("ERROR");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FileName)
                .HasMaxLength(128)
                .HasColumnName("FILE_NAME");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Fileexchangetxnstates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILEEXCHA__SOURC__249D5F00");
        });

        modelBuilder.Entity<Filegroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEGROU__3214EC271E205D8F");

            entity.ToTable("FILEGROUP");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<FilegroupFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILEGROU__3214EC27CBE84A9C");

            entity.ToTable("FILEGROUP_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("FILE_EXPIRATION_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.FilegroupFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FILEGROUP__RELAT__33DFA290");

            entity.HasOne(d => d.Source).WithMany(p => p.FilegroupFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILEGROUP__SOURC__32EB7E57");
        });

        modelBuilder.Entity<Fileselector>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILESELE__3214EC2760502124");

            entity.ToTable("FILESELECTOR");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Filter).HasColumnName("FILTER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Reference).HasColumnName("REFERENCE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'File ${File:filename} from ${ItemType:label} ${Item:keyed_name}')")
                .HasColumnName("TOOLTIP_TEMPLATE");

            entity.HasOne(d => d.Source).WithMany(p => p.Fileselectors)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILESELEC__SOURC__4CAB505A");
        });

        modelBuilder.Entity<Fileselectortemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILESELE__3214EC27FFED44F1");

            entity.ToTable("FILESELECTORTEMPLATE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Filter).HasColumnName("FILTER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Reference).HasColumnName("REFERENCE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TooltipTemplate)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'File ${File:filename} from ${ItemType:label} ${Item:keyed_name}')")
                .HasColumnName("TOOLTIP_TEMPLATE");

            entity.HasOne(d => d.Source).WithMany(p => p.Fileselectortemplates)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FILESELEC__SOURC__4D9F7493");
        });

        modelBuilder.Entity<Filetype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILETYPE__3214EC271C0CBAB2");

            entity.ToTable("FILETYPE");

            entity.HasIndex(e => e.Name, "C3").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Extension)
                .HasMaxLength(32)
                .HasColumnName("EXTENSION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Mimetype)
                .HasMaxLength(128)
                .HasColumnName("MIMETYPE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Pattern)
                .HasMaxLength(32)
                .HasColumnName("PATTERN");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.RuleType)
                .HasMaxLength(64)
                .HasColumnName("RULE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<FilterValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FILTER_V__3214EC279D4241C1");

            entity.ToTable("FILTER_VALUE");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Filter)
                .HasMaxLength(64)
                .HasColumnName("FILTER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value)
                .HasMaxLength(64)
                .HasColumnName("VALUE");

            entity.HasOne(d => d.Source).WithMany(p => p.FilterValues)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FILTER_VA__SOURC__1E256B9B");
        });

        modelBuilder.Entity<Form>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORM__3214EC270078ACC1");

            entity.ToTable("FORM");

            entity.HasIndex(e => e.Name, "C47").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.CategoryForm)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CATEGORY_FORM");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height)
                .HasDefaultValueSql("((234))")
                .HasColumnName("HEIGHT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Stylesheet)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'../styles/default.css')")
                .HasColumnName("STYLESHEET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Width)
                .HasDefaultValueSql("((699))")
                .HasColumnName("WIDTH");
        });

        modelBuilder.Entity<FormEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORM_EVE__3214EC271F3F00BA");

            entity.ToTable("FORM_EVENT");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FormEvent1)
                .HasMaxLength(64)
                .HasColumnName("FORM_EVENT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.FormEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FORM_EVEN__RELAT__5C229E14");

            entity.HasOne(d => d.Source).WithMany(p => p.FormEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FORM_EVEN__SOURC__5B2E79DB");
        });

        modelBuilder.Entity<Forum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUM__3214EC27BC5D6521");

            entity.ToTable("FORUM");

            entity.HasIndex(e => new { e.Name, e.CreatedById }, "C54").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.ForumType)
                .HasMaxLength(64)
                .HasColumnName("FORUM_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Forumitem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMITE__3214EC2726CE886E");

            entity.ToTable("FORUMITEM");

            entity.HasIndex(e => new { e.ItemConfigId, e.SourceId }, "C58").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsBoardOnly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_BOARD_ONLY");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemType)
                .HasMaxLength(64)
                .HasColumnName("ITEM_TYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forumitems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMITEM__SOURC__40457975");
        });

        modelBuilder.Entity<Forummessagegroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMMES__3214EC2736D91117");

            entity.ToTable("FORUMMESSAGEGROUP");

            entity.HasIndex(e => e.Id, "C59").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Aml).HasColumnName("AML");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GroupType)
                .HasMaxLength(64)
                .HasColumnName("GROUP_TYPE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UserCriteriaId)
                .HasMaxLength(32)
                .HasColumnName("USER_CRITERIA_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forummessagegroups)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMMESS__SOURC__41399DAE");
        });

        modelBuilder.Entity<Forummustviewby>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMMUS__3214EC27FEB87E41");

            entity.ToTable("FORUMMUSTVIEWBY");

            entity.HasIndex(e => new { e.MustViewId, e.SourceId }, "C60").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MustViewId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MUST_VIEW_ID");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forummustviewbies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMMUST__SOURC__422DC1E7");
        });

        modelBuilder.Entity<Forumsearch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMSEA__3214EC27F8C859E3");

            entity.ToTable("FORUMSEARCH");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C61").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsBoardOnly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_BOARD_ONLY");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Forumsearches)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__FORUMSEAR__RELAT__44160A59");

            entity.HasOne(d => d.Source).WithMany(p => p.Forumsearches)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMSEAR__SOURC__4321E620");
        });

        modelBuilder.Entity<Forumsharedwith>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMSHA__3214EC2726F32D28");

            entity.ToTable("FORUMSHAREDWITH");

            entity.HasIndex(e => new { e.SharedWithId, e.SourceId }, "C62").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SharedWithId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHARED_WITH_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forumsharedwiths)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMSHAR__SOURC__450A2E92");
        });

        modelBuilder.Entity<Forumwantviewby>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FORUMWAN__3214EC270F07E528");

            entity.ToTable("FORUMWANTVIEWBY");

            entity.HasIndex(e => new { e.WantViewId, e.SourceId }, "C63").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WantViewId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WANT_VIEW_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Forumwantviewbies)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__FORUMWANT__SOURC__45FE52CB");
        });

        modelBuilder.Entity<Frame>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FRAME__3214EC27B5AA3F62");

            entity.ToTable("FRAME");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COLOR");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Frameborder)
                .HasMaxLength(64)
                .HasColumnName("FRAMEBORDER");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MarginHeight).HasColumnName("MARGIN_HEIGHT");
            entity.Property(e => e.MarginWidth).HasColumnName("MARGIN_WIDTH");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.Noresize)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NORESIZE");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Scrolling)
                .HasMaxLength(64)
                .HasColumnName("SCROLLING");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Frames)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FRAME__SOURCE_ID__1A54DAB7");
        });

        modelBuilder.Entity<Frameset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FRAMESET__3214EC279F83FC44");

            entity.ToTable("FRAMESET");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Cols)
                .HasMaxLength(32)
                .HasColumnName("COLS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Frameborder)
                .HasMaxLength(64)
                .HasColumnName("FRAMEBORDER");
            entity.Property(e => e.Framespacing).HasColumnName("FRAMESPACING");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Rows)
                .HasMaxLength(32)
                .HasColumnName("ROWS_");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Framesets)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FRAMESET__SOURCE__1B48FEF0");
        });

        modelBuilder.Entity<Globalpresentationconfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GLOBALPR__3214EC278C886510");

            entity.ToTable("GLOBALPRESENTATIONCONFIG");

            entity.HasIndex(e => new { e.Client, e.ViewType }, "C45").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AdditionalData).HasColumnName("ADDITIONAL_DATA");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PresentationId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PRESENTATION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ViewType)
                .HasMaxLength(64)
                .HasColumnName("VIEW_TYPE");
        });

        modelBuilder.Entity<Grid>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GRID__3214EC279545843B");

            entity.ToTable("GRID");

            entity.HasIndex(e => e.Name, "C4").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MergePath)
                .HasMaxLength(256)
                .HasColumnName("MERGE_PATH");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Query).HasColumnName("QUERY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<GridColumn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GRID_COL__3214EC27B0549052");

            entity.ToTable("GRID_COLUMN");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Align)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("ALIGN");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'default')")
                .HasColumnName("DATATYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Property)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SelectMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SELECT_METHOD");
            entity.Property(e => e.SelectQuery).HasColumnName("SELECT_QUERY");
            entity.Property(e => e.Sort).HasColumnName("SORT");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceForm)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_FORM");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartsNestedRow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("STARTS_NESTED_ROW");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Visible)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("VISIBLE");
            entity.Property(e => e.Width)
                .HasDefaultValueSql("((100))")
                .HasColumnName("WIDTH");
            entity.Property(e => e.Xpath)
                .HasMaxLength(512)
                .HasColumnName("XPATH");

            entity.HasOne(d => d.Source).WithMany(p => p.GridColumns)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__GRID_COLU__SOURC__0EE3280B");
        });

        modelBuilder.Entity<GridEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GRID_EVE__3214EC27F96BD9EE");

            entity.ToTable("GRID_EVENT");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridEvent1)
                .HasMaxLength(64)
                .HasColumnName("GRID_EVENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.GridEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__GRID_EVEN__RELAT__7D8391DF");

            entity.HasOne(d => d.Source).WithMany(p => p.GridEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__GRID_EVEN__SOURC__7C8F6DA6");
        });

        modelBuilder.Entity<Help>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HELP__3214EC27090BA7D0");

            entity.ToTable("HELP");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Content).HasColumnName("CONTENT");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(80)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<HelpSeeAlso>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HELP_SEE__3214EC272DA3DAE1");

            entity.ToTable("HELP_SEE_ALSO");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Seq).HasColumnName("SEQ");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.HelpSeeAlsoRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__HELP_SEE___RELAT__0B129727");

            entity.HasOne(d => d.Source).WithMany(p => p.HelpSeeAlsoSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__HELP_SEE___SOURC__0A1E72EE");
        });

        modelBuilder.Entity<HideIn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HIDE_IN__3214EC27C8B0B8AE");

            entity.ToTable("HIDE_IN");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HideIn1)
                .HasMaxLength(64)
                .HasColumnName("HIDE_IN");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.HideIns)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__HIDE_IN__SOURCE___7E77B618");
        });

        modelBuilder.Entity<HideRelatedIn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HIDE_REL__3214EC2707BEE445");

            entity.ToTable("HIDE_RELATED_IN");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HideIn)
                .HasMaxLength(64)
                .HasColumnName("HIDE_IN");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.HideRelatedIns)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__HIDE_RELA__SOURC__7F6BDA51");
        });

        modelBuilder.Entity<History>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY__3214EC27B58BA406");

            entity.ToTable("HISTORY");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action)
                .HasMaxLength(32)
                .HasColumnName("ACTION");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.CreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("CREATED_ON_TICK");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Version).HasColumnName("VERSION");

            entity.HasOne(d => d.Source).WithMany(p => p.Histories)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__HISTORY__SOURCE___0EAE1DE1");
        });

        modelBuilder.Entity<HistoryAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC2750BF9223");

            entity.ToTable("HISTORY_ACTION");

            entity.HasIndex(e => e.Name, "C30").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommentText)
                .HasMaxLength(1024)
                .HasColumnName("COMMENT_TEXT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsInternal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_INTERNAL");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<HistoryContainer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC2745585459");

            entity.ToTable("HISTORY_CONTAINER");

            entity.HasIndex(e => e.ItemConfigId, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemtypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEMTYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<HistoryTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC2732E0954C");

            entity.ToTable("HISTORY_TEMPLATE");

            entity.HasIndex(e => e.Name, "C31").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyHistory)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("PROPERTY_HISTORY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<HistoryTemplateAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC270D934157");

            entity.ToTable("HISTORY_TEMPLATE_ACTION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.HistoryTemplateActions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__HISTORY_T__RELAT__0CC5D56F");

            entity.HasOne(d => d.Source).WithMany(p => p.HistoryTemplateActions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__HISTORY_T__SOURC__0BD1B136");
        });

        modelBuilder.Entity<HistoryTemplateWhereUsed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HISTORY___3214EC27099FD7FE");

            entity.ToTable("HISTORY_TEMPLATE_WHERE_USED");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.HistoryTemplateWhereUseds)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__HISTORY_T__SOURC__0DB9F9A8");
        });

        modelBuilder.Entity<Historysecuremessage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("HISTORYSECUREMESSAGE");

            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.CreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("CREATED_ON_TICK");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DisabledById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISABLED_BY_ID");
            entity.Property(e => e.DisabledOn)
                .HasColumnType("datetime")
                .HasColumnName("DISABLED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HighlightedText)
                .HasMaxLength(128)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIGHLIGHTED_TEXT");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(30)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReplyToId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPLY_TO_ID");
            entity.Property(e => e.SmData).HasColumnName("SM_DATA");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ThreadId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("THREAD_ID");
        });

        modelBuilder.Entity<Identity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__IDENTITY__3214EC2726BF1EBD");

            entity.ToTable("IDENTITY");

            entity.HasIndex(e => e.Name, "C5").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.MaximumPwdAge, "IX_MAXIMUM_PWD_AGE");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsAlias)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_ALIAS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaximumPwdAge).HasColumnName("MAXIMUM_PWD_AGE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PwdHistoryLength).HasColumnName("PWD_HISTORY_LENGTH");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Implement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__IMPLEMEN__3214EC2790A2C2B2");

            entity.ToTable("IMPLEMENTS");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Implements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__IMPLEMENT__SOURC__5D16C24D");
        });

        modelBuilder.Entity<InMeetingNews>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk3741");

            entity.ToTable("IN_MEETING_NEWS");

            entity.HasIndex(e => e.SourceId, "IND3742");

            entity.HasIndex(e => e.RelatedId, "IND3743");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InAnsL3)
                .HasMaxLength(256)
                .HasColumnName("IN_ANS_L3");
            entity.Property(e => e.InCancelById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_CANCEL_BY_ID");
            entity.Property(e => e.InCancelMemo)
                .HasMaxLength(200)
                .HasColumnName("IN_CANCEL_MEMO");
            entity.Property(e => e.InCancelStatus)
                .HasMaxLength(32)
                .HasColumnName("IN_CANCEL_STATUS");
            entity.Property(e => e.InCancelTime)
                .HasColumnType("datetime")
                .HasColumnName("IN_CANCEL_TIME");
            entity.Property(e => e.InCompany)
                .HasMaxLength(256)
                .HasColumnName("IN_COMPANY");
            entity.Property(e => e.InCreator)
                .HasMaxLength(128)
                .HasColumnName("IN_CREATOR");
            entity.Property(e => e.InCreatorSno)
                .HasMaxLength(32)
                .HasColumnName("IN_CREATOR_SNO");
            entity.Property(e => e.InIndex)
                .HasMaxLength(32)
                .HasColumnName("IN_INDEX");
            entity.Property(e => e.InL1)
                .HasMaxLength(128)
                .HasColumnName("IN_L1");
            entity.Property(e => e.InL2)
                .HasMaxLength(128)
                .HasColumnName("IN_L2");
            entity.Property(e => e.InL3)
                .HasMaxLength(128)
                .HasColumnName("IN_L3");
            entity.Property(e => e.InMuid)
                .HasMaxLength(64)
                .HasColumnName("IN_MUID");
            entity.Property(e => e.InName)
                .HasMaxLength(32)
                .HasColumnName("IN_NAME");
            entity.Property(e => e.InNewLevels)
                .HasMaxLength(128)
                .HasColumnName("IN_NEW_LEVELS");
            entity.Property(e => e.InOldSections)
                .HasMaxLength(128)
                .HasColumnName("IN_OLD_SECTIONS");
            entity.Property(e => e.InPayAmount).HasColumnName("IN_PAY_AMOUNT");
            entity.Property(e => e.InRefundAmount).HasColumnName("IN_REFUND_AMOUNT");
            entity.Property(e => e.InRegdate)
                .HasColumnType("datetime")
                .HasColumnName("IN_REGDATE");
            entity.Property(e => e.InSectionName)
                .HasMaxLength(64)
                .HasColumnName("IN_SECTION_NAME");
            entity.Property(e => e.InSno)
                .HasMaxLength(32)
                .HasColumnName("IN_SNO");
            entity.Property(e => e.InTeamIndex)
                .HasMaxLength(32)
                .HasColumnName("IN_TEAM_INDEX");
            entity.Property(e => e.InVerifyById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_VERIFY_BY_ID");
            entity.Property(e => e.InVerifyMemo)
                .HasMaxLength(200)
                .HasColumnName("IN_VERIFY_MEMO");
            entity.Property(e => e.InVerifyTime)
                .HasColumnType("datetime")
                .HasColumnName("IN_VERIFY_TIME");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<InMeetingPay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk3744");

            entity.ToTable("IN_MEETING_PAY");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InAddTime)
                .HasColumnType("datetime")
                .HasColumnName("IN_ADD_TIME");
            entity.Property(e => e.InClaMeeting)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_CLA_MEETING");
            entity.Property(e => e.InCode1)
                .HasMaxLength(20)
                .HasColumnName("IN_CODE_1");
            entity.Property(e => e.InCode2)
                .HasMaxLength(20)
                .HasColumnName("IN_CODE_2");
            entity.Property(e => e.InCode3)
                .HasMaxLength(20)
                .HasColumnName("IN_CODE_3");
            entity.Property(e => e.InCollectionAgency)
                .HasMaxLength(32)
                .HasColumnName("IN_COLLECTION_AGENCY");
            entity.Property(e => e.InCollectionDate)
                .HasColumnType("datetime")
                .HasColumnName("IN_COLLECTION_DATE");
            entity.Property(e => e.InCompany)
                .HasMaxLength(256)
                .HasColumnName("IN_COMPANY");
            entity.Property(e => e.InCreator)
                .HasMaxLength(128)
                .HasColumnName("IN_CREATOR");
            entity.Property(e => e.InCreatorSno)
                .HasMaxLength(32)
                .HasColumnName("IN_CREATOR_SNO");
            entity.Property(e => e.InCreditDate)
                .HasColumnType("datetime")
                .HasColumnName("IN_CREDIT_DATE");
            entity.Property(e => e.InCurrentOrg)
                .HasMaxLength(32)
                .HasColumnName("IN_CURRENT_ORG");
            entity.Property(e => e.InEdi0)
                .HasMaxLength(128)
                .HasColumnName("IN_EDI_0");
            entity.Property(e => e.InEdi1)
                .HasMaxLength(128)
                .HasColumnName("IN_EDI_1");
            entity.Property(e => e.InFeeAmount).HasColumnName("IN_FEE_AMOUNT");
            entity.Property(e => e.InGroup)
                .HasMaxLength(128)
                .HasColumnName("IN_GROUP");
            entity.Property(e => e.InMeeting)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_MEETING");
            entity.Property(e => e.InMeetingVirtual)
                .HasMaxLength(10)
                .HasColumnName("IN_MEETING_VIRTUAL");
            entity.Property(e => e.InPayAmountExp).HasColumnName("IN_PAY_AMOUNT_EXP");
            entity.Property(e => e.InPayAmountReal).HasColumnName("IN_PAY_AMOUNT_REAL");
            entity.Property(e => e.InPayDateExp)
                .HasColumnType("datetime")
                .HasColumnName("IN_PAY_DATE_EXP");
            entity.Property(e => e.InPayDateExp1)
                .HasColumnType("datetime")
                .HasColumnName("IN_PAY_DATE_EXP1");
            entity.Property(e => e.InPayDateReal)
                .HasColumnType("datetime")
                .HasColumnName("IN_PAY_DATE_REAL");
            entity.Property(e => e.InPayPhoto)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_PAY_PHOTO");
            entity.Property(e => e.InRealItems)
                .HasMaxLength(32)
                .HasColumnName("IN_REAL_ITEMS");
            entity.Property(e => e.InRealPlayer).HasColumnName("IN_REAL_PLAYER");
            entity.Property(e => e.InRealStuff).HasColumnName("IN_REAL_STUFF");
            entity.Property(e => e.InRefundAmount).HasColumnName("IN_REFUND_AMOUNT");
            entity.Property(e => e.InReturnMark)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_RETURN_MARK");
            entity.Property(e => e.InStuffB1)
                .HasMaxLength(32)
                .HasColumnName("IN_STUFF_B1");
            entity.Property(e => e.InWriteNote)
                .HasMaxLength(128)
                .HasColumnName("IN_WRITE_NOTE");
            entity.Property(e => e.IndexNumber)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("INDEX_NUMBER");
            entity.Property(e => e.InvoiceUp)
                .HasMaxLength(128)
                .HasColumnName("INVOICE_UP");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MoneyTransfer1)
                .HasMaxLength(6)
                .HasColumnName("MONEY_TRANSFER_1");
            entity.Property(e => e.MoneyTransfer10)
                .HasMaxLength(60)
                .HasColumnName("MONEY_TRANSFER_10");
            entity.Property(e => e.MoneyTransfer2)
                .HasMaxLength(16)
                .HasColumnName("MONEY_TRANSFER_2");
            entity.Property(e => e.MoneyTransfer3)
                .HasMaxLength(8)
                .HasColumnName("MONEY_TRANSFER_3");
            entity.Property(e => e.MoneyTransfer4)
                .HasMaxLength(6)
                .HasColumnName("MONEY_TRANSFER_4");
            entity.Property(e => e.MoneyTransfer5)
                .HasMaxLength(14)
                .HasColumnName("MONEY_TRANSFER_5");
            entity.Property(e => e.MoneyTransfer6)
                .HasMaxLength(1)
                .HasColumnName("MONEY_TRANSFER_6");
            entity.Property(e => e.MoneyTransfer7)
                .HasMaxLength(2)
                .HasColumnName("MONEY_TRANSFER_7");
            entity.Property(e => e.MoneyTransfer8)
                .HasMaxLength(8)
                .HasColumnName("MONEY_TRANSFER_8");
            entity.Property(e => e.MoneyTransfer9)
                .HasMaxLength(3)
                .HasColumnName("MONEY_TRANSFER_9");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PayBool)
                .HasMaxLength(32)
                .HasColumnName("PAY_BOOL");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RecNumber)
                .HasMaxLength(32)
                .HasColumnName("REC_NUMBER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UniformNumbers)
                .HasMaxLength(128)
                .HasColumnName("UNIFORM_NUMBERS");
        });

        modelBuilder.Entity<InMeetingPayDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk3745");

            entity.ToTable("IN_MEETING_PAY_DAY");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InCompany)
                .HasMaxLength(256)
                .HasColumnName("IN_COMPANY");
            entity.Property(e => e.InEdiFile).HasColumnName("IN_EDI_FILE");
            entity.Property(e => e.InEdiName)
                .HasMaxLength(32)
                .HasColumnName("IN_EDI_NAME");
            entity.Property(e => e.InPayDateReal)
                .HasColumnType("datetime")
                .HasColumnName("IN_PAY_DATE_REAL");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<InUserPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk3747");

            entity.ToTable("IN_USER_PAYMENT");

            entity.HasIndex(e => e.ItemNumber, "IND3756");

            entity.HasIndex(e => e.ItemNumber, "un3757").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InAddTime)
                .HasColumnType("datetime")
                .HasColumnName("IN_ADD_TIME");
            entity.Property(e => e.InCode1)
                .HasMaxLength(20)
                .HasColumnName("IN_CODE_1");
            entity.Property(e => e.InCode2)
                .HasMaxLength(20)
                .HasColumnName("IN_CODE_2");
            entity.Property(e => e.InCode3)
                .HasMaxLength(20)
                .HasColumnName("IN_CODE_3");
            entity.Property(e => e.InCollectionAgency)
                .HasMaxLength(32)
                .HasColumnName("IN_COLLECTION_AGENCY");
            entity.Property(e => e.InCollectionDate)
                .HasColumnType("datetime")
                .HasColumnName("IN_COLLECTION_DATE");
            entity.Property(e => e.InCompany)
                .HasMaxLength(256)
                .HasColumnName("IN_COMPANY");
            entity.Property(e => e.InCreator)
                .HasMaxLength(128)
                .HasColumnName("IN_CREATOR");
            entity.Property(e => e.InCreatorSno)
                .HasMaxLength(32)
                .HasColumnName("IN_CREATOR_SNO");
            entity.Property(e => e.InCreditDate)
                .HasColumnType("datetime")
                .HasColumnName("IN_CREDIT_DATE");
            entity.Property(e => e.InCurrentOrg)
                .HasMaxLength(32)
                .HasColumnName("IN_CURRENT_ORG");
            entity.Property(e => e.InEdi0)
                .HasMaxLength(128)
                .HasColumnName("IN_EDI_0");
            entity.Property(e => e.InEdi1)
                .HasMaxLength(128)
                .HasColumnName("IN_EDI_1");
            entity.Property(e => e.InFeeAmount).HasColumnName("IN_FEE_AMOUNT");
            entity.Property(e => e.InGroup)
                .HasMaxLength(128)
                .HasColumnName("IN_GROUP");
            entity.Property(e => e.InMeetingVirtual)
                .HasMaxLength(10)
                .HasColumnName("IN_MEETING_VIRTUAL");
            entity.Property(e => e.InPayAmountExp).HasColumnName("IN_PAY_AMOUNT_EXP");
            entity.Property(e => e.InPayAmountReal).HasColumnName("IN_PAY_AMOUNT_REAL");
            entity.Property(e => e.InPayDateExp)
                .HasColumnType("datetime")
                .HasColumnName("IN_PAY_DATE_EXP");
            entity.Property(e => e.InPayDateExp1)
                .HasColumnType("datetime")
                .HasColumnName("IN_PAY_DATE_EXP1");
            entity.Property(e => e.InPayDateReal)
                .HasColumnType("datetime")
                .HasColumnName("IN_PAY_DATE_REAL");
            entity.Property(e => e.InPayPhoto)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_PAY_PHOTO");
            entity.Property(e => e.InRealItems)
                .HasMaxLength(32)
                .HasColumnName("IN_REAL_ITEMS");
            entity.Property(e => e.InRealPlayer).HasColumnName("IN_REAL_PLAYER");
            entity.Property(e => e.InRefundAmount).HasColumnName("IN_REFUND_AMOUNT");
            entity.Property(e => e.InReturnMark)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_RETURN_MARK");
            entity.Property(e => e.InSourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_SOURCE_ID");
            entity.Property(e => e.InWriteNote)
                .HasMaxLength(128)
                .HasColumnName("IN_WRITE_NOTE");
            entity.Property(e => e.IndexNumber)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("INDEX_NUMBER");
            entity.Property(e => e.InvoiceUp)
                .HasMaxLength(128)
                .HasColumnName("INVOICE_UP");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MoneyTransfer1)
                .HasMaxLength(6)
                .HasColumnName("MONEY_TRANSFER_1");
            entity.Property(e => e.MoneyTransfer10)
                .HasMaxLength(60)
                .HasColumnName("MONEY_TRANSFER_10");
            entity.Property(e => e.MoneyTransfer2)
                .HasMaxLength(16)
                .HasColumnName("MONEY_TRANSFER_2");
            entity.Property(e => e.MoneyTransfer3)
                .HasMaxLength(8)
                .HasColumnName("MONEY_TRANSFER_3");
            entity.Property(e => e.MoneyTransfer4)
                .HasMaxLength(6)
                .HasColumnName("MONEY_TRANSFER_4");
            entity.Property(e => e.MoneyTransfer5)
                .HasMaxLength(14)
                .HasColumnName("MONEY_TRANSFER_5");
            entity.Property(e => e.MoneyTransfer6)
                .HasMaxLength(1)
                .HasColumnName("MONEY_TRANSFER_6");
            entity.Property(e => e.MoneyTransfer7)
                .HasMaxLength(2)
                .HasColumnName("MONEY_TRANSFER_7");
            entity.Property(e => e.MoneyTransfer8)
                .HasMaxLength(8)
                .HasColumnName("MONEY_TRANSFER_8");
            entity.Property(e => e.MoneyTransfer9)
                .HasMaxLength(3)
                .HasColumnName("MONEY_TRANSFER_9");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PayBool)
                .HasMaxLength(32)
                .HasColumnName("PAY_BOOL");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RecNumber)
                .HasMaxLength(32)
                .HasColumnName("REC_NUMBER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UniformNumbers)
                .HasMaxLength(128)
                .HasColumnName("UNIFORM_NUMBERS");
        });

        modelBuilder.Entity<InUserPaymentInvoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk3752");

            entity.ToTable("IN_USER_PAYMENT_INVOICE");

            entity.HasIndex(e => e.SourceId, "IND3753");

            entity.HasIndex(e => e.RelatedId, "IND3754");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InCompany)
                .HasMaxLength(256)
                .HasColumnName("IN_COMPANY");
            entity.Property(e => e.InvoiceAmount).HasColumnName("INVOICE_AMOUNT");
            entity.Property(e => e.InvoiceUp)
                .HasMaxLength(64)
                .HasColumnName("INVOICE_UP");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TitleIndex).HasColumnName("TITLE_INDEX");
            entity.Property(e => e.UniformNumbers)
                .HasMaxLength(64)
                .HasColumnName("UNIFORM_NUMBERS");

            entity.HasOne(d => d.Source).WithMany(p => p.InUserPaymentInvoices)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("fk3755");
        });

        modelBuilder.Entity<InUserPaymentItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk3748");

            entity.ToTable("IN_USER_PAYMENT_ITEMS");

            entity.HasIndex(e => e.SourceId, "IND3749");

            entity.HasIndex(e => e.RelatedId, "IND3750");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InAnsL3)
                .HasMaxLength(256)
                .HasColumnName("IN_ANS_L3");
            entity.Property(e => e.InCancelById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_CANCEL_BY_ID");
            entity.Property(e => e.InCancelMemo)
                .HasMaxLength(200)
                .HasColumnName("IN_CANCEL_MEMO");
            entity.Property(e => e.InCancelStatus)
                .HasMaxLength(32)
                .HasColumnName("IN_CANCEL_STATUS");
            entity.Property(e => e.InCancelTime)
                .HasColumnType("datetime")
                .HasColumnName("IN_CANCEL_TIME");
            entity.Property(e => e.InCompany)
                .HasMaxLength(32)
                .HasColumnName("IN_COMPANY");
            entity.Property(e => e.InCreator)
                .HasMaxLength(128)
                .HasColumnName("IN_CREATOR");
            entity.Property(e => e.InCreatorSno)
                .HasMaxLength(32)
                .HasColumnName("IN_CREATOR_SNO");
            entity.Property(e => e.InIndex)
                .HasMaxLength(32)
                .HasColumnName("IN_INDEX");
            entity.Property(e => e.InL1)
                .HasMaxLength(128)
                .HasColumnName("IN_L1");
            entity.Property(e => e.InL2)
                .HasMaxLength(128)
                .HasColumnName("IN_L2");
            entity.Property(e => e.InL3)
                .HasMaxLength(128)
                .HasColumnName("IN_L3");
            entity.Property(e => e.InMuid)
                .HasMaxLength(32)
                .HasColumnName("IN_MUID");
            entity.Property(e => e.InName)
                .HasMaxLength(128)
                .HasColumnName("IN_NAME");
            entity.Property(e => e.InNewLevels)
                .HasMaxLength(128)
                .HasColumnName("IN_NEW_LEVELS");
            entity.Property(e => e.InOldSections)
                .HasMaxLength(128)
                .HasColumnName("IN_OLD_SECTIONS");
            entity.Property(e => e.InPayAmount).HasColumnName("IN_PAY_AMOUNT");
            entity.Property(e => e.InRefundAmount).HasColumnName("IN_REFUND_AMOUNT");
            entity.Property(e => e.InRegdate)
                .HasColumnType("datetime")
                .HasColumnName("IN_REGDATE");
            entity.Property(e => e.InSectionName)
                .HasMaxLength(64)
                .HasColumnName("IN_SECTION_NAME");
            entity.Property(e => e.InSno)
                .HasMaxLength(32)
                .HasColumnName("IN_SNO");
            entity.Property(e => e.InTeamIndex)
                .HasMaxLength(32)
                .HasColumnName("IN_TEAM_INDEX");
            entity.Property(e => e.InVerifyById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IN_VERIFY_BY_ID");
            entity.Property(e => e.InVerifyMemo)
                .HasMaxLength(200)
                .HasColumnName("IN_VERIFY_MEMO");
            entity.Property(e => e.InVerifyTime)
                .HasColumnType("datetime")
                .HasColumnName("IN_VERIFY_TIME");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.InUserPaymentItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("fk3751");
        });

        modelBuilder.Entity<InUserPaymentSourcetype>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IN_USER_PAYMENT_SOURCETYPE");

            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("allow_private_permission");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("auto_search");
            entity.Property(e => e.CacheQuery).HasColumnName("cache_query");
            entity.Property(e => e.ClassStructure).HasColumnName("class_structure");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("classification");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("close_icon");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("config_id");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("core");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("created_by_id");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("created_on");
            entity.Property(e => e.Css).HasColumnName("css");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("current_state");
            entity.Property(e => e.DefaultPageSize).HasColumnName("default_page_size");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("enforce_discovery");
            entity.Property(e => e.Generation).HasColumnName("generation");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("help_item");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("help_url");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("hide_where_used");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("history_template");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.ImplementationDdl).HasColumnName("implementation_ddl");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasColumnName("implementation_type");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("instance_data");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("is_current");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("is_dependent");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("is_relationship");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("is_released");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("is_versionable");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("keyed_name");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("label");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("label_plural");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("large_icon");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("locked_by_id");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("major_rev");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("managed_by_id");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("manual_versioning");
            entity.Property(e => e.Maxrecords).HasColumnName("maxrecords");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("minor_rev");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("modified_by_id");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("modified_on");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("name");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("new_version");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("not_lockable");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("open_icon");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("owned_by_id");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("permission_id");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("revisions");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasColumnName("show_parameters_tab");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("state");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasColumnName("structure_view");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("team_id");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("unlock_on_logout");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("use_src_access");
        });

        modelBuilder.Entity<InbasketTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("INBASKET_TASK");

            entity.Property(e => e.AssignedTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ASSIGNED_TO");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Container)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER");
            entity.Property(e => e.ContainerTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER_TYPE_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("DUE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("ICON");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Instructions)
                .HasMaxLength(1024)
                .HasColumnName("INSTRUCTIONS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Item)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LanguageCodeFilter)
                .HasMaxLength(3)
                .HasColumnName("LANGUAGE_CODE_FILTER");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MyAssignment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MY_ASSIGNMENT");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("START_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<InheritedServerEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__INHERITE__3214EC2722D76312");

            entity.ToTable("INHERITED_SERVER_EVENTS");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.InheritedServerEvents)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__INHERITED__SOURC__5E0AE686");
        });

        modelBuilder.Entity<ItemAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEM_ACT__3214EC27347A9B8E");

            entity.ToTable("ITEM_ACTION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ItemActions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ITEM_ACTI__RELAT__1D314762");

            entity.HasOne(d => d.Source).WithMany(p => p.ItemActions)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ITEM_ACTI__SOURC__1C3D2329");
        });

        modelBuilder.Entity<ItemReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEM_REP__3214EC27A673F9A6");

            entity.ToTable("ITEM_REPORT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ItemReports)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ITEM_REPO__RELAT__168449D3");

            entity.HasOne(d => d.Source).WithMany(p => p.ItemReports)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ITEM_REPO__SOURC__1590259A");
        });

        modelBuilder.Entity<Itemtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEMTYPE__3214EC277FB06D07");

            entity.ToTable("ITEMTYPE");

            entity.HasIndex(e => e.Name, "C65").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ALLOW_PRIVATE_PERMISSION");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.CacheQuery).HasColumnName("CACHE_QUERY");
            entity.Property(e => e.ClassStructure).HasColumnName("CLASS_STRUCTURE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("CLOSE_ICON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENFORCE_DISCOVERY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_WHERE_USED");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.ImplementationDdl).HasColumnName("IMPLEMENTATION_DDL");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'table')")
                .HasColumnName("IMPLEMENTATION_TYPE");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("INSTANCE_DATA");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEPENDENT");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_RELATIONSHIP");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VERSIONABLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("LABEL_PLURAL");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("LARGE_ICON");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("MANUAL_VERSIONING");
            entity.Property(e => e.Maxrecords).HasColumnName("MAXRECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("OPEN_ICON");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'7FE395DD8B9F4E1090756A34B733D75E')")
                .IsFixedLength()
                .HasColumnName("REVISIONS");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'1')")
                .HasColumnName("SHOW_PARAMETERS_TAB");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'tabs off')")
                .HasColumnName("STRUCTURE_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNLOCK_ON_LOGOUT");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_SRC_ACCESS");
        });

        modelBuilder.Entity<ItemtypeLifeCycle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITEMTYPE__3214EC2785F3FF77");

            entity.ToTable("ITEMTYPE_LIFE_CYCLE");

            entity.HasIndex(e => new { e.ClassPath, e.SourceId }, "C0").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ClassPath)
                .HasMaxLength(512)
                .HasColumnName("CLASS_PATH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ItemtypeLifeCycles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ITEMTYPE___RELAT__3F865F66");

            entity.HasOne(d => d.Source).WithMany(p => p.ItemtypeLifeCycles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ITEMTYPE___SOURC__3E923B2D");
        });

        modelBuilder.Entity<Itpresentationconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ITPRESEN__3214EC27E6D073C2");

            entity.ToTable("ITPRESENTATIONCONFIGURATION");

            entity.HasIndex(e => new { e.Client, e.SourceId }, "C20").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Itpresentationconfigurations)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__ITPRESENT__RELAT__5FF32EF8");

            entity.HasOne(d => d.Source).WithMany(p => p.Itpresentationconfigurations)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__ITPRESENT__SOURC__5EFF0ABF");
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LANGUAGE__3214EC27CF66263E");

            entity.ToTable("LANGUAGE");

            entity.HasIndex(e => e.Suffix, "C32").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Code)
                .HasMaxLength(3)
                .HasColumnName("CODE");
            entity.Property(e => e.Collation)
                .HasMaxLength(64)
                .HasColumnName("COLLATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Direction)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'ltr')")
                .HasColumnName("DIRECTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Suffix)
                .HasMaxLength(4)
                .HasColumnName("SUFFIX");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<LifeCycleMap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LIFE_CYC__3214EC270BC02D72");

            entity.ToTable("LIFE_CYCLE_MAP");

            entity.HasIndex(e => e.Name, "C48").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.StartState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("START_STATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<LifeCycleState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LIFE_CYC__3214EC2732205C3C");

            entity.ToTable("LIFE_CYCLE_STATE");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C21").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.SourceId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.Image)
                .HasMaxLength(128)
                .HasColumnName("IMAGE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemBehavior)
                .HasMaxLength(64)
                .HasColumnName("ITEM_BEHAVIOR");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SetIsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SET_IS_RELEASED");
            entity.Property(e => e.SetNotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SET_NOT_LOCKABLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StatePermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATE_PERMISSION_ID");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Workflow)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WORKFLOW");

            entity.HasOne(d => d.Source).WithMany(p => p.LifeCycleStates)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LIFE_CYCL__SOURC__60E75331");
        });

        modelBuilder.Entity<LifeCycleTransition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LIFE_CYC__3214EC27605CA2AB");

            entity.ToTable("LIFE_CYCLE_TRANSITION");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FromState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GetComment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GET_COMMENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PostAction)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("POST_ACTION");
            entity.Property(e => e.PreAction)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PRE_ACTION");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.Segments)
                .HasMaxLength(128)
                .HasColumnName("SEGMENTS");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ToState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TO_STATE");

            entity.HasOne(d => d.Source).WithMany(p => p.LifeCycleTransitions)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LIFE_CYCL__SOURC__61DB776A");
        });

        modelBuilder.Entity<List>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LIST__3214EC2774181E12");

            entity.ToTable("LIST");

            entity.HasIndex(e => e.Name, "C6").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Locale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LOCALE__3214EC276505D834");

            entity.ToTable("LOCALE");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Code)
                .HasMaxLength(6)
                .HasColumnName("CODE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Language)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LANGUAGE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Located>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LOCATED__3214EC27F9C0F1CF");

            entity.ToTable("LOCATED");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileVersion)
                .HasDefaultValueSql("((1))")
                .HasColumnName("FILE_VERSION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Locateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__LOCATED__RELATED__63C3BFDC");

            entity.HasOne(d => d.Source).WithMany(p => p.Locateds)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LOCATED__SOURCE___62CF9BA3");
        });

        modelBuilder.Entity<Lockeditem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LOCKEDIT__3214EC271A3125D1");

            entity.ToTable("LOCKEDITEMS");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => e.RelatedId, "IX_lockeditems_related_id_with_source_id_source_type");

            entity.HasIndex(e => new { e.SourceId, e.SourceType }, "IX_lockeditems_source_id_source_type");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Lockeditems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__LOCKEDITE__RELAT__0DEF03D2");
        });

        modelBuilder.Entity<Lockeduser>(entity =>
        {
            entity.HasKey(e => new { e.LoginName, e.Key });

            entity.ToTable("LOCKEDUSER", "application");

            entity.HasIndex(e => e.ExpiredOn, "I0");

            entity.Property(e => e.LoginName)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOGIN_NAME");
            entity.Property(e => e.Key)
                .HasMaxLength(64)
                .HasColumnName("KEY");
            entity.Property(e => e.ExpiredOn)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRED_ON");
            entity.Property(e => e.FailedAttempts).HasColumnName("FAILED_ATTEMPTS");
        });

        modelBuilder.Entity<Manufacturer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC27A4DE060C");

            entity.ToTable("MANUFACTURER");

            entity.HasIndex(e => e.Name, "C82").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Address)
                .HasMaxLength(256)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.AddressState)
                .HasMaxLength(64)
                .HasColumnName("ADDRESS_STATE");
            entity.Property(e => e.City)
                .HasMaxLength(64)
                .HasColumnName("CITY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(64)
                .HasColumnName("CONTACT_NAME");
            entity.Property(e => e.Country)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MainFax)
                .HasMaxLength(32)
                .HasColumnName("MAIN_FAX");
            entity.Property(e => e.MainPhone)
                .HasMaxLength(32)
                .HasColumnName("MAIN_PHONE");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WebSite)
                .HasMaxLength(128)
                .HasColumnName("WEB_SITE");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(32)
                .HasColumnName("ZIP_CODE");
        });

        modelBuilder.Entity<ManufacturerManfPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC274EA4D15B");

            entity.ToTable("MANUFACTURER_MANF_PART");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ManufacturerManfParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MANUFACTU__SOURC__1431ED0D");
        });

        modelBuilder.Entity<ManufacturerPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC27037FB230");

            entity.ToTable("MANUFACTURER_PART");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasFiles)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_FILES");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANUFACTURER");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Unit)
                .HasMaxLength(64)
                .HasColumnName("UNIT");
            entity.Property(e => e.UnitPrice)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("UNIT_PRICE");
        });

        modelBuilder.Entity<ManufacturerPartFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC2740A5D989");

            entity.ToTable("MANUFACTURER_PART_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ManufacturerPartFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MANUFACTU__RELAT__161A357F");

            entity.HasOne(d => d.Source).WithMany(p => p.ManufacturerPartFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MANUFACTU__SOURC__15261146");
        });

        modelBuilder.Entity<ManufacturerPartPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MANUFACT__3214EC2737CAF095");

            entity.ToTable("MANUFACTURER_PART_PART");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ManufacturerPartParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MANUFACTU__SOURC__170E59B8");
        });

        modelBuilder.Entity<MeasurementUnit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MEASUREM__3214EC27E3C475DE");

            entity.ToTable("MEASUREMENT_UNIT");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Abbreviation)
                .HasMaxLength(8)
                .HasColumnName("ABBREVIATION");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RatioToInch).HasColumnName("RATIO_TO_INCH");
            entity.Property(e => e.Sequence).HasColumnName("SEQUENCE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Unit)
                .HasMaxLength(32)
                .HasColumnName("UNIT");
            entity.Property(e => e.Units)
                .HasMaxLength(32)
                .HasColumnName("UNITS");
            entity.Property(e => e.Viewer)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VIEWER");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MEMBER__3214EC274691328A");

            entity.ToTable("MEMBER");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("END_DATE");
            entity.Property(e => e.FromDate)
                .HasColumnType("datetime")
                .HasColumnName("FROM_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.MemberRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MEMBER__RELATED___65AC084E");

            entity.HasOne(d => d.Source).WithMany(p => p.MemberSources)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__MEMBER__SOURCE_I__64B7E415");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MESSAGE__3214EC2715181F73");

            entity.ToTable("MESSAGE");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Acknowledge)
                .HasMaxLength(64)
                .HasColumnName("ACKNOWLEDGE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.CustomHtml).HasColumnName("CUSTOM_HTML");
            entity.Property(e => e.ExitButtonLabel)
                .HasMaxLength(64)
                .HasColumnName("EXIT_BUTTON_LABEL");
            entity.Property(e => e.ExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRATION_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("ICON");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsStandardTemplate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'')")
                .IsFixedLength()
                .HasColumnName("IS_STANDARD_TEMPLATE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MessageNumber)
                .HasMaxLength(256)
                .HasColumnName("MESSAGE_NUMBER");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OkButtonLabel)
                .HasMaxLength(64)
                .HasColumnName("OK_BUTTON_LABEL");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ShowExitButton)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHOW_EXIT_BUTTON");
            entity.Property(e => e.ShowOkButton)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SHOW_OK_BUTTON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Text)
                .HasMaxLength(2048)
                .HasColumnName("TEXT");
            entity.Property(e => e.Title)
                .HasMaxLength(256)
                .HasColumnName("TITLE");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
            entity.Property(e => e.Url)
                .HasMaxLength(1024)
                .HasColumnName("URL");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<MessageAcknowledgement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MESSAGE___3214EC2797586173");

            entity.ToTable("MESSAGE_ACKNOWLEDGEMENT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.MessageAcknowledgements)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MESSAGE_A__RELAT__1A1FD08D");

            entity.HasOne(d => d.Source).WithMany(p => p.MessageAcknowledgements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MESSAGE_A__SOURC__192BAC54");
        });

        modelBuilder.Entity<Method>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__METHOD__3214EC27FBC2C25D");

            entity.ToTable("METHOD");

            entity.HasIndex(e => new { e.Name, e.ArasUniquenessHelper }, "C7").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_METHOD_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.ExecutionAllowedTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'A73B655731924CD0B027E4F4D5FCC0A9')")
                .IsFixedLength()
                .HasColumnName("EXECUTION_ALLOWED_TO");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MethodCode).HasColumnName("METHOD_CODE");
            entity.Property(e => e.MethodLocation)
                .HasMaxLength(64)
                .HasColumnName("METHOD_LOCATION");
            entity.Property(e => e.MethodType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'JavaScript')")
                .HasColumnName("METHOD_TYPE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Metric>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__METRIC__3214EC27D51A8AE2");

            entity.ToTable("METRIC");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COLOR");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Frequency)
                .HasMaxLength(64)
                .HasColumnName("FREQUENCY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.Link).HasColumnName("LINK");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Stylesheet).HasColumnName("STYLESHEET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<MetricValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__METRIC_V__3214EC27636D7CAC");

            entity.ToTable("METRIC_VALUE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Calculate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CALCULATE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COLOR");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.Link)
                .HasMaxLength(512)
                .HasColumnName("LINK");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Query).HasColumnName("QUERY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value).HasColumnName("VALUE");

            entity.HasOne(d => d.Source).WithMany(p => p.MetricValues)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__METRIC_VA__SOURC__1372D2FE");
        });

        modelBuilder.Entity<Model>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MODEL__3214EC27D3386743");

            entity.ToTable("MODEL");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PartNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PART_NUMBER");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReleaseNumber)
                .HasMaxLength(16)
                .HasColumnName("RELEASE_NUMBER");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VersionNumber)
                .HasMaxLength(16)
                .HasColumnName("VERSION_NUMBER");

            entity.HasOne(d => d.Source).WithMany(p => p.Models)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MODEL__SOURCE_ID__18027DF1");
        });

        modelBuilder.Entity<Morphae>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MORPHAE__3214EC27A3991005");

            entity.ToTable("MORPHAE");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.ImplementationOrder).HasColumnName("IMPLEMENTATION_ORDER");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.MorphaeRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__MORPHAE__RELATED__679450C0");

            entity.HasOne(d => d.Source).WithMany(p => p.MorphaeSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__MORPHAE__SOURCE___66A02C87");
        });

        modelBuilder.Entity<Myreport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MYREPORT__3214EC2713DFAC68");

            entity.ToTable("MYREPORTS");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<OldPassword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OLD_PASS__3214EC276A286315");

            entity.ToTable("OLD_PASSWORD");

            entity.HasIndex(e => new { e.OldPwd, e.SourceId }, "C29").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OldPwd)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLD_PWD");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.OldPasswords)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__OLD_PASSW__SOURC__688874F9");
        });

        modelBuilder.Entity<Packagedefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGED__3214EC274F787786");

            entity.ToTable("PACKAGEDEFINITION");

            entity.HasIndex(e => e.Name, "C8").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Packagedependson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGED__3214EC27DE212A5D");

            entity.ToTable("PACKAGEDEPENDSON");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Packagedependsons)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PACKAGEDE__SOURC__697C9932");
        });

        modelBuilder.Entity<Packageelement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGEE__3214EC27AC56B4F4");

            entity.ToTable("PACKAGEELEMENT");

            entity.HasIndex(e => e.ElementId, "C23").IsUnique();

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.ElementId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ElementId)
                .HasMaxLength(32)
                .HasColumnName("ELEMENT_ID");
            entity.Property(e => e.ElementType)
                .HasMaxLength(32)
                .HasColumnName("ELEMENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Packageelements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PACKAGEEL__SOURC__005FFE8A");
        });

        modelBuilder.Entity<Packagegroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGEG__3214EC27ABC0D68F");

            entity.ToTable("PACKAGEGROUP");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Packagegroups)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PACKAGEGR__SOURC__6A70BD6B");
        });

        modelBuilder.Entity<Packagereferencedelement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PACKAGER__3214EC274F42473D");

            entity.ToTable("PACKAGEREFERENCEDELEMENT");

            entity.HasIndex(e => new { e.ElementId, e.SourceId }, "C24").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ElementDescription)
                .HasMaxLength(128)
                .HasColumnName("ELEMENT_DESCRIPTION");
            entity.Property(e => e.ElementId)
                .HasMaxLength(32)
                .HasColumnName("ELEMENT_ID");
            entity.Property(e => e.ElementType)
                .HasMaxLength(32)
                .HasColumnName("ELEMENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Packagereferencedelements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PACKAGERE__SOURC__015422C3");
        });

        modelBuilder.Entity<Part>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART__3214EC2797BEBB19");

            entity.ToTable("PART");

            entity.HasIndex(e => new { e.ItemNumber, e.ArasUniquenessHelper }, "C83").IsUnique();

            entity.HasIndex(e => e.ExternalId, "I0");

            entity.HasIndex(e => e.ItemNumber, "I1");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_PART_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Cost)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("COST");
            entity.Property(e => e.CostBasis)
                .HasMaxLength(64)
                .HasColumnName("COST_BASIS");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HasChangePending)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HAS_CHANGE_PENDING");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.MakeBuy)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Make')")
                .HasColumnName("MAKE_BUY");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(128)
                .HasColumnName("THUMBNAIL");
            entity.Property(e => e.Unit)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'EA')")
                .HasColumnName("UNIT");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("WEIGHT");
            entity.Property(e => e.WeightBasis)
                .HasMaxLength(64)
                .HasColumnName("WEIGHT_BASIS");
        });

        modelBuilder.Entity<PartAlternate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_ALT__3214EC274E581BAC");

            entity.ToTable("PART_ALTERNATE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartAlternateRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_ALTE__RELAT__19EAC663");

            entity.HasOne(d => d.Source).WithMany(p => p.PartAlternateSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_ALTE__SOURC__18F6A22A");
        });

        modelBuilder.Entity<PartAml>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_AML__3214EC2763915001");

            entity.ToTable("PART_AML");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartAmls)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_AML__RELATE__1BD30ED5");

            entity.HasOne(d => d.Source).WithMany(p => p.PartAmls)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_AML__SOURCE__1ADEEA9C");
        });

        modelBuilder.Entity<PartBom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_BOM__3214EC27A48A848C");

            entity.ToTable("PART_BOM");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((1))")
                .HasColumnName("QUANTITY");
            entity.Property(e => e.ReferenceDesignator)
                .HasMaxLength(128)
                .HasColumnName("REFERENCE_DESIGNATOR");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((0))")
                .HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartBomRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_BOM__RELATE__1DBB5747");

            entity.HasOne(d => d.Source).WithMany(p => p.PartBomSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_BOM__SOURCE__1CC7330E");
        });

        modelBuilder.Entity<PartCad>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_CAD__3214EC27CD83E1F6");

            entity.ToTable("PART_CAD");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartCads)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_CAD__RELATE__1FA39FB9");

            entity.HasOne(d => d.Source).WithMany(p => p.PartCads)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_CAD__SOURCE__1EAF7B80");
        });

        modelBuilder.Entity<PartChange>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_CHA__3214EC27862C8D5D");

            entity.ToTable("PART_CHANGES");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PartChanges)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_CHAN__SOURC__2097C3F2");
        });

        modelBuilder.Entity<PartDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_DOC__3214EC27A6758B18");

            entity.ToTable("PART_DOCUMENT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartDocuments)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_DOCU__RELAT__22800C64");

            entity.HasOne(d => d.Source).WithMany(p => p.PartDocuments)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_DOCU__SOURC__218BE82B");
        });

        modelBuilder.Entity<PartGoal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_GOA__3214EC27C2BAAE1A");

            entity.ToTable("PART_GOAL");

            entity.HasIndex(e => new { e.Goal, e.SourceId }, "C85").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActualValue)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("ACTUAL_VALUE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CalculatedValue)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("CALCULATED_VALUE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EstimatedValue)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("ESTIMATED_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Goal)
                .HasMaxLength(64)
                .HasColumnName("GOAL");
            entity.Property(e => e.GoalComments)
                .HasMaxLength(512)
                .HasColumnName("GOAL_COMMENTS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TargetValue)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("TARGET_VALUE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PartGoals)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_GOAL__SOURC__2374309D");
        });

        modelBuilder.Entity<PartMultilevelBom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_MUL__3214EC2748363C3B");

            entity.ToTable("PART_MULTILEVEL_BOM");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PartMultilevelBoms)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_MULT__SOURC__246854D6");
        });

        modelBuilder.Entity<PartPsw>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_PSW__3214EC2701F3D328");

            entity.ToTable("PART_PSW");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PartPsws)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PART_PSW__RELATE__3E2826D9");

            entity.HasOne(d => d.Source).WithMany(p => p.PartPsws)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PART_PSW__SOURCE__3D3402A0");
        });

        modelBuilder.Entity<PartSubmissionWarrant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PART_SUB__3214EC27509D1515");

            entity.ToTable("PART_SUBMISSION_WARRANT");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AddEngChanges).HasColumnName("ADD_ENG_CHANGES");
            entity.Property(e => e.Application)
                .HasMaxLength(64)
                .HasColumnName("APPLICATION");
            entity.Property(e => e.Buyer)
                .HasMaxLength(32)
                .HasColumnName("BUYER");
            entity.Property(e => e.CaChangeLevel)
                .HasMaxLength(8)
                .HasColumnName("CA_CHANGE_LEVEL");
            entity.Property(e => e.CaDate)
                .HasColumnType("datetime")
                .HasColumnName("CA_DATE");
            entity.Property(e => e.CheckingAidNumber)
                .HasMaxLength(32)
                .HasColumnName("CHECKING_AID_NUMBER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CompanyInfo)
                .HasMaxLength(64)
                .HasColumnName("COMPANY_INFO");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(48)
                .HasColumnName("CUSTOMER_NAME");
            entity.Property(e => e.DiscrepancySubmission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISCREPANCY_SUBMISSION");
            entity.Property(e => e.DwgNumber)
                .HasMaxLength(32)
                .HasColumnName("DWG_NUMBER");
            entity.Property(e => e.EcnSubmission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ECN_SUBMISSION");
            entity.Property(e => e.EngChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("ENG_CHANGE_DATE");
            entity.Property(e => e.EngChangeLevel)
                .HasMaxLength(8)
                .HasColumnName("ENG_CHANGE_LEVEL");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IfOther).HasColumnName("IF_OTHER");
            entity.Property(e => e.InitialSubmission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INITIAL_SUBMISSION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LocationChange)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCATION_CHANGE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaterialChange)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MATERIAL_CHANGE");
            entity.Property(e => e.MfgLocation)
                .HasMaxLength(48)
                .HasColumnName("MFG_LOCATION");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OtherChange)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OTHER_CHANGE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PartName)
                .HasMaxLength(64)
                .HasColumnName("PART_NAME");
            entity.Property(e => e.PartNumber)
                .HasMaxLength(32)
                .HasColumnName("PART_NUMBER");
            entity.Property(e => e.PartProcessing)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PART_PROCESSING");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PlasticPartsIso)
                .HasMaxLength(64)
                .HasColumnName("PLASTIC_PARTS_ISO");
            entity.Property(e => e.PoNumber)
                .HasMaxLength(32)
                .HasColumnName("PO_NUMBER");
            entity.Property(e => e.PswNumber)
                .HasMaxLength(256)
                .HasColumnName("PSW_NUMBER");
            entity.Property(e => e.ResponsibleOfficial)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESPONSIBLE_OFFICIAL");
            entity.Property(e => e.RestrictedSubstances)
                .HasMaxLength(64)
                .HasColumnName("RESTRICTED_SUBSTANCES");
            entity.Property(e => e.ResultsAppearance)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESULTS_APPEARANCE");
            entity.Property(e => e.ResultsComments).HasColumnName("RESULTS_COMMENTS");
            entity.Property(e => e.ResultsDimensional)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESULTS_DIMENSIONAL");
            entity.Property(e => e.ResultsFunctional)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESULTS_FUNCTIONAL");
            entity.Property(e => e.ResultsSpecs)
                .HasMaxLength(64)
                .HasColumnName("RESULTS_SPECS");
            entity.Property(e => e.ResultsStatistical)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RESULTS_STATISTICAL");
            entity.Property(e => e.SafetyReqItem)
                .HasMaxLength(64)
                .HasColumnName("SAFETY_REQ_ITEM");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SubAppearance)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUB_APPEARANCE");
            entity.Property(e => e.SubDimensional)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUB_DIMENSIONAL");
            entity.Property(e => e.SubMaterials)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUB_MATERIALS");
            entity.Property(e => e.SubmissionLevel)
                .HasMaxLength(64)
                .HasColumnName("SUBMISSION_LEVEL");
            entity.Property(e => e.SupplierChange)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUPPLIER_CHANGE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ToolingInactiveSubmission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TOOLING_INACTIVE_SUBMISSION");
            entity.Property(e => e.ToolingSubmission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TOOLING_SUBMISSION");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<PeMainpreference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PE_MAINP__3214EC273F44FF39");

            entity.ToTable("PE_MAINPREFERENCES");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.ChangeTypeCadDocument)
                .HasMaxLength(32)
                .HasColumnName("CHANGE_TYPE_CAD_DOCUMENT");
            entity.Property(e => e.ChangeTypeDocument)
                .HasMaxLength(32)
                .HasColumnName("CHANGE_TYPE_DOCUMENT");
            entity.Property(e => e.ChangeTypePart)
                .HasMaxLength(32)
                .HasColumnName("CHANGE_TYPE_PART");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PeMainpreferences)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PE_MAINPR__SOURC__255C790F");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PERMISSI__3214EC27F8A1E288");

            entity.ToTable("PERMISSION");

            entity.HasIndex(e => e.Name, "C9").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsPrivate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_PRIVATE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<PmProjectcolormap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PM_PROJE__3214EC27409D6979");

            entity.ToTable("PM_PROJECTCOLORMAP");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActivityState)
                .HasMaxLength(64)
                .HasColumnName("ACTIVITY_STATE");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ComparisonDate)
                .HasMaxLength(64)
                .HasColumnName("COMPARISON_DATE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TargetDate)
                .HasMaxLength(64)
                .HasColumnName("TARGET_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PmProjectcolormaps)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PM_PROJEC__SOURC__3F1C4B12");
        });

        modelBuilder.Entity<PmProjectcolorperiod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PM_PROJE__3214EC278BD4AD56");

            entity.ToTable("PM_PROJECTCOLORPERIOD");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Color)
                .HasMaxLength(64)
                .HasColumnName("COLOR");
            entity.Property(e => e.ComparisonValue).HasColumnName("COMPARISON_VALUE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PmProjectcolorperiods)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PM_PROJEC__SOURC__532343BF");
        });

        modelBuilder.Entity<PmProjectcolumndescription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PM_PROJE__3214EC2716396444");

            entity.ToTable("PM_PROJECTCOLUMNDESCRIPTION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DataSource)
                .HasMaxLength(128)
                .HasColumnName("DATA_SOURCE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.RowType)
                .HasMaxLength(64)
                .HasColumnName("ROW_TYPE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PmProjectcolumndescriptions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PM_PROJEC__SOURC__541767F8");
        });

        modelBuilder.Entity<PmProjectgridlayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PM_PROJE__3214EC2741B5FA77");

            entity.ToTable("PM_PROJECTGRIDLAYOUT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsSystem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_SYSTEM");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Position).HasColumnName("POSITION");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Width).HasColumnName("WIDTH");

            entity.HasOne(d => d.Source).WithMany(p => p.PmProjectgridlayouts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PM_PROJEC__SOURC__40106F4B");
        });

        modelBuilder.Entity<PpapPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PPAP_PAC__3214EC275F8A0EE6");

            entity.ToTable("PPAP_PACKAGE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.PpapPackages)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PPAP_PACK__SOURC__41049384");
        });

        modelBuilder.Entity<Pr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PR__3214EC278A846AE9");

            entity.ToTable("PR");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.AffectedItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AFFECTED_ITEM");
            entity.Property(e => e.Basis)
                .HasMaxLength(64)
                .HasColumnName("BASIS");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Environment)
                .HasMaxLength(512)
                .HasColumnName("ENVIRONMENT");
            entity.Property(e => e.Events).HasColumnName("EVENTS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Impact).HasColumnName("IMPACT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PhaseCaused)
                .HasMaxLength(64)
                .HasColumnName("PHASE_CAUSED");
            entity.Property(e => e.PhaseFound)
                .HasMaxLength(64)
                .HasColumnName("PHASE_FOUND");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.ReportedBy)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPORTED_BY");
            entity.Property(e => e.Severity)
                .HasMaxLength(64)
                .HasColumnName("SEVERITY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Title)
                .HasMaxLength(128)
                .HasColumnName("TITLE");
            entity.Property(e => e.Verification).HasColumnName("VERIFICATION");
        });

        modelBuilder.Entity<PrFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PR_FILE__3214EC275C4403DB");

            entity.ToTable("PR_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PrFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PR_FILE__RELATED__2744C181");

            entity.HasOne(d => d.Source).WithMany(p => p.PrFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PR_FILE__SOURCE___26509D48");
        });

        modelBuilder.Entity<Predecessor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PREDECES__3214EC27EED78268");

            entity.ToTable("PREDECESSOR");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LeadLag).HasColumnName("LEAD_LAG");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PrecedenceType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Finish to Start')")
                .HasColumnName("PRECEDENCE_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.PredecessorRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PREDECESS__RELAT__42ECDBF6");

            entity.HasOne(d => d.Source).WithMany(p => p.PredecessorSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PREDECESS__SOURC__41F8B7BD");
        });

        modelBuilder.Entity<Preference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PREFEREN__3214EC27BC1D9CD7");

            entity.ToTable("PREFERENCE");

            entity.HasIndex(e => e.IdentityId, "C33").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IdentityId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IDENTITY_ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Preferencetabtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PREFEREN__3214EC27E685F42C");

            entity.ToTable("PREFERENCETABTYPES");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PreferenceTab)
                .HasMaxLength(32)
                .HasColumnName("PREFERENCE_TAB");
            entity.Property(e => e.PreferenceTabType1)
                .HasMaxLength(64)
                .HasColumnName("PREFERENCE_TAB_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Preferencetabtypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PREFERENC__SOURC__174363E2");
        });

        modelBuilder.Entity<Preferencetype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PREFEREN__3214EC2744C8FC78");

            entity.ToTable("PREFERENCETYPES");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Presentationcommandbarsection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PRESENTA__3214EC2746CDDFB5");

            entity.ToTable("PRESENTATIONCOMMANDBARSECTION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemClassification)
                .HasMaxLength(512)
                .HasColumnName("ITEM_CLASSIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Presentationcommandbarsections)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PRESENTAT__RELAT__39987BE6");

            entity.HasOne(d => d.Source).WithMany(p => p.Presentationcommandbarsections)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PRESENTAT__SOURC__38A457AD");
        });

        modelBuilder.Entity<Presentationconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PRESENTA__3214EC27C59B2936");

            entity.ToTable("PRESENTATIONCONFIGURATION");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SecondaryIcon)
                .HasMaxLength(128)
                .HasColumnName("SECONDARY_ICON");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Style).HasColumnName("STYLE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PRODUCT__3214EC270376EE4A");

            entity.ToTable("PRODUCT");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(32)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ProductInnovation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PRODUCT___3214EC27607A430B");

            entity.ToTable("PRODUCT_INNOVATION");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Program>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROGRAM__3214EC27A1DC00B2");

            entity.ToTable("PROGRAM");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Customer)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CUSTOMER");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ProgramProject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROGRAM___3214EC27D68B6F36");

            entity.ToTable("PROGRAM_PROJECT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ProgramProjects)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PROGRAM_P__RELAT__44D52468");

            entity.HasOne(d => d.Source).WithMany(p => p.ProgramProjects)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PROGRAM_P__SOURC__43E1002F");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROJECT__3214EC27AE55B1E1");

            entity.ToTable("PROJECT");

            entity.HasIndex(e => e.ProjectNumber, "C91").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DateDueAct)
                .HasColumnType("datetime")
                .HasColumnName("DATE_DUE_ACT");
            entity.Property(e => e.DateDueSched)
                .HasColumnType("datetime")
                .HasColumnName("DATE_DUE_SCHED");
            entity.Property(e => e.DateDueTarget)
                .HasColumnType("datetime")
                .HasColumnName("DATE_DUE_TARGET");
            entity.Property(e => e.DateStartAct)
                .HasColumnType("datetime")
                .HasColumnName("DATE_START_ACT");
            entity.Property(e => e.DateStartSched)
                .HasColumnType("datetime")
                .HasColumnName("DATE_START_SCHED");
            entity.Property(e => e.DateStartTarget)
                .HasColumnType("datetime")
                .HasColumnName("DATE_START_TARGET");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.FromProjectId)
                .HasMaxLength(32)
                .HasColumnName("FROM_PROJECT_ID");
            entity.Property(e => e.FromTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_TEMPLATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Goals).HasColumnName("GOALS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PercentCompl1).HasColumnName("PERCENT_COMPL_1");
            entity.Property(e => e.PercentCompl10).HasColumnName("PERCENT_COMPL_10");
            entity.Property(e => e.PercentCompl11).HasColumnName("PERCENT_COMPL_11");
            entity.Property(e => e.PercentCompl12).HasColumnName("PERCENT_COMPL_12");
            entity.Property(e => e.PercentCompl2).HasColumnName("PERCENT_COMPL_2");
            entity.Property(e => e.PercentCompl3).HasColumnName("PERCENT_COMPL_3");
            entity.Property(e => e.PercentCompl4).HasColumnName("PERCENT_COMPL_4");
            entity.Property(e => e.PercentCompl5).HasColumnName("PERCENT_COMPL_5");
            entity.Property(e => e.PercentCompl6).HasColumnName("PERCENT_COMPL_6");
            entity.Property(e => e.PercentCompl7).HasColumnName("PERCENT_COMPL_7");
            entity.Property(e => e.PercentCompl8).HasColumnName("PERCENT_COMPL_8");
            entity.Property(e => e.PercentCompl9).HasColumnName("PERCENT_COMPL_9");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ProjectNumber).HasColumnName("PROJECT_NUMBER");
            entity.Property(e => e.ProjectUpdateMode)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'1')")
                .HasColumnName("PROJECT_UPDATE_MODE");
            entity.Property(e => e.RollupPercentCompl).HasColumnName("ROLLUP_PERCENT_COMPL");
            entity.Property(e => e.SchedulingMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'7DC85B0668134E949B9212D7CE199265')")
                .IsFixedLength()
                .HasColumnName("SCHEDULING_METHOD");
            entity.Property(e => e.SchedulingMode)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'1')")
                .HasColumnName("SCHEDULING_MODE");
            entity.Property(e => e.SchedulingType)
                .HasMaxLength(64)
                .HasColumnName("SCHEDULING_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status1)
                .HasMaxLength(64)
                .HasColumnName("STATUS_1");
            entity.Property(e => e.Status10)
                .HasMaxLength(64)
                .HasColumnName("STATUS_10");
            entity.Property(e => e.Status11)
                .HasMaxLength(64)
                .HasColumnName("STATUS_11");
            entity.Property(e => e.Status12)
                .HasMaxLength(64)
                .HasColumnName("STATUS_12");
            entity.Property(e => e.Status2)
                .HasMaxLength(64)
                .HasColumnName("STATUS_2");
            entity.Property(e => e.Status3)
                .HasMaxLength(64)
                .HasColumnName("STATUS_3");
            entity.Property(e => e.Status4)
                .HasMaxLength(64)
                .HasColumnName("STATUS_4");
            entity.Property(e => e.Status5)
                .HasMaxLength(64)
                .HasColumnName("STATUS_5");
            entity.Property(e => e.Status6)
                .HasMaxLength(64)
                .HasColumnName("STATUS_6");
            entity.Property(e => e.Status7)
                .HasMaxLength(64)
                .HasColumnName("STATUS_7");
            entity.Property(e => e.Status8)
                .HasMaxLength(64)
                .HasColumnName("STATUS_8");
            entity.Property(e => e.Status9)
                .HasMaxLength(64)
                .HasColumnName("STATUS_9");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UpdateMethod)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'6E1133AB87A44D529DF5F9D1FD740100')")
                .IsFixedLength()
                .HasColumnName("UPDATE_METHOD");
            entity.Property(e => e.WbsId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WBS_ID");
        });

        modelBuilder.Entity<ProjectDoc>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROJECT___3214EC27D4CF5AE9");

            entity.ToTable("PROJECT_DOCS");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ProjectDocs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PROJECT_D__SOURC__45C948A1");
        });

        modelBuilder.Entity<ProjectPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROJECT___3214EC277D3B6EBC");

            entity.ToTable("PROJECT_PART");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ProjectParts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PROJECT_P__RELAT__47B19113");

            entity.HasOne(d => d.Source).WithMany(p => p.ProjectParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PROJECT_P__SOURC__46BD6CDA");
        });

        modelBuilder.Entity<ProjectTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Project_Task");

            entity.Property(e => e.AssignedTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ASSIGNED_TO");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Container)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER");
            entity.Property(e => e.ContainerTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER_TYPE_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("DUE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("icon");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Instructions)
                .HasMaxLength(64)
                .HasColumnName("INSTRUCTIONS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Item)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LanguageCodeFilter)
                .HasMaxLength(3)
                .HasColumnName("language_code_filter");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MyAssignment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MY_ASSIGNMENT");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("START_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(32)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ProjectTeam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROJECT___3214EC27484727F5");

            entity.ToTable("PROJECT_TEAM");

            entity.HasIndex(e => new { e.Role, e.SourceId }, "C89").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(64)
                .HasColumnName("ROLE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ProjectTeams)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__PROJECT_T__RELAT__4999D985");

            entity.HasOne(d => d.Source).WithMany(p => p.ProjectTeams)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PROJECT_T__SOURC__48A5B54C");
        });

        modelBuilder.Entity<ProjectTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROJECT___3214EC27D7CCA107");

            entity.ToTable("PROJECT_TEMPLATE");

            entity.HasIndex(e => e.Name, "C90").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasDefaultValueSql("(N'Template')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WbsId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WBS_ID");
        });

        modelBuilder.Entity<ProjectTemplateDoc>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROJECT___3214EC2722378A85");

            entity.ToTable("PROJECT_TEMPLATE_DOCS");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ProjectTemplateDocs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PROJECT_T__SOURC__4A8DFDBE");
        });

        modelBuilder.Entity<ProjectTemplateTree>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROJECT___3214EC272C4A8BCA");

            entity.ToTable("PROJECT_TEMPLATE_TREE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ProjectTemplateTrees)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PROJECT_T__SOURC__4B8221F7");
        });

        modelBuilder.Entity<ProjectTree>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROJECT___3214EC27E1C6861C");

            entity.ToTable("PROJECT_TREE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.ProjectTrees)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__PROJECT_T__SOURC__4C764630");
        });

        modelBuilder.Entity<Property>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PROPERTY__3214EC27CF91EC0F");

            entity.ToTable("PROPERTY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.Name, "I2");

            entity.HasIndex(e => e.DataSource, "property_data_source_index");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CategoryBy).HasColumnName("CATEGORY_BY");
            entity.Property(e => e.ClassPath)
                .HasMaxLength(512)
                .HasColumnName("CLASS_PATH");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ColumnAlignment)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("COLUMN_ALIGNMENT");
            entity.Property(e => e.ColumnWidth).HasColumnName("COLUMN_WIDTH");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DataSource)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DATA_SOURCE");
            entity.Property(e => e.DataType)
                .HasMaxLength(64)
                .HasColumnName("DATA_TYPE");
            entity.Property(e => e.DefaultSearch)
                .HasMaxLength(32)
                .HasColumnName("DEFAULT_SEARCH");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(128)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.ForeignProperty)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FOREIGN_PROPERTY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpText).HasColumnName("HELP_TEXT");
            entity.Property(e => e.HelpTooltip)
                .HasMaxLength(80)
                .HasColumnName("HELP_TOOLTIP");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsHidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_HIDDEN");
            entity.Property(e => e.IsHidden2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_HIDDEN2");
            entity.Property(e => e.IsIndexed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_INDEXED");
            entity.Property(e => e.IsKeyed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("IS_KEYED");
            entity.Property(e => e.IsMultiValued)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_MULTI_VALUED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.ItemBehavior)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'float')")
                .HasColumnName("ITEM_BEHAVIOR");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.KeyedNameOrder).HasColumnName("KEYED_NAME_ORDER");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxRange).HasColumnName("MAX_RANGE");
            entity.Property(e => e.MinRange).HasColumnName("MIN_RANGE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OrderBy).HasColumnName("ORDER_BY");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Pattern)
                .HasMaxLength(512)
                .HasColumnName("PATTERN");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Prec).HasColumnName("PREC");
            entity.Property(e => e.RangeInclusive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RANGE_INCLUSIVE");
            entity.Property(e => e.Readonly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("READONLY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Scale).HasColumnName("SCALE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StoredLength).HasColumnName("STORED_LENGTH");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TrackHistory)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRACK_HISTORY");

            entity.HasOne(d => d.Source).WithMany(p => p.Properties)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PROPERTY__SOURCE__1F198FD4");
        });

        modelBuilder.Entity<Readpriority>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__READPRIO__3214EC271A8BD80B");

            entity.ToTable("READPRIORITY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Readpriorities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__READPRIOR__RELAT__1C0818FF");

            entity.HasOne(d => d.Source).WithMany(p => p.Readpriorities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__READPRIOR__SOURC__1B13F4C6");
        });

        modelBuilder.Entity<RelationshipGridEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RELATION__3214EC27EDC08719");

            entity.ToTable("RELATIONSHIP_GRID_EVENT");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridEvent)
                .HasMaxLength(64)
                .HasColumnName("GRID_EVENT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.RelationshipGridEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__RELATIONS__RELAT__033C6B35");

            entity.HasOne(d => d.Source).WithMany(p => p.RelationshipGridEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RELATIONS__SOURC__024846FC");
        });

        modelBuilder.Entity<RelationshipView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RELATION__3214EC27031310A8");

            entity.ToTable("RELATIONSHIP_VIEW");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Form)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FORM");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Grid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Parameters)
                .HasMaxLength(128)
                .HasColumnName("PARAMETERS");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartPage)
                .HasMaxLength(128)
                .HasColumnName("START_PAGE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.RelationshipViews)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__RELATIONS__RELAT__0524B3A7");

            entity.HasOne(d => d.Source).WithMany(p => p.RelationshipViews)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RELATIONS__SOURC__04308F6E");
        });

        modelBuilder.Entity<Relationshiptype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RELATION__3214EC27C5E45E5B");

            entity.ToTable("RELATIONSHIPTYPE");

            entity.HasIndex(e => e.Name, "C1").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.HasIndex(e => e.Name, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CopyPermissions)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COPY_PERMISSIONS");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreateRelated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATE_RELATED");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.GridView)
                .HasMaxLength(64)
                .HasColumnName("GRID_VIEW");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideInAll)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_IN_ALL");
            entity.Property(e => e.IncRelKeyName)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("INC_REL_KEY_NAME");
            entity.Property(e => e.IncRelatedKeyName)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("INC_RELATED_KEY_NAME");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsListType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_LIST_TYPE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxOccurs).HasColumnName("MAX_OCCURS");
            entity.Property(e => e.MinOccurs).HasColumnName("MIN_OCCURS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewShowRelated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_SHOW_RELATED");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.RelatedNotnull)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_NOTNULL");
            entity.Property(e => e.RelatedOption)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'2')")
                .HasColumnName("RELATED_OPTION");
            entity.Property(e => e.RelationshipId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATIONSHIP_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.RelationshiptypeRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__RELATIONS__RELAT__3BB5CE82");

            entity.HasOne(d => d.Source).WithMany(p => p.RelationshiptypeSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RELATIONS__SOURC__3AC1AA49");
        });

        modelBuilder.Entity<Replicationrule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC27653F9F50");

            entity.ToTable("REPLICATIONRULE");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DoReplicate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_REPLICATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InitiatorType)
                .HasMaxLength(64)
                .HasColumnName("INITIATOR_TYPE");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'false')")
                .IsFixedLength()
                .HasColumnName("IS_ACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MaxWait)
                .HasMaxLength(4)
                .HasDefaultValueSql("(N'0100')")
                .HasColumnName("MAX_WAIT");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReplicationMode)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("REPLICATION_MODE");
            entity.Property(e => e.ReplicationTime)
                .HasMaxLength(4)
                .HasColumnName("REPLICATION_TIME");
            entity.Property(e => e.ReplicationType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Copy')")
                .HasColumnName("REPLICATION_TYPE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Replicationrules)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__REPLICATI__RELAT__1DF06171");

            entity.HasOne(d => d.Source).WithMany(p => p.Replicationrules)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__REPLICATI__SOURC__1CFC3D38");
        });

        modelBuilder.Entity<Replicationrulefiletype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC273C368081");

            entity.ToTable("REPLICATIONRULEFILETYPE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Replicationrulefiletypes)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__REPLICATI__RELAT__1FD8A9E3");

            entity.HasOne(d => d.Source).WithMany(p => p.Replicationrulefiletypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__REPLICATI__SOURC__1EE485AA");
        });

        modelBuilder.Entity<Replicationruletargetvault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC27DCA326BF");

            entity.ToTable("REPLICATIONRULETARGETVAULT");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Replicationruletargetvaults)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__REPLICATI__RELAT__21C0F255");

            entity.HasOne(d => d.Source).WithMany(p => p.Replicationruletargetvaults)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__REPLICATI__SOURC__20CCCE1C");
        });

        modelBuilder.Entity<Replicationtxn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC272FB302DA");

            entity.ToTable("REPLICATIONTXN");

            entity.HasIndex(e => e.FileId, "I0");

            entity.HasIndex(e => e.FromVault, "I1");

            entity.HasIndex(e => e.ToVault, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndTime)
                .HasColumnType("datetime")
                .HasColumnName("END_TIME");
            entity.Property(e => e.ErrorMsg)
                .HasMaxLength(512)
                .HasColumnName("ERROR_MSG");
            entity.Property(e => e.ExecutionAttempt)
                .HasDefaultValueSql("((1))")
                .HasColumnName("EXECUTION_ATTEMPT");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FromVault)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_VAULT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotBefore)
                .HasColumnType("datetime")
                .HasColumnName("NOT_BEFORE");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReplicationRule)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPLICATION_RULE");
            entity.Property(e => e.ReplicationStatus)
                .HasMaxLength(64)
                .HasColumnName("REPLICATION_STATUS");
            entity.Property(e => e.StartTime)
                .HasColumnType("datetime")
                .HasColumnName("START_TIME");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ToVault)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TO_VAULT");
            entity.Property(e => e.UserId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USER_ID");
        });

        modelBuilder.Entity<Replicationtxnlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPLICAT__3214EC27804B8B0A");

            entity.ToTable("REPLICATIONTXNLOG");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EndTime)
                .HasColumnType("datetime")
                .HasColumnName("END_TIME");
            entity.Property(e => e.ErrorMsg)
                .HasMaxLength(512)
                .HasColumnName("ERROR_MSG");
            entity.Property(e => e.ExecutionAttempt)
                .HasDefaultValueSql("((1))")
                .HasColumnName("EXECUTION_ATTEMPT");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FromVault)
                .HasMaxLength(32)
                .HasColumnName("FROM_VAULT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReplicationRule)
                .HasMaxLength(32)
                .HasColumnName("REPLICATION_RULE");
            entity.Property(e => e.ReplicationStatus)
                .HasMaxLength(64)
                .HasColumnName("REPLICATION_STATUS");
            entity.Property(e => e.StartTime)
                .HasColumnType("datetime")
                .HasColumnName("START_TIME");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ToVault)
                .HasMaxLength(32)
                .HasColumnName("TO_VAULT");
            entity.Property(e => e.UserId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USER_ID");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REPORT__3214EC27DB19D89F");

            entity.ToTable("REPORT");

            entity.HasIndex(e => e.Name, "C49").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(128)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(32)
                .HasColumnName("LABEL");
            entity.Property(e => e.Location)
                .HasMaxLength(64)
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReportQuery).HasColumnName("REPORT_QUERY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(64)
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("TYPE");
            entity.Property(e => e.XslStylesheet).HasColumnName("XSL_STYLESHEET");
        });

        modelBuilder.Entity<Revision>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__REVISION__3214EC2746EBC515");

            entity.ToTable("REVISION");

            entity.HasIndex(e => e.Name, "C10").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revision1)
                .HasMaxLength(1024)
                .HasColumnName("REVISION");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Runreportbyuser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RUNREPOR__3214EC2727FAADEE");

            entity.ToTable("RUNREPORTBYUSER");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Runreportbyusers)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__RUNREPORT__RELAT__4F87BD05");

            entity.HasOne(d => d.Source).WithMany(p => p.Runreportbyusers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__RUNREPORT__SOURC__4E9398CC");
        });

        modelBuilder.Entity<Savedsearch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SAVEDSEA__3214EC275F5FCA13");

            entity.ToTable("SAVEDSEARCH");

            entity.HasIndex(e => new { e.Itname, e.OwnedById }, "IX_searchmode_itname_owned_by_id");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AutoSaved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SAVED");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Criteria).HasColumnName("CRITERIA");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itname)
                .HasMaxLength(32)
                .HasColumnName("ITNAME");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.Location)
                .HasMaxLength(64)
                .HasColumnName("LOCATION");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SearchMode)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEARCH_MODE");
            entity.Property(e => e.ShowOnToc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("SHOW_ON_TOC");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ScheduledTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SCHEDULE__3214EC27D0954EE1");

            entity.ToTable("SCHEDULED_TASK");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DayOfWeek)
                .HasMaxLength(64)
                .HasColumnName("DAY_OF_WEEK");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Hour).HasColumnName("HOUR");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RunAs)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RUN_AS");
            entity.Property(e => e.RunIt)
                .HasMaxLength(64)
                .HasColumnName("RUN_IT");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("START_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Task)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TASK");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Weekdays)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WEEKDAYS");
        });

        modelBuilder.Entity<Search>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SEARCH__3214EC2746136D92");

            entity.ToTable("SEARCH");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Interactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INTERACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SearchItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SEARCH_ITEMTYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<SearchCriterion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SEARCH_C__3214EC27CFC5596B");

            entity.ToTable("SEARCH_CRITERIA");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Condition)
                .HasMaxLength(64)
                .HasColumnName("CONDITION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.PropertyValue)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_VALUE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.SearchCriteria)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SEARCH_CR__SOURC__200DB40D");
        });

        modelBuilder.Entity<Searchmode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SEARCHMO__3214EC2778ADD678");

            entity.ToTable("SEARCHMODE");

            entity.HasIndex(e => new { e.IsActive, e.Name }, "C37").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_ACTIVE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SearchHandler).HasColumnName("SEARCH_HANDLER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Securemessage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SECUREMESSAGE");

            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.CreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("CREATED_ON_TICK");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DisabledById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISABLED_BY_ID");
            entity.Property(e => e.DisabledOn)
                .HasColumnType("datetime")
                .HasColumnName("DISABLED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HighlightedText).HasColumnName("HIGHLIGHTED_TEXT");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(256)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReplyToId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPLY_TO_ID");
            entity.Property(e => e.SmData).HasColumnName("SM_DATA");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ThreadId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("THREAD_ID");
        });

        modelBuilder.Entity<Securemessageaudio>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC275D79754D");

            entity.ToTable("SECUREMESSAGEAUDIO");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MediaFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MEDIA_FILE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Securemessageflaggedby>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC27A30CDE39");

            entity.ToTable("SECUREMESSAGEFLAGGEDBY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FlaggedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FLAGGED_BY_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Securemessagemarkup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC273B8C5D9F");

            entity.ToTable("SECUREMESSAGEMARKUP");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FileId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_ID");
            entity.Property(e => e.FileSelectorId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_SELECTOR_ID");
            entity.Property(e => e.FileSelectorTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FILE_SELECTOR_TYPE_ID");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MarkupData).HasColumnName("MARKUP_DATA");
            entity.Property(e => e.MarkupHolderConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARKUP_HOLDER_CONFIG_ID");
            entity.Property(e => e.MarkupHolderId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARKUP_HOLDER_ID");
            entity.Property(e => e.MarkupHolderMajorRev)
                .HasMaxLength(8)
                .HasColumnName("MARKUP_HOLDER_MAJOR_REV");
            entity.Property(e => e.MarkupHolderState)
                .HasMaxLength(32)
                .HasColumnName("MARKUP_HOLDER_STATE");
            entity.Property(e => e.MarkupHolderTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MARKUP_HOLDER_TYPE_ID");
            entity.Property(e => e.MarkupHolderVersion).HasColumnName("MARKUP_HOLDER_VERSION");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Snapshot)
                .HasMaxLength(128)
                .HasColumnName("SNAPSHOT");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(128)
                .HasColumnName("THUMBNAIL");
        });

        modelBuilder.Entity<Securemessagevideo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC27224A667E");

            entity.ToTable("SECUREMESSAGEVIDEO");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MediaFile)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MEDIA_FILE");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Securemessageviewtemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC276AC97FA9");

            entity.ToTable("SECUREMESSAGEVIEWTEMPLATE");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SketchTooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("SKETCH_TOOLTIP_TEMPLATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Style).HasColumnName("STYLE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Template).HasColumnName("TEMPLATE");
            entity.Property(e => e.ThumbnailTooltipTemplate)
                .HasMaxLength(128)
                .HasColumnName("THUMBNAIL_TOOLTIP_TEMPLATE");
        });

        modelBuilder.Entity<Securemessagevisibilityfilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SECUREME__3214EC2716E70038");

            entity.ToTable("SECUREMESSAGEVISIBILITYFILTER");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCreator)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CREATOR");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Securemessagevisibilityfilters)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SECUREMES__RELAT__3B80C458");
        });

        modelBuilder.Entity<Selfservicereport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC2757EBE162");

            entity.ToTable("SELFSERVICEREPORT");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.BaseItemType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BASE_ITEM_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Definition).HasColumnName("DEFINITION");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Extension).HasColumnName("EXTENSION");
            entity.Property(e => e.Format)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'izenda')")
                .HasColumnName("FORMAT");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Hidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDDEN");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemtypeClassification).HasColumnName("ITEMTYPE_CLASSIFICATION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("THUMBNAIL");
            entity.Property(e => e.Visibility)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'itemtype')")
                .HasColumnName("VISIBILITY");
        });

        modelBuilder.Entity<Selfservicereportfeatured>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC273FD38670");

            entity.ToTable("SELFSERVICEREPORTFEATURED");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AllowExcludedProperties)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALLOW_EXCLUDED_PROPERTIES");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExcludedProperties).HasColumnName("EXCLUDED_PROPERTIES");
            entity.Property(e => e.FeaturedItemtypes).HasColumnName("FEATURED_ITEMTYPES");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HideAdvanced)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_ADVANCED");
            entity.Property(e => e.IdentityId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IDENTITY_ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ShowAll)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("SHOW_ALL");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Selfservicereportfeatureds)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SELFSERVI__SOURC__53584DE9");
        });

        modelBuilder.Entity<Selfservicereporthelp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC27C6B36D17");

            entity.ToTable("SELFSERVICEREPORTHELP");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContextKey)
                .HasMaxLength(128)
                .HasColumnName("CONTEXT_KEY");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RichHelpText)
                .HasMaxLength(4000)
                .HasColumnName("RICH_HELP_TEXT");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Selfservicereportsetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC275090E264");

            entity.ToTable("SELFSERVICEREPORTSETTINGS");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HideAdvancedForAll)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_ADVANCED_FOR_ALL");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'Self-Service Report Settings')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Selfservicereportsettings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SELFSERVI__SOURC__507BE13E");
        });

        modelBuilder.Entity<Selfservicereportsharedwith>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SELFSERV__3214EC27E9DA050C");

            entity.ToTable("SELFSERVICEREPORTSHAREDWITH");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "C66").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AccessRights)
                .HasMaxLength(64)
                .HasColumnName("ACCESS_RIGHTS");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Selfservicereportsharedwiths)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SELFSERVI__RELAT__526429B0");

            entity.HasOne(d => d.Source).WithMany(p => p.Selfservicereportsharedwiths)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SELFSERVI__SOURC__51700577");
        });

        modelBuilder.Entity<Sequence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SEQUENCE__3214EC27C093FE2E");

            entity.ToTable("SEQUENCE");

            entity.HasIndex(e => e.Name, "C11").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.CurrentValue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CURRENT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.InitialValue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("INITIAL_VALUE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PadTo).HasColumnName("PAD_TO");
            entity.Property(e => e.PadWith)
                .HasMaxLength(1)
                .HasColumnName("PAD_WITH");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(16)
                .HasColumnName("PREFIX");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Step).HasColumnName("STEP");
            entity.Property(e => e.Suffix)
                .HasMaxLength(16)
                .HasColumnName("SUFFIX");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<ServerEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SERVER_E__3214EC27F7CE3B21");

            entity.ToTable("SERVER_EVENT");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventVersion)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'version_1')")
                .HasColumnName("EVENT_VERSION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_REQUIRED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ServerEvent1)
                .HasMaxLength(64)
                .HasColumnName("SERVER_EVENT");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ServerEvents)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SERVER_EV__RELAT__6C5905DD");

            entity.HasOne(d => d.Source).WithMany(p => p.ServerEvents)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SERVER_EV__SOURC__6B64E1A4");
        });

        modelBuilder.Entity<Serviceprovider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SERVICEP__3214EC277EB125EF");

            entity.ToTable("SERVICEPROVIDER");

            entity.HasIndex(e => e.Name, "C40").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Active)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ACTIVE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ServiceType)
                .HasMaxLength(64)
                .HasColumnName("SERVICE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Url)
                .HasMaxLength(256)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<SimpleEco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_E__3214EC270AD600FC");

            entity.ToTable("SIMPLE_ECO");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeCategory)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Phase In')")
                .HasColumnName("CHANGE_CATEGORY");
            entity.Property(e => e.ChangeReason).HasColumnName("CHANGE_REASON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'80727DB851A94DBCB10419D30ED69F9F')")
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'')")
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<SimpleEcoAffectedItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_E__3214EC27C1812880");

            entity.ToTable("SIMPLE_ECO_AFFECTED_ITEM");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SimpleEcoAffectedItems)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SIMPLE_EC__RELAT__292D09F3");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleEcoAffectedItems)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_EC__SOURC__2838E5BA");
        });

        modelBuilder.Entity<SimpleEcoFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_E__3214EC27958B069A");

            entity.ToTable("SIMPLE_ECO_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SimpleEcoFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SIMPLE_EC__RELAT__2B155265");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleEcoFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_EC__SOURC__2A212E2C");
        });

        modelBuilder.Entity<SimpleEcoSignoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_E__3214EC2763D6135F");

            entity.ToTable("SIMPLE_ECO_SIGNOFF");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleEcoSignoffs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_EC__SOURC__2C09769E");
        });

        modelBuilder.Entity<SimpleMco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_M__3214EC2738178B17");

            entity.ToTable("SIMPLE_MCO");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeCategory)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Phase In')")
                .HasColumnName("CHANGE_CATEGORY");
            entity.Property(e => e.ChangeReason).HasColumnName("CHANGE_REASON");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(1024)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(256)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'80727DB851A94DBCB10419D30ED69F9F')")
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<SimpleMcoFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_M__3214EC27177C09A2");

            entity.ToTable("SIMPLE_MCO_FILE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SimpleMcoFiles)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SIMPLE_MC__RELAT__2DF1BF10");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleMcoFiles)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_MC__SOURC__2CFD9AD7");
        });

        modelBuilder.Entity<SimpleMcoPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_M__3214EC27E0A8A1E5");

            entity.ToTable("SIMPLE_MCO_PART");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SimpleMcoParts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SIMPLE_MC__RELAT__2FDA0782");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleMcoParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_MC__SOURC__2EE5E349");
        });

        modelBuilder.Entity<SimpleMcoSignoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SIMPLE_M__3214EC270481B37A");

            entity.ToTable("SIMPLE_MCO_SIGNOFF");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.SimpleMcoSignoffs)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SIMPLE_MC__SOURC__30CE2BBB");
        });

        modelBuilder.Entity<Spdocumentlibrarydefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SPDOCUME__3214EC27E1C8518E");

            entity.ToTable("SPDOCUMENTLIBRARYDEFINITION");

            entity.HasIndex(e => e.DocTypeName, "C36").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.AuthenticationType)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("AUTHENTICATION_TYPE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DocTypeLabel)
                .HasMaxLength(64)
                .HasColumnName("DOC_TYPE_LABEL");
            entity.Property(e => e.DocTypeLabelPlural)
                .HasMaxLength(64)
                .HasColumnName("DOC_TYPE_LABEL_PLURAL");
            entity.Property(e => e.DocTypeName)
                .HasMaxLength(30)
                .HasColumnName("DOC_TYPE_NAME");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SpDoclibId)
                .HasMaxLength(64)
                .HasColumnName("SP_DOCLIB_ID");
            entity.Property(e => e.SpDoclibName)
                .HasMaxLength(64)
                .HasColumnName("SP_DOCLIB_NAME");
            entity.Property(e => e.SpDomain)
                .HasMaxLength(32)
                .HasColumnName("SP_DOMAIN");
            entity.Property(e => e.SpPassword)
                .HasMaxLength(32)
                .HasColumnName("SP_PASSWORD");
            entity.Property(e => e.SpSiteTitle)
                .HasMaxLength(64)
                .HasColumnName("SP_SITE_TITLE");
            entity.Property(e => e.SpSiteUrl)
                .HasMaxLength(256)
                .HasColumnName("SP_SITE_URL");
            entity.Property(e => e.SpUser)
                .HasMaxLength(32)
                .HasColumnName("SP_USER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Spfield>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SPFIELD__3214EC27288CB922");

            entity.ToTable("SPFIELD");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyHidden)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTY_HIDDEN");
            entity.Property(e => e.PropertyHidden2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROPERTY_HIDDEN2");
            entity.Property(e => e.PropertyKeyedOrder).HasColumnName("PROPERTY_KEYED_ORDER");
            entity.Property(e => e.PropertyLabel)
                .HasMaxLength(64)
                .HasColumnName("PROPERTY_LABEL");
            entity.Property(e => e.PropertyLength).HasColumnName("PROPERTY_LENGTH");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.PropertyType)
                .HasMaxLength(64)
                .HasColumnName("PROPERTY_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SpFieldName)
                .HasMaxLength(64)
                .HasColumnName("SP_FIELD_NAME");
            entity.Property(e => e.SpFieldType)
                .HasMaxLength(32)
                .HasColumnName("SP_FIELD_TYPE");
            entity.Property(e => e.SpGuid)
                .HasMaxLength(64)
                .HasColumnName("SP_GUID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Spfields)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SPFIELD__SOURCE___1837881B");
        });

        modelBuilder.Entity<Sql>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SQL__3214EC27F37C3CC5");

            entity.ToTable("SQL");

            entity.HasIndex(e => e.Name, "C12").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExecutionCount)
                .HasDefaultValueSql("((0))")
                .HasColumnName("EXECUTION_COUNT");
            entity.Property(e => e.ExecutionFlag)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'manual')")
                .HasColumnName("EXECUTION_FLAG");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OldName)
                .HasMaxLength(64)
                .HasColumnName("OLD_NAME");
            entity.Property(e => e.OracleBody).HasColumnName("ORACLE_BODY");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SqlserverBody).HasColumnName("SQLSERVER_BODY");
            entity.Property(e => e.Stale)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("STALE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransformFirst)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("TRANSFORM_FIRST");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'procedure')")
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<SqlDependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SQL_DEPE__3214EC271D27FBEE");

            entity.ToTable("SQL_DEPENDENCIES");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SqlDependencyRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SQL_DEPEN__RELAT__6E414E4F");

            entity.HasOne(d => d.Source).WithMany(p => p.SqlDependencySources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SQL_DEPEN__SOURC__6D4D2A16");
        });

        modelBuilder.Entity<SsvcNotificationMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SSVC_NOT__3214EC27AD6BC965");

            entity.ToTable("SSVC_NOTIFICATION_MESSAGE");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Acknowledge)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Once')")
                .HasColumnName("ACKNOWLEDGE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MessageId)
                .HasMaxLength(32)
                .HasColumnName("MESSAGE_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Priority)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'5')")
                .HasColumnName("PRIORITY");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Target)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TARGET");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Standard')")
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<SsvcPreference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SSVC_PRE__3214EC27F8DF18AE");

            entity.ToTable("SSVC_PREFERENCES");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultBookmark)
                .HasMaxLength(32)
                .HasColumnName("DEFAULT_BOOKMARK");
            entity.Property(e => e.DefaultFlaggedByNumber).HasColumnName("DEFAULT_FLAGGED_BY_NUMBER");
            entity.Property(e => e.DefaultRepliesNumber).HasColumnName("DEFAULT_REPLIES_NUMBER");
            entity.Property(e => e.DescDigestNotifications)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'The following new messages have posted in your discussions:')")
                .HasColumnName("DESC_DIGEST_NOTIFICATIONS");
            entity.Property(e => e.DescSingleNotifications)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'The following new message has posted in your discussions:')")
                .HasColumnName("DESC_SINGLE_NOTIFICATIONS");
            entity.Property(e => e.EnableEmailDigestNotification)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENABLE_EMAIL_DIGEST_NOTIFICATION");
            entity.Property(e => e.EnableImmediateNotifications)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("ENABLE_IMMEDIATE_NOTIFICATIONS");
            entity.Property(e => e.EnableInAppNotifications)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'1')")
                .IsFixedLength()
                .HasColumnName("ENABLE_IN_APP_NOTIFICATIONS");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LastScheduledDigestTimeDate)
                .HasColumnType("datetime")
                .HasColumnName("LAST_SCHEDULED_DIGEST_TIME_DATE");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MessagesMaxLines).HasColumnName("MESSAGES_MAX_LINES");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PrefixForHighlightTextMarkup)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Change to:')")
                .HasColumnName("PREFIX_FOR_HIGHLIGHT_TEXT_MARKUP");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SubjectDigestNotifications)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'[Aras] Visual Collaboration Notification – new messages')")
                .HasColumnName("SUBJECT_DIGEST_NOTIFICATIONS");
            entity.Property(e => e.SubjectSingleNotifications)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'[Aras] Visual Collaboration Notification – new message')")
                .HasColumnName("SUBJECT_SINGLE_NOTIFICATIONS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TimeDigestInterval)
                .HasDefaultValueSql("((24))")
                .HasColumnName("TIME_DIGEST_INTERVAL");
            entity.Property(e => e.UseStandardToolbarForViewers)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_STANDARD_TOOLBAR_FOR_VIEWERS");

            entity.HasOne(d => d.Source).WithMany(p => p.SsvcPreferences)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SSVC_PREF__SOURC__47E69B3D");
        });

        modelBuilder.Entity<Ssvcemaildigestentry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SSVCEMAI__3214EC27B793ECE3");

            entity.ToTable("SSVCEMAILDIGESTENTRY");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(256)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MessageClassification)
                .HasMaxLength(256)
                .HasColumnName("MESSAGE_CLASSIFICATION");
            entity.Property(e => e.MessageComments).HasColumnName("MESSAGE_COMMENTS");
            entity.Property(e => e.MessageCreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MESSAGE_CREATED_BY_ID");
            entity.Property(e => e.MessageCreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("MESSAGE_CREATED_ON");
            entity.Property(e => e.MessageCreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("MESSAGE_CREATED_ON_TICK");
            entity.Property(e => e.MessageId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MESSAGE_ID");
            entity.Property(e => e.MessageIsReply)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MESSAGE_IS_REPLY");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.NotificationUserId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOTIFICATION_USER_ID");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Ssvcitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SSVCITEMS");

            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Itemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ITEMTYPE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Ssvcpresentationconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SSVCPRES__3214EC2785BC94CA");

            entity.ToTable("SSVCPRESENTATIONCONFIGURATION");

            entity.HasIndex(e => e.Name, "C55").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DiscussionPanelBehavior)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'discPanelOff')")
                .HasColumnName("DISCUSSION_PANEL_BEHAVIOR");
            entity.Property(e => e.FormTooltipTemplate)
                .HasMaxLength(128)
                .HasDefaultValueSql("(N'Form of ${ItemType:label} ${Item:keyed_name}')")
                .HasColumnName("FORM_TOOLTIP_TEMPLATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SmTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SM_TEMPLATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<StateDistribution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__STATE_DI__3214EC27100641D9");

            entity.ToTable("STATE_DISTRIBUTION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.StateDistributions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__STATE_DIS__RELAT__10CB707D");

            entity.HasOne(d => d.Source).WithMany(p => p.StateDistributions)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__STATE_DIS__SOURC__0FD74C44");
        });

        modelBuilder.Entity<StateEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__STATE_EM__3214EC273CF55B67");

            entity.ToTable("STATE_EMAIL");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OfItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OF_ITEMTYPE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.StateEmails)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__STATE_EMA__RELAT__12B3B8EF");

            entity.HasOne(d => d.Source).WithMany(p => p.StateEmails)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__STATE_EMA__SOURC__11BF94B6");
        });

        modelBuilder.Entity<StateNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__STATE_NO__3214EC270B7F6677");

            entity.ToTable("STATE_NOTIFICATION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Body).HasColumnName("BODY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.FromUser)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FROM_USER");
            entity.Property(e => e.FromUserStr)
                .HasMaxLength(128)
                .HasColumnName("FROM_USER_STR");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HtmlBody).HasColumnName("HTML_BODY");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Subject)
                .HasMaxLength(128)
                .HasColumnName("SUBJECT");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.StateNotifications)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__STATE_NOT__RELAT__149C0161");

            entity.HasOne(d => d.Source).WithMany(p => p.StateNotifications)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__STATE_NOT__SOURC__13A7DD28");
        });

        modelBuilder.Entity<Storedsecuremessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__STOREDSE__3214EC271ECC665F");

            entity.ToTable("STOREDSECUREMESSAGE");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.CreatedOnTick)
                .HasColumnType("decimal(19, 0)")
                .HasColumnName("CREATED_ON_TICK");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DisabledById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DISABLED_BY_ID");
            entity.Property(e => e.DisabledOn)
                .HasColumnType("datetime")
                .HasColumnName("DISABLED_ON");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HighlightedText).HasColumnName("HIGHLIGHTED_TEXT");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CONFIG_ID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_ID");
            entity.Property(e => e.ItemKeyedName)
                .HasMaxLength(256)
                .HasColumnName("ITEM_KEYED_NAME");
            entity.Property(e => e.ItemMajorRev)
                .HasMaxLength(8)
                .HasColumnName("ITEM_MAJOR_REV");
            entity.Property(e => e.ItemState)
                .HasMaxLength(32)
                .HasColumnName("ITEM_STATE");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(128)
                .HasColumnName("ITEM_TYPE_NAME");
            entity.Property(e => e.ItemVersion).HasColumnName("ITEM_VERSION");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.ReplyToId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REPLY_TO_ID");
            entity.Property(e => e.SmData).HasColumnName("SM_DATA");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ThreadId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("THREAD_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Storedsecuremessages)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__STOREDSEC__SOURC__48DABF76");
        });

        modelBuilder.Entity<SubWb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SUB_WBS__3214EC27F57F95C2");

            entity.ToTable("SUB_WBS");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.SubWbRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SUB_WBS__RELATED__4E5E8EA2");

            entity.HasOne(d => d.Source).WithMany(p => p.SubWbSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SUB_WBS__SOURCE___4D6A6A69");
        });

        modelBuilder.Entity<Systemevent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMEV__3214EC279FE634FD");

            entity.ToTable("SYSTEMEVENT");

            entity.HasIndex(e => e.EventType, "C13").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Systemeventhandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMEV__3214EC2790CC4A40");

            entity.ToTable("SYSTEMEVENTHANDLER");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsEnabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'true')")
                .IsFixedLength()
                .HasColumnName("IS_ENABLED");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Systemeventhandlers)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__SYSTEMEVE__RELAT__702996C1");

            entity.HasOne(d => d.Source).WithMany(p => p.Systemeventhandlers)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__SYSTEMEVE__SOURC__6F357288");
        });

        modelBuilder.Entity<Systemeventlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMEV__3214EC27980150DB");

            entity.ToTable("SYSTEMEVENTLOG");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CommentText).HasColumnName("COMMENT_TEXT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EventType)
                .HasMaxLength(64)
                .HasColumnName("EVENT_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IpAddress)
                .HasMaxLength(32)
                .HasColumnName("IP_ADDRESS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.LoginName)
                .HasMaxLength(32)
                .HasColumnName("LOGIN_NAME");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MethodName)
                .HasMaxLength(32)
                .HasColumnName("METHOD_NAME");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.SessionId)
                .HasMaxLength(64)
                .HasColumnName("SESSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Systemeventlogdescriptor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMEV__3214EC2797207200");

            entity.ToTable("SYSTEMEVENTLOGDESCRIPTOR");

            entity.HasIndex(e => e.SystemEvent, "C14").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.LogLevel)
                .HasDefaultValueSql("((0))")
                .HasColumnName("LOG_LEVEL");
            entity.Property(e => e.LogMessage)
                .HasMaxLength(256)
                .HasColumnName("LOG_MESSAGE");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SystemEvent)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SYSTEM_EVENT");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Systemfilecontainer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSTEMFI__3214EC273971F3DE");

            entity.ToTable("SYSTEMFILECONTAINER");

            entity.HasIndex(e => e.Name, "C26").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Team>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TEAM__3214EC278A59A339");

            entity.ToTable("TEAM");

            entity.HasIndex(e => e.Name, "C15").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<TeamIdentity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TEAM_IDE__3214EC274FC2E7CD");

            entity.ToTable("TEAM_IDENTITY");

            entity.HasIndex(e => new { e.TeamRole, e.RelatedId, e.SourceId }, "C22").IsUnique();

            entity.HasIndex(e => e.TeamRole, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.HasIndex(e => e.SourceId, "I2");

            entity.HasIndex(e => new { e.RelatedId, e.SourceId }, "IX_team_identity_source_id_related_id_team_role");

            entity.HasIndex(e => e.SourceId, "IX_team_identity_source_id_with_include");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TeamRole)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ROLE");

            entity.HasOne(d => d.Related).WithMany(p => p.TeamIdentities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TEAM_IDEN__RELAT__7211DF33");

            entity.HasOne(d => d.Source).WithMany(p => p.TeamIdentities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__TEAM_IDEN__SOURC__711DBAFA");
        });

        modelBuilder.Entity<TimeRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TIME_REC__3214EC2760BCCF0D");

            entity.ToTable("TIME_RECORD");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DateFrom)
                .HasColumnType("datetime")
                .HasColumnName("DATE_FROM");
            entity.Property(e => e.DateTo)
                .HasColumnType("datetime")
                .HasColumnName("DATE_TO");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.Notes)
                .HasMaxLength(128)
                .HasColumnName("NOTES");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WorkHours).HasColumnName("WORK_HOURS");
            entity.Property(e => e.WorkIdentity)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("WORK_IDENTITY");

            entity.HasOne(d => d.Source).WithMany(p => p.TimeRecords)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__TIME_RECO__SOURC__4F52B2DB");
        });

        modelBuilder.Entity<TimeToManufacturing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TIME_TO___3214EC2766862807");

            entity.ToTable("TIME_TO_MANUFACTURING");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<TimeZone>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TimeZone");

            entity.ToTable("TIME_ZONE", "tz");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("NAME");
            entity.Property(e => e.OffsetSeconds).HasColumnName("OFFSET_SECONDS");
        });

        modelBuilder.Entity<TimeZoneHistory>(entity =>
        {
            entity.HasKey(e => new { e.TzId, e.TransitionStart, e.TransitionEnd });

            entity.ToTable("TIME_ZONE_HISTORY", "tz");

            entity.Property(e => e.TzId).HasColumnName("TZ_ID");
            entity.Property(e => e.TransitionStart)
                .HasColumnType("datetime")
                .HasColumnName("TRANSITION_START");
            entity.Property(e => e.TransitionEnd)
                .HasColumnType("datetime")
                .HasColumnName("TRANSITION_END");
            entity.Property(e => e.DeltaSeconds).HasColumnName("DELTA_SECONDS");
            entity.Property(e => e.Dst).HasColumnName("DST");

            entity.HasOne(d => d.Tz).WithMany(p => p.TimeZoneHistories)
                .HasForeignKey(d => d.TzId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TimeZoneHistory_TimeZone");
        });

        modelBuilder.Entity<TocAccess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TOC_ACCE__3214EC2706E98760");

            entity.ToTable("TOC_ACCESS");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Category)
                .HasMaxLength(64)
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.TocAccesses)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TOC_ACCES__RELAT__73FA27A5");

            entity.HasOne(d => d.Source).WithMany(p => p.TocAccesses)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TOC_ACCES__SOURC__7306036C");
        });

        modelBuilder.Entity<TocView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TOC_VIEW__3214EC27DC36ED8D");

            entity.ToTable("TOC_VIEW");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Form)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FORM");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Parameters)
                .HasMaxLength(128)
                .HasColumnName("PARAMETERS");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.StartPage)
                .HasMaxLength(64)
                .HasColumnName("START_PAGE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.TocViews)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TOC_VIEW__RELATE__75E27017");

            entity.HasOne(d => d.Source).WithMany(p => p.TocViews)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TOC_VIEW__SOURCE__74EE4BDE");
        });

        modelBuilder.Entity<TpImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_IMAGE__3214EC275D6F362E");

            entity.ToTable("TP_IMAGE");

            entity.HasIndex(e => new { e.ItemNumber, e.ArasUniquenessHelper }, "C74").IsUnique();

            entity.HasIndex(e => e.ItemNumber, "I0");

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_TP_IMAGE_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(64)
                .HasColumnName("ITEM_NUMBER");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.Src)
                .HasMaxLength(128)
                .HasColumnName("SRC");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<TpItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TP_ITEM");

            entity.Property(e => e.AllowPrivatePermission)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ALLOW_PRIVATE_PERMISSION");
            entity.Property(e => e.AutoSearch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AUTO_SEARCH");
            entity.Property(e => e.CacheQuery).HasColumnName("CACHE_QUERY");
            entity.Property(e => e.ClassStructure).HasColumnName("CLASS_STRUCTURE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CloseIcon)
                .HasMaxLength(128)
                .HasColumnName("CLOSE_ICON");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Core)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CORE");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultPageSize).HasColumnName("DEFAULT_PAGE_SIZE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EnforceDiscovery)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ENFORCE_DISCOVERY");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HelpItem)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HELP_ITEM");
            entity.Property(e => e.HelpUrl)
                .HasMaxLength(80)
                .HasColumnName("HELP_URL");
            entity.Property(e => e.HideWhereUsed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HIDE_WHERE_USED");
            entity.Property(e => e.HistoryTemplate)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("HISTORY_TEMPLATE");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ImplementationDdl).HasColumnName("IMPLEMENTATION_DDL");
            entity.Property(e => e.ImplementationType)
                .HasMaxLength(64)
                .HasColumnName("IMPLEMENTATION_TYPE");
            entity.Property(e => e.InstanceData)
                .HasMaxLength(30)
                .HasColumnName("INSTANCE_DATA");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDependent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEPENDENT");
            entity.Property(e => e.IsRelationship)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELATIONSHIP");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsVersionable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_VERSIONABLE");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LabelPlural)
                .HasMaxLength(64)
                .HasColumnName("LABEL_PLURAL");
            entity.Property(e => e.LargeIcon)
                .HasMaxLength(128)
                .HasColumnName("LARGE_ICON");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.ManualVersioning)
                .HasMaxLength(64)
                .HasColumnName("MANUAL_VERSIONING");
            entity.Property(e => e.Maxrecords).HasColumnName("MAXRECORDS");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OpenIcon)
                .HasMaxLength(128)
                .HasColumnName("OPEN_ICON");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Revisions)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("REVISIONS");
            entity.Property(e => e.ShowParametersTab)
                .HasMaxLength(64)
                .HasColumnName("SHOW_PARAMETERS_TAB");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StructureView)
                .HasMaxLength(64)
                .HasColumnName("STRUCTURE_VIEW");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.UnlockOnLogout)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNLOCK_ON_LOGOUT");
            entity.Property(e => e.UseSrcAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("USE_SRC_ACCESS");
        });

        modelBuilder.Entity<TpStylesheet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_STYLE__3214EC27F8830B04");

            entity.ToTable("TP_STYLESHEET");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C75").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.ParentStylesheet)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PARENT_STYLESHEET");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StyleContent).HasColumnName("STYLE_CONTENT");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.TpStylesheets)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__TP_STYLES__SOURC__69478F08");
        });

        modelBuilder.Entity<TpXmlschema>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_XMLSC__3214EC273EFA3138");

            entity.ToTable("TP_XMLSCHEMA");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Content).HasColumnName("CONTENT");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<TpXmlschemaelement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_XMLSC__3214EC274241ACF1");

            entity.ToTable("TP_XMLSCHEMAELEMENT");

            entity.HasIndex(e => new { e.Name, e.SourceId }, "C76").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContentGenerator)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTENT_GENERATOR");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultClassification)
                .HasMaxLength(512)
                .HasColumnName("DEFAULT_CLASSIFICATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsContentDynamic)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CONTENT_DYNAMIC");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Renderer)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RENDERER");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.TpXmlschemaelements)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__TP_XMLSCH__SOURC__6A3BB341");
        });

        modelBuilder.Entity<TpXmlschemaoutputsetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TP_XMLSC__3214EC275D8E94D4");

            entity.ToTable("TP_XMLSCHEMAOUTPUTSETTING");

            entity.HasIndex(e => new { e.TargetClassification, e.Classification, e.SourceId }, "C77").IsUnique();

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Indentation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("INDENTATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OmitXmlDeclaration)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OMIT_XML_DECLARATION");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.StylesheetId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STYLESHEET_ID");
            entity.Property(e => e.TargetClassification)
                .HasMaxLength(512)
                .HasColumnName("TARGET_CLASSIFICATION");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.TpXmlschemaoutputsettings)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__TP_XMLSCH__SOURC__6B2FD77A");
        });

        modelBuilder.Entity<TransitionDistribution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TRANSITI__3214EC2780645DD6");

            entity.ToTable("TRANSITION_DISTRIBUTION");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.TransitionDistributions)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TRANSITIO__RELAT__0CFADF99");

            entity.HasOne(d => d.Source).WithMany(p => p.TransitionDistributions)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TRANSITIO__SOURC__0C06BB60");
        });

        modelBuilder.Entity<TransitionEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TRANSITI__3214EC271227ECCA");

            entity.ToTable("TRANSITION_EMAIL");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OfItemtype)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OF_ITEMTYPE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.TransitionEmails)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__TRANSITIO__RELAT__092A4EB5");

            entity.HasOne(d => d.Source).WithMany(p => p.TransitionEmails)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TRANSITIO__SOURC__08362A7C");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__USER__3214EC27AB73F5B9");

            entity.ToTable("USER");

            entity.HasIndex(e => e.LoginName, "C16").IsUnique();

            entity.HasIndex(e => e.LoginName, "I0");

            entity.HasIndex(e => new { e.LogonEnabled, e.LoginName, e.Password }, "IX_user_logon_enabled_login_name_password");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Cell)
                .HasMaxLength(32)
                .HasColumnName("CELL");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(32)
                .HasColumnName("COMPANY_NAME");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultVault)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'67BBB9204FE84A8981ED8313049BA06C')")
                .IsFixedLength()
                .HasColumnName("DEFAULT_VAULT");
            entity.Property(e => e.Email)
                .HasMaxLength(64)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Esignature)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ESIGNATURE");
            entity.Property(e => e.Fax)
                .HasMaxLength(32)
                .HasColumnName("FAX");
            entity.Property(e => e.FirstName)
                .HasMaxLength(32)
                .HasColumnName("FIRST_NAME");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.HomePhone)
                .HasMaxLength(32)
                .HasColumnName("HOME_PHONE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LastLoginDate)
                .HasColumnType("datetime")
                .HasColumnName("LAST_LOGIN_DATE");
            entity.Property(e => e.LastName)
                .HasMaxLength(32)
                .HasColumnName("LAST_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.LoginName)
                .HasMaxLength(32)
                .HasColumnName("LOGIN_NAME");
            entity.Property(e => e.LogonEnabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOGON_ENABLED");
            entity.Property(e => e.MailStop)
                .HasMaxLength(16)
                .HasColumnName("MAIL_STOP");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Manager)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGER");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.Pager)
                .HasMaxLength(32)
                .HasColumnName("PAGER");
            entity.Property(e => e.Password)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PASSWORD");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Picture)
                .HasMaxLength(128)
                .HasColumnName("PICTURE");
            entity.Property(e => e.PwdIsSetOn)
                .HasColumnType("datetime")
                .HasColumnName("PWD_IS_SET_ON");
            entity.Property(e => e.StartingPage)
                .HasMaxLength(64)
                .HasColumnName("STARTING_PAGE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Telephone)
                .HasMaxLength(32)
                .HasColumnName("TELEPHONE");
            entity.Property(e => e.UserNo)
                .HasMaxLength(15)
                .HasColumnName("USER_NO");
            entity.Property(e => e.WorkingDirectory)
                .HasMaxLength(256)
                .HasColumnName("WORKING_DIRECTORY");
        });

        modelBuilder.Entity<Usermessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__USERMESS__3214EC27870B0EE7");

            entity.ToTable("USERMESSAGE");

            entity.HasIndex(e => e.Name, "C17").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Custom)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CUSTOM");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Text)
                .HasMaxLength(2048)
                .HasColumnName("TEXT");
        });

        modelBuilder.Entity<Value>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VALUE__3214EC27B35D5AFD");

            entity.ToTable("VALUE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value1)
                .HasMaxLength(256)
                .HasColumnName("VALUE");

            entity.HasOne(d => d.Source).WithMany(p => p.Values)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VALUE__SOURCE_ID__37E53D9E");
        });

        modelBuilder.Entity<Variable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VARIABLE__3214EC276E57C187");

            entity.ToTable("VARIABLE");

            entity.HasIndex(e => e.Name, "C80").IsUnique();

            entity.HasIndex(e => e.Name, "IX_Variable_value");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(256)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value)
                .HasMaxLength(2048)
                .HasColumnName("VALUE");
        });

        modelBuilder.Entity<Variable1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_variable");

            entity.ToTable("VARIABLE", "protected");

            entity.HasIndex(e => e.Name, "AK_variable").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.Value).HasColumnName("VALUE");
        });

        modelBuilder.Entity<Vault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VAULT__3214EC27E3E37358");

            entity.ToTable("VAULT");

            entity.HasIndex(e => e.Name, "C18").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.VaultUrlPattern)
                .HasMaxLength(256)
                .HasColumnName("VAULT_URL_PATTERN");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VENDOR__3214EC274E8F9741");

            entity.ToTable("VENDOR");

            entity.HasIndex(e => e.Name, "C84").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Address)
                .HasMaxLength(256)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.AddressState)
                .HasMaxLength(64)
                .HasColumnName("ADDRESS_STATE");
            entity.Property(e => e.City)
                .HasMaxLength(64)
                .HasColumnName("CITY");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(64)
                .HasColumnName("CONTACT_NAME");
            entity.Property(e => e.Country)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MainFax)
                .HasMaxLength(32)
                .HasColumnName("MAIN_FAX");
            entity.Property(e => e.MainPhone)
                .HasMaxLength(32)
                .HasColumnName("MAIN_PHONE");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WebSite)
                .HasMaxLength(128)
                .HasColumnName("WEB_SITE");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(32)
                .HasColumnName("ZIP_CODE");
        });

        modelBuilder.Entity<VendorPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VENDOR_P__3214EC27DDB1BA53");

            entity.ToTable("VENDOR_PART");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.CatalogNumber)
                .HasMaxLength(32)
                .HasColumnName("CATALOG_NUMBER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.VendorParts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__VENDOR_PA__RELAT__32B6742D");

            entity.HasOne(d => d.Source).WithMany(p => p.VendorParts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__VENDOR_PA__SOURC__31C24FF4");
        });

        modelBuilder.Entity<View>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VIEW__3214EC27434A0960");

            entity.ToTable("VIEW");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DisplayPriority).HasColumnName("DISPLAY_PRIORITY");
            entity.Property(e => e.FormClassification)
                .HasMaxLength(512)
                .HasColumnName("FORM_CLASSIFICATION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.Method)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("METHOD");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Role)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'A73B655731924CD0B027E4F4D5FCC0A9')")
                .IsFixedLength()
                .HasColumnName("ROLE");
            entity.Property(e => e.ShowSsvc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("SHOW_SSVC");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'edit')")
                .HasColumnName("TYPE");
            entity.Property(e => e.Url)
                .HasMaxLength(512)
                .HasColumnName("URL");

            entity.HasOne(d => d.Related).WithMany(p => p.Views)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__VIEW__RELATED_ID__36F11965");

            entity.HasOne(d => d.Source).WithMany(p => p.Views)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VIEW__SOURCE_ID__35FCF52C");
        });

        modelBuilder.Entity<ViewWith>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VIEW_WIT__3214EC27A76CD9A8");

            entity.ToTable("VIEW_WITH");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Application)
                .HasMaxLength(64)
                .HasColumnName("APPLICATION");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Client)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'js')")
                .HasColumnName("CLIENT");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.ViewWiths)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__VIEW_WITH__RELAT__77CAB889");

            entity.HasOne(d => d.Source).WithMany(p => p.ViewWiths)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VIEW_WITH__SOURC__76D69450");
        });

        modelBuilder.Entity<Viewer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VIEWER__3214EC27E0FF8264");

            entity.ToTable("VIEWER");

            entity.HasIndex(e => e.Name, "C19").IsUnique();

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.ViewerUrl)
                .HasMaxLength(512)
                .HasColumnName("VIEWER_URL");
        });

        modelBuilder.Entity<WbsActivity2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WBS_ACTI__3214EC27E18391B1");

            entity.ToTable("WBS_ACTIVITY2");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WbsActivity2s)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WBS_ACTIV__RELAT__513AFB4D");

            entity.HasOne(d => d.Source).WithMany(p => p.WbsActivity2s)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WBS_ACTIV__SOURC__5046D714");
        });

        modelBuilder.Entity<WbsDeliverable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WBS_DELI__3214EC279E9224DD");

            entity.ToTable("WBS_DELIVERABLE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.ExternalId, "I1");

            entity.HasIndex(e => e.RelatedId, "I2");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(256)
                .HasColumnName("EXTERNAL_ID");
            entity.Property(e => e.ExternalOwner)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_OWNER");
            entity.Property(e => e.ExternalType)
                .HasMaxLength(128)
                .HasColumnName("EXTERNAL_TYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.WbsDeliverables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WBS_DELIV__SOURC__522F1F86");
        });

        modelBuilder.Entity<WbsElement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WBS_ELEM__3214EC27B136B998");

            entity.ToTable("WBS_ELEMENT");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Cpi)
                .HasColumnType("decimal(6, 4)")
                .HasColumnName("CPI");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DelivRequired)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'0')")
                .IsFixedLength()
                .HasColumnName("DELIV_REQUIRED");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsTop)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_TOP");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PrevItem)
                .HasMaxLength(32)
                .HasColumnName("PREV_ITEM");
            entity.Property(e => e.ProjNum).HasColumnName("PROJ_NUM");
            entity.Property(e => e.RollupActualWork)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ROLLUP_ACTUAL_WORK");
            entity.Property(e => e.RollupDateSchedDue)
                .HasColumnType("datetime")
                .HasColumnName("ROLLUP_DATE_SCHED_DUE");
            entity.Property(e => e.RollupDateSchedStart)
                .HasColumnType("datetime")
                .HasColumnName("ROLLUP_DATE_SCHED_START");
            entity.Property(e => e.RollupDateStartAct)
                .HasColumnType("datetime")
                .HasColumnName("ROLLUP_DATE_START_ACT");
            entity.Property(e => e.RollupDuration).HasColumnName("ROLLUP_DURATION");
            entity.Property(e => e.RollupDurationComplSum).HasColumnName("ROLLUP_DURATION_COMPL_SUM");
            entity.Property(e => e.RollupDurationSum).HasColumnName("ROLLUP_DURATION_SUM");
            entity.Property(e => e.RollupEarnedValue).HasColumnName("ROLLUP_EARNED_VALUE");
            entity.Property(e => e.RollupPercentCompl).HasColumnName("ROLLUP_PERCENT_COMPL");
            entity.Property(e => e.RollupPlannedValue).HasColumnName("ROLLUP_PLANNED_VALUE");
            entity.Property(e => e.RollupStatus)
                .HasMaxLength(64)
                .HasColumnName("ROLLUP_STATUS");
            entity.Property(e => e.RollupWorkEst).HasColumnName("ROLLUP_WORK_EST");
            entity.Property(e => e.RollupWorkEstCurr).HasColumnName("ROLLUP_WORK_EST_CURR");
            entity.Property(e => e.Spi)
                .HasColumnType("decimal(6, 4)")
                .HasColumnName("SPI");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.WbsIndex)
                .HasMaxLength(30)
                .HasColumnName("WBS_INDEX");
        });

        modelBuilder.Entity<Workflow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27E47E2AFF");

            entity.ToTable("WORKFLOW");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.SourceType)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_TYPE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.Workflows)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW__RELATE__416EA7D8");
        });

        modelBuilder.Entity<WorkflowMap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27243FC511");

            entity.ToTable("WORKFLOW_MAP");

            entity.HasIndex(e => new { e.Name, e.ArasUniquenessHelper }, "C50").IsUnique();

            entity.HasIndex(e => new { e.ConfigId, e.Generation }, "UC_WORKFLOW_MAP_ConfigId_Generation").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ArasUniquenessHelper)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARAS:UNIQUENESS_HELPER");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.Comments)
                .HasMaxLength(256)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("EFFECTIVE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NodeBgColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#FFFFFF')")
                .IsFixedLength()
                .HasColumnName("NODE_BG_COLOR");
            entity.Property(e => e.NodeLabel1Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#808080')")
                .IsFixedLength()
                .HasColumnName("NODE_LABEL1_COLOR");
            entity.Property(e => e.NodeLabel1Font)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Arial-plain-12')")
                .HasColumnName("NODE_LABEL1_FONT");
            entity.Property(e => e.NodeLabel2Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#808080')")
                .IsFixedLength()
                .HasColumnName("NODE_LABEL2_COLOR");
            entity.Property(e => e.NodeLabel2Font)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Arial-plain-12')")
                .HasColumnName("NODE_LABEL2_FONT");
            entity.Property(e => e.NodeNameColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#0000FF')")
                .IsFixedLength()
                .HasColumnName("NODE_NAME_COLOR");
            entity.Property(e => e.NodeNameFont)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Arial-plain-12')")
                .HasColumnName("NODE_NAME_FONT");
            entity.Property(e => e.NodeSize)
                .HasMaxLength(8)
                .HasDefaultValueSql("(N'30')")
                .HasColumnName("NODE_SIZE");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ProcessOwner)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'8FE5430B42014D94AE83246F299D9CC4')")
                .IsFixedLength()
                .HasColumnName("PROCESS_OWNER");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("datetime")
                .HasColumnName("RELEASE_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SupersededDate)
                .HasColumnType("datetime")
                .HasColumnName("SUPERSEDED_DATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransitionLineColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#000000')")
                .IsFixedLength()
                .HasColumnName("TRANSITION_LINE_COLOR");
            entity.Property(e => e.TransitionNameColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'#000000')")
                .IsFixedLength()
                .HasColumnName("TRANSITION_NAME_COLOR");
            entity.Property(e => e.TransitionNameFont)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'Arial-plain-10')")
                .HasColumnName("TRANSITION_NAME_FONT");
        });

        modelBuilder.Entity<WorkflowMapActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC2769EE0829");

            entity.ToTable("WORKFLOW_MAP_ACTIVITY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowMapActivities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__23DE44F1");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowMapActivities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__22EA20B8");
        });

        modelBuilder.Entity<WorkflowMapPath>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC274BC83AAC");

            entity.ToTable("WORKFLOW_MAP_PATH");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Authentication)
                .HasMaxLength(64)
                .HasDefaultValueSql("(N'none')")
                .HasColumnName("AUTHENTICATION");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsOverride)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_OVERRIDE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Segments)
                .HasMaxLength(128)
                .HasColumnName("SEGMENTS");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<WorkflowMapPathPost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC271F8A1229");

            entity.ToTable("WORKFLOW_MAP_PATH_POST");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence)
                .HasDefaultValueSql("((1))")
                .HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowMapPathPosts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__25C68D63");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowMapPathPosts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__24D2692A");
        });

        modelBuilder.Entity<WorkflowMapPathPre>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC279B594E05");

            entity.ToTable("WORKFLOW_MAP_PATH_PRE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence)
                .HasDefaultValueSql("((1))")
                .HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowMapPathPres)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__27AED5D5");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowMapPathPres)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__26BAB19C");
        });

        modelBuilder.Entity<WorkflowMapVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC276ECD5660");

            entity.ToTable("WORKFLOW_MAP_VARIABLE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasColumnName("DATATYPE");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(80)
                .HasColumnName("DEFAULT_VALUE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.Source)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.WorkflowMapVariables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__78BEDCC2");
        });

        modelBuilder.Entity<WorkflowProcess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27338F64D2");

            entity.ToTable("WORKFLOW_PROCESS");

            entity.HasIndex(e => e.Name, "I0");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.ActiveDate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIVE_DATE");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ClosedDate)
                .HasColumnType("datetime")
                .HasColumnName("CLOSED_DATE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CopiedFrom)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COPIED_FROM");
            entity.Property(e => e.CopiedFromString)
                .HasMaxLength(32)
                .HasColumnName("COPIED_FROM_STRING");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(64)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(128)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NodeBgColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_BG_COLOR");
            entity.Property(e => e.NodeLabel1Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_LABEL1_COLOR");
            entity.Property(e => e.NodeLabel1Font)
                .HasMaxLength(64)
                .HasColumnName("NODE_LABEL1_FONT");
            entity.Property(e => e.NodeLabel2Color)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_LABEL2_COLOR");
            entity.Property(e => e.NodeLabel2Font)
                .HasMaxLength(64)
                .HasColumnName("NODE_LABEL2_FONT");
            entity.Property(e => e.NodeNameColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NODE_NAME_COLOR");
            entity.Property(e => e.NodeNameFont)
                .HasMaxLength(64)
                .HasColumnName("NODE_NAME_FONT");
            entity.Property(e => e.NodeSize)
                .HasMaxLength(8)
                .HasColumnName("NODE_SIZE");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.ProcessOwner)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PROCESS_OWNER");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.SubOf)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SUB_OF");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TransitionLineColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSITION_LINE_COLOR");
            entity.Property(e => e.TransitionNameColor)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TRANSITION_NAME_COLOR");
            entity.Property(e => e.TransitionNameFont)
                .HasMaxLength(64)
                .HasColumnName("TRANSITION_NAME_FONT");
        });

        modelBuilder.Entity<WorkflowProcessActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC273FC66AB3");

            entity.ToTable("WORKFLOW_PROCESS_ACTIVITY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowProcessActivities)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__2D67AF2B");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowProcessActivities)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__2C738AF2");
        });

        modelBuilder.Entity<WorkflowProcessPath>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC2799C3BBB1");

            entity.ToTable("WORKFLOW_PROCESS_PATH");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Authentication)
                .HasMaxLength(64)
                .HasColumnName("AUTHENTICATION");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsComplete)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_COMPLETE");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsDefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DEFAULT");
            entity.Property(e => e.IsDisabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_DISABLED");
            entity.Property(e => e.IsOverride)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_OVERRIDE");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Segments)
                .HasMaxLength(128)
                .HasColumnName("SEGMENTS");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<WorkflowProcessPathPost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC279F1130F5");

            entity.ToTable("WORKFLOW_PROCESS_PATH_POST");

            entity.HasIndex(e => e.RelatedId, "I0");

            entity.HasIndex(e => e.SourceId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence)
                .HasDefaultValueSql("((1))")
                .HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowProcessPathPosts)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__3138400F");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowProcessPathPosts)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__30441BD6");
        });

        modelBuilder.Entity<WorkflowProcessPathPre>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC2787124336");

            entity.ToTable("WORKFLOW_PROCESS_PATH_PRE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.Sequence)
                .HasDefaultValueSql("((1))")
                .HasColumnName("SEQUENCE");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WorkflowProcessPathPres)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WORKFLOW___RELAT__2F4FF79D");

            entity.HasOne(d => d.Source).WithMany(p => p.WorkflowProcessPathPres)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__2E5BD364");
        });

        modelBuilder.Entity<WorkflowProcessVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WORKFLOW__3214EC27A0422C65");

            entity.ToTable("WORKFLOW_PROCESS_VARIABLE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Datatype)
                .HasMaxLength(64)
                .HasColumnName("DATATYPE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.Label)
                .HasMaxLength(64)
                .HasColumnName("LABEL");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.Source)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.Value)
                .HasMaxLength(80)
                .HasColumnName("VALUE");

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.WorkflowProcessVariables)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WORKFLOW___SOURC__79B300FB");
        });

        modelBuilder.Entity<WorkflowTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Workflow_Task");

            entity.Property(e => e.AssignedTo)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ASSIGNED_TO");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.Container)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER");
            entity.Property(e => e.ContainerTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONTAINER_TYPE_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("DUE_DATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.Icon)
                .HasMaxLength(128)
                .HasColumnName("icon");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Instructions)
                .HasMaxLength(1024)
                .HasColumnName("INSTRUCTIONS");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.Item)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM");
            entity.Property(e => e.ItemTypeId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_TYPE_ID");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LanguageCodeFilter)
                .HasMaxLength(3)
                .HasColumnName("language_code_filter");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.MyAssignment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MY_ASSIGNMENT");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("START_DATE");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasMaxLength(32)
                .HasColumnName("STATUS");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Wsconfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WSCONFIG__3214EC27A66C64DD");

            entity.ToTable("WSCONFIGURATION");

            entity.HasIndex(e => e.Name, "C51").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.CompatMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COMPAT_MODE");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Description)
                .HasMaxLength(512)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
        });

        modelBuilder.Entity<Wstype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WSTYPE__3214EC27B75F5E0E");

            entity.ToTable("WSTYPE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Alias)
                .HasMaxLength(32)
                .HasColumnName("ALIAS");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Expand)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EXPAND");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.IsTop)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_TOP");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");
            entity.Property(e => e.TypeName)
                .HasMaxLength(32)
                .HasColumnName("TYPE_NAME");

            entity.HasOne(d => d.Source).WithMany(p => p.Wstypes)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WSTYPE__SOURCE_I__7AA72534");
        });

        modelBuilder.Entity<Wstypeaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WSTYPEAC__3214EC278B0D8103");

            entity.ToTable("WSTYPEACTION");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.CustomActionName)
                .HasMaxLength(32)
                .HasColumnName("CUSTOM_ACTION_NAME");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("NAME");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Wstypeactions)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WSTYPEACT__SOURC__0618D7E0");
        });

        modelBuilder.Entity<Wstypeassociate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WSTYPEAS__3214EC27B4E3FFD3");

            entity.ToTable("WSTYPEASSOCIATE");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.Ptiname)
                .HasMaxLength(32)
                .HasColumnName("PTINAME");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Related).WithMany(p => p.WstypeassociateRelateds)
                .HasForeignKey(d => d.RelatedId)
                .HasConstraintName("FK__WSTYPEASS__RELAT__08012052");

            entity.HasOne(d => d.Source).WithMany(p => p.WstypeassociateSources)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WSTYPEASS__SOURC__070CFC19");
        });

        modelBuilder.Entity<Wstypeproperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WSTYPEPR__3214EC2715414DFA");

            entity.ToTable("WSTYPEPROPERTY");

            entity.HasIndex(e => e.SourceId, "I0");

            entity.HasIndex(e => e.RelatedId, "I1");

            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Alias)
                .HasMaxLength(32)
                .HasColumnName("ALIAS");
            entity.Property(e => e.Behavior)
                .HasMaxLength(64)
                .HasColumnName("BEHAVIOR");
            entity.Property(e => e.Classification)
                .HasMaxLength(512)
                .HasColumnName("CLASSIFICATION");
            entity.Property(e => e.ConfigId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CONFIG_ID");
            entity.Property(e => e.CreatedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CREATED_BY_ID");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("CREATED_ON");
            entity.Property(e => e.Css).HasColumnName("CSS");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CURRENT_STATE");
            entity.Property(e => e.Generation).HasColumnName("GENERATION");
            entity.Property(e => e.IsCurrent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_CURRENT");
            entity.Property(e => e.IsReleased)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IS_RELEASED");
            entity.Property(e => e.KeyedName)
                .HasMaxLength(128)
                .HasColumnName("KEYED_NAME");
            entity.Property(e => e.LockedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LOCKED_BY_ID");
            entity.Property(e => e.MajorRev)
                .HasMaxLength(8)
                .HasColumnName("MAJOR_REV");
            entity.Property(e => e.ManagedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MANAGED_BY_ID");
            entity.Property(e => e.MinorRev)
                .HasMaxLength(8)
                .HasColumnName("MINOR_REV");
            entity.Property(e => e.ModifiedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MODIFIED_BY_ID");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("MODIFIED_ON");
            entity.Property(e => e.NewVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEW_VERSION");
            entity.Property(e => e.NotLockable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NOT_LOCKABLE");
            entity.Property(e => e.OwnedById)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OWNED_BY_ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PERMISSION_ID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_NAME");
            entity.Property(e => e.PropertyRealType)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_REAL_TYPE");
            entity.Property(e => e.PropertyType)
                .HasMaxLength(32)
                .HasColumnName("PROPERTY_TYPE");
            entity.Property(e => e.RelatedId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RELATED_ID");
            entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            entity.Property(e => e.SourceId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOURCE_ID");
            entity.Property(e => e.State)
                .HasMaxLength(32)
                .HasColumnName("STATE");
            entity.Property(e => e.TeamId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TEAM_ID");

            entity.HasOne(d => d.Source).WithMany(p => p.Wstypeproperties)
                .HasForeignKey(d => d.SourceId)
                .HasConstraintName("FK__WSTYPEPRO__SOURC__08F5448B");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
